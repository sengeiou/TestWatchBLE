com.idevicesinc.sweetblue.BleAdvertisingPacket -> com.idevicesinc.sweetblue.a:
    java.util.UUID[] serviceUuids -> a
    java.util.Map serviceData -> b
    int m_options -> c
    int m_manufacturerId -> d
    byte[] m_manData -> e
    boolean isConnectable() -> a
    boolean includeDeviceName() -> b
    boolean includeTxPowerLevel() -> c
    android.bluetooth.le.AdvertiseSettings getNativeSettings(com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode,com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower,com.idevicesinc.sweetblue.utils.Interval) -> a
    android.bluetooth.le.AdvertiseData getNativeData() -> d
com.idevicesinc.sweetblue.BleAdvertisingPacket$Option -> com.idevicesinc.sweetblue.a$a:
    com.idevicesinc.sweetblue.BleAdvertisingPacket$Option CONNECTABLE -> a
    com.idevicesinc.sweetblue.BleAdvertisingPacket$Option INCLUDE_NAME -> b
    com.idevicesinc.sweetblue.BleAdvertisingPacket$Option INCLUDE_TX_POWER -> c
    int m_bit -> d
    com.idevicesinc.sweetblue.BleAdvertisingPacket$Option[] $VALUES -> e
    com.idevicesinc.sweetblue.BleAdvertisingPacket$Option[] values() -> values
    com.idevicesinc.sweetblue.BleAdvertisingPacket$Option valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int bit() -> a
    boolean overlaps(int) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleAdvertisingSettings -> com.idevicesinc.sweetblue.b:
com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode -> com.idevicesinc.sweetblue.b$a:
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode AUTO -> a
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode LOW_FREQUENCY -> b
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode MEDIUM_FREQUENCY -> c
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode HIGH_FREQUENCY -> d
    int m_nativeMode -> e
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode[] $VALUES -> f
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode[] values() -> values
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getNativeMode() -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower -> com.idevicesinc.sweetblue.b$b:
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower ULTRA_LOW -> a
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower LOW -> b
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower MEDIUM -> c
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower HIGH -> d
    int m_nativeMode -> e
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower[] $VALUES -> f
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower[] values() -> values
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getNativeMode() -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleConnectionPriority -> com.idevicesinc.sweetblue.c:
    com.idevicesinc.sweetblue.BleConnectionPriority LOW -> a
    com.idevicesinc.sweetblue.BleConnectionPriority MEDIUM -> b
    com.idevicesinc.sweetblue.BleConnectionPriority HIGH -> c
    int m_nativeMode -> d
    com.idevicesinc.sweetblue.BleConnectionPriority[] $VALUES -> e
    com.idevicesinc.sweetblue.BleConnectionPriority[] values() -> values
    com.idevicesinc.sweetblue.BleConnectionPriority valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getNativeMode() -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice -> com.idevicesinc.sweetblue.d:
    com.idevicesinc.sweetblue.BleDevice NULL -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener DEFAULT_CONNECTION_FAIL_LISTENER -> b
    com.idevicesinc.sweetblue.P_NativeDeviceWrapper m_nativeWrapper -> c
    double m_timeSinceLastDiscovery -> l
    com.idevicesinc.sweetblue.utils.EpochTime m_lastDiscoveryTime -> m
    com.idevicesinc.sweetblue.P_BleDevice_Listeners m_listeners -> d
    com.idevicesinc.sweetblue.P_DeviceStateTracker m_stateTracker -> n
    com.idevicesinc.sweetblue.P_DeviceStateTracker m_stateTracker_shortTermReconnect -> o
    com.idevicesinc.sweetblue.P_PollManager m_pollMngr -> p
    com.idevicesinc.sweetblue.P_TransactionManager m_txnMngr -> e
    com.idevicesinc.sweetblue.P_ReconnectManager m_reconnectMngr_longTerm -> q
    com.idevicesinc.sweetblue.P_ReconnectManager m_reconnectMngr_shortTerm -> r
    com.idevicesinc.sweetblue.P_ConnectionFailManager m_connectionFailMngr -> s
    com.idevicesinc.sweetblue.P_RssiPollManager m_rssiPollMngr -> t
    com.idevicesinc.sweetblue.P_RssiPollManager m_rssiPollMngr_auto -> u
    com.idevicesinc.sweetblue.P_Task_Disconnect m_dummyDisconnectTask -> v
    com.idevicesinc.sweetblue.P_HistoricalDataManager m_historicalDataMngr -> w
    com.idevicesinc.sweetblue.P_BondManager m_bondMngr -> f
    com.idevicesinc.sweetblue.ReadWriteListener m_defaultReadWriteListener -> x
    com.idevicesinc.sweetblue.NotificationListener m_defaultNotificationListener -> y
    com.idevicesinc.sweetblue.utils.TimeEstimator m_writeTimeEstimator -> z
    com.idevicesinc.sweetblue.utils.TimeEstimator m_readTimeEstimator -> A
    com.idevicesinc.sweetblue.PA_Task$I_StateListener m_taskStateListener -> B
    com.idevicesinc.sweetblue.BleDeviceOrigin m_origin -> C
    com.idevicesinc.sweetblue.BleDeviceOrigin m_origin_latest -> D
    com.idevicesinc.sweetblue.BleConnectionPriority m_connectionPriority -> E
    int m_mtu -> F
    int m_rssi -> G
    int m_advertisingFlags -> H
    java.lang.Integer m_knownTxPower -> I
    byte[] m_scanRecord -> J
    com.idevicesinc.sweetblue.utils.BleScanInfo m_scanInfo -> K
    boolean m_useAutoConnect -> L
    boolean m_alwaysUseAutoConnect -> M
    java.lang.Boolean m_lastConnectOrDisconnectWasUserExplicit -> N
    boolean m_lastDisconnectWasBecauseOfBleTurnOff -> O
    boolean m_underwentPossibleImplicitBondingAttempt -> P
    com.idevicesinc.sweetblue.BleDeviceConfig m_config -> Q
    com.idevicesinc.sweetblue.P_BleDeviceLayerManager m_layerManager -> R
    com.idevicesinc.sweetblue.P_NativeDeviceLayer m_deviceLayer -> S
    com.idevicesinc.sweetblue.BleDevice$BondListener$BondEvent m_nullBondEvent -> T
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent m_nullReadWriteEvent -> U
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent m_nullConnectionFailEvent -> V
    boolean m_isNull -> W
    com.idevicesinc.sweetblue.P_ReliableWriteManager m_reliableWriteMngr -> g
    void <init>(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.P_NativeDeviceLayer,java.lang.String,java.lang.String,com.idevicesinc.sweetblue.BleDeviceOrigin,com.idevicesinc.sweetblue.BleDeviceConfig,boolean) -> <init>
    com.idevicesinc.sweetblue.PA_ServiceManager newServiceManager() -> a
    void notifyOfPossibleImplicitBondingAttempt() -> b
    com.idevicesinc.sweetblue.P_DeviceStateTracker stateTracker_main() -> c
    void stateTracker_updateBoth(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,int,java.lang.Object[]) -> a
    com.idevicesinc.sweetblue.P_DeviceStateTracker stateTracker() -> d
    com.idevicesinc.sweetblue.P_ReconnectManager reconnectMngr() -> e
    void clear_discovery() -> W
    void clear_undiscovery() -> X
    void setConfig(com.idevicesinc.sweetblue.BleDeviceConfig) -> a
    void initEstimators() -> Y
    com.idevicesinc.sweetblue.BleDeviceConfig conf_device() -> f
    com.idevicesinc.sweetblue.BleNodeConfig conf_node() -> g
    com.idevicesinc.sweetblue.BleDeviceOrigin getOrigin() -> h
    com.idevicesinc.sweetblue.DeviceStateListener wrapListener(com.idevicesinc.sweetblue.BleDevice$StateListener) -> b
    com.idevicesinc.sweetblue.DeviceStateListener wrapListenerAllowNull(com.idevicesinc.sweetblue.BleDevice$StateListener) -> c
    void setListener_State(com.idevicesinc.sweetblue.DeviceStateListener) -> a
    void setListener_ConnectionFail(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener) -> a
    void setListener_Bond(com.idevicesinc.sweetblue.BleDevice$BondListener) -> a
    int getStateMask() -> i
    int getNativeStateMask() -> j
    int getRssi() -> k
    com.idevicesinc.sweetblue.utils.Percent getRssiPercent() -> l
    byte[] getScanRecord() -> m
    boolean isAny(com.idevicesinc.sweetblue.BleDeviceState[]) -> a
    boolean is(com.idevicesinc.sweetblue.BleDeviceState) -> a
    boolean isAny_internal(com.idevicesinc.sweetblue.BleDeviceState[]) -> b
    boolean is_internal(com.idevicesinc.sweetblue.BleDeviceState) -> b
    com.idevicesinc.sweetblue.P_BleDeviceLayerManager layerManager() -> n
    java.lang.String getName_debug() -> o
    android.bluetooth.BluetoothDevice getNative() -> p
    android.bluetooth.BluetoothGatt getNativeGatt() -> q
    java.lang.String getMacAddress() -> r
    com.idevicesinc.sweetblue.BleDevice$BondListener$BondEvent bond(com.idevicesinc.sweetblue.BleDevice$BondListener) -> b
    boolean unbond() -> s
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent connect() -> t
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent connect(com.idevicesinc.sweetblue.BleDevice$StateListener) -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent connect(com.idevicesinc.sweetblue.BleDevice$StateListener,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener) -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent connect(com.idevicesinc.sweetblue.BleTransaction$Auth,com.idevicesinc.sweetblue.BleTransaction$Init,com.idevicesinc.sweetblue.DeviceStateListener,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener) -> a
    boolean equals(com.idevicesinc.sweetblue.BleDevice) -> a
    boolean equals(java.lang.Object) -> equals
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent write(java.util.UUID,byte[],com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent write(java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.utils.FutureData,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent setConnectionPriority_private(com.idevicesinc.sweetblue.BleConnectionPriority,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.PE_TaskPriority) -> a
    com.idevicesinc.sweetblue.BleConnectionPriority getConnectionPriority() -> u
    int getMtu() -> v
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent setMtu_private(int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.PE_TaskPriority) -> a
    void readRssi_internal(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> a
    boolean performTransaction(com.idevicesinc.sweetblue.BleTransaction) -> a
    boolean performTransaction_earlyOut(com.idevicesinc.sweetblue.BleTransaction) -> b
    java.lang.String toString() -> toString
    boolean shouldAddOperationTime() -> Z
    void addReadTime(double) -> a
    void addWriteTime(double) -> b
    void setToAlwaysUseAutoConnectIfItWorked() -> w
    boolean shouldUseAutoConnect() -> x
    com.idevicesinc.sweetblue.P_BleDevice_Listeners getListeners() -> y
    com.idevicesinc.sweetblue.P_TaskQueue getTaskQueue() -> z
    com.idevicesinc.sweetblue.BleTransaction getOtaTxn() -> A
    com.idevicesinc.sweetblue.P_PollManager getPollManager() -> B
    void onNewlyDiscovered(com.idevicesinc.sweetblue.P_NativeDeviceLayer,com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$ScanEvent,int,byte[],com.idevicesinc.sweetblue.BleDeviceOrigin) -> a
    void onRediscovered(com.idevicesinc.sweetblue.P_NativeDeviceLayer,com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$ScanEvent,int,byte[],com.idevicesinc.sweetblue.BleDeviceOrigin) -> b
    void onUndiscovered(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> a
    double getTimeSinceLastDiscovery() -> C
    void onDiscovered_private(com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$ScanEvent,int,byte[]) -> a
    void updateKnownTxPower(int) -> c
    void updateRssi(int) -> a
    void updateMtu(int) -> b
    void updateConnectionPriority(com.idevicesinc.sweetblue.BleConnectionPriority) -> a
    void update(double) -> c
    void bond_justAddTheTask(com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior) -> a
    void unbond_justAddTheTask() -> D
    void unbond_justAddTheTask(com.idevicesinc.sweetblue.PE_TaskPriority) -> a
    void unbond_internal(com.idevicesinc.sweetblue.PE_TaskPriority,com.idevicesinc.sweetblue.BleDevice$BondListener$Status) -> a
    com.idevicesinc.sweetblue.P_DeviceServiceManager serviceMngr_device() -> E
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent connect_earlyOut() -> aa
    void attemptReconnect() -> F
    com.idevicesinc.sweetblue.BleTransaction$Auth getAuthTxn(com.idevicesinc.sweetblue.BleTransaction$Auth) -> a
    com.idevicesinc.sweetblue.BleTransaction$Init getInitTxn(com.idevicesinc.sweetblue.BleTransaction$Init) -> a
    void connect_private(com.idevicesinc.sweetblue.BleTransaction$Auth,com.idevicesinc.sweetblue.BleTransaction$Init,boolean) -> a
    void onConnecting(boolean,boolean,java.lang.Object[],boolean) -> a
    void onNativeConnect(boolean) -> a
    void getServices(java.lang.Object[]) -> a
    void onNativeConnectFail(com.idevicesinc.sweetblue.PE_TaskState,int,com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage) -> a
    void onServicesDiscovered() -> G
    void onFullyInitialized(int,java.lang.Object[]) -> a
    void setStateToDisconnected(boolean,com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,int,boolean,java.lang.Object[]) -> a
    void disconnectWithReason(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing,int,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void disconnectWithReason(com.idevicesinc.sweetblue.PE_TaskPriority,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing,int,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    boolean lastDisconnectWasBecauseOfBleTurnOff() -> H
    void saveLastDisconnect(boolean) -> b
    void onNativeDisconnect(boolean,int,boolean,boolean) -> a
    void softlyCancelTasks(int) -> d
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent read_internal(java.util.UUID,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,com.idevicesinc.sweetblue.DescriptorFilter,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent write_internal(java.util.UUID,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.utils.FutureData,com.idevicesinc.sweetblue.DescriptorFilter,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> a
    int getEffectiveWriteMtuSize() -> ab
    void addWriteDescriptorTasks(android.bluetooth.BluetoothGattDescriptor,com.idevicesinc.sweetblue.utils.FutureData,boolean,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> a
    void addWriteTasks(android.bluetooth.BluetoothGattCharacteristic,com.idevicesinc.sweetblue.utils.FutureData,boolean,com.idevicesinc.sweetblue.DescriptorFilter,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> a
    com.idevicesinc.sweetblue.PA_StateTracker$E_Intent lastConnectDisconnectIntent() -> I
    com.idevicesinc.sweetblue.PE_TaskPriority getOverrideReadWritePriority() -> J
    void invokeReadWriteCallback(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    com.idevicesinc.sweetblue.NotificationListener$NotificationEvent fromReadWriteEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent NULL_READWRITE_EVENT() -> K
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent NULL_CONNECTIONFAIL_INFO() -> L
    com.idevicesinc.sweetblue.BleDevice$BondListener$BondEvent NULL_BOND_EVENT() -> M
    boolean isNull() -> N
    java.lang.String NULL_MAC() -> O
    java.lang.String NULL_STRING() -> P
    void postEventAsCallback(com.idevicesinc.sweetblue.utils.GenericListener_Void,com.idevicesinc.sweetblue.utils.Event) -> a
    com.idevicesinc.sweetblue.P_ReconnectManager access$000(com.idevicesinc.sweetblue.BleDevice) -> b
    boolean access$102(com.idevicesinc.sweetblue.BleDevice,boolean) -> a
    boolean access$200(com.idevicesinc.sweetblue.BleDevice) -> c
    com.idevicesinc.sweetblue.P_ConnectionFailManager access$300(com.idevicesinc.sweetblue.BleDevice) -> d
    java.lang.Boolean access$402(com.idevicesinc.sweetblue.BleDevice,java.lang.Boolean) -> a
    boolean access$500(com.idevicesinc.sweetblue.BleDevice) -> e
    void access$600(com.idevicesinc.sweetblue.BleDevice,boolean) -> b
    com.idevicesinc.sweetblue.PA_Task$I_StateListener access$700(com.idevicesinc.sweetblue.BleDevice) -> f
    com.idevicesinc.sweetblue.P_ReconnectManager access$800(com.idevicesinc.sweetblue.BleDevice) -> g
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$1 -> com.idevicesinc.sweetblue.d$1:
    com.idevicesinc.sweetblue.BleDevice$StateListener val$listener -> a
    com.idevicesinc.sweetblue.BleDevice this$0 -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice$StateListener) -> <init>
    void onEvent(com.idevicesinc.sweetblue.BleDevice$StateListener$StateEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
com.idevicesinc.sweetblue.BleDevice$5 -> com.idevicesinc.sweetblue.d$2:
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status val$connectionFailReasonIfConnecting -> a
    com.idevicesinc.sweetblue.PE_TaskPriority val$disconnectPriority_nullable -> b
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing val$timing -> c
    int val$gattStatus -> d
    int val$bondFailReason -> e
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent val$txnFailReason -> f
    com.idevicesinc.sweetblue.BleDevice this$0 -> g
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status,com.idevicesinc.sweetblue.PE_TaskPriority,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing,int,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleDevice$6 -> com.idevicesinc.sweetblue.d$3:
    com.idevicesinc.sweetblue.utils.GenericListener_Void val$listener -> a
    com.idevicesinc.sweetblue.utils.Event val$event -> b
    com.idevicesinc.sweetblue.BleDevice this$0 -> c
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.utils.GenericListener_Void,com.idevicesinc.sweetblue.utils.Event) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleDevice$7 -> com.idevicesinc.sweetblue.d$4:
    int[] $SwitchMap$com$idevicesinc$sweetblue$BleDevice$ReadWriteListener$Type -> a
    int[] $SwitchMap$com$idevicesinc$sweetblue$BleDevice$BondListener$Status -> b
    int[] $SwitchMap$com$idevicesinc$sweetblue$BleDevice$ReadWriteListener$Status -> c
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$BondListener -> com.idevicesinc.sweetblue.d$a:
    void onEvent(com.idevicesinc.sweetblue.BleDevice$BondListener$BondEvent) -> a
com.idevicesinc.sweetblue.BleDevice$BondListener$BondEvent -> com.idevicesinc.sweetblue.d$a$a:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status m_status -> b
    int m_failReason -> c
    com.idevicesinc.sweetblue.utils.State$ChangeIntent m_intent -> d
    com.idevicesinc.sweetblue.BleDevice device() -> a
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status status() -> b
    int failReason() -> c
    com.idevicesinc.sweetblue.utils.State$ChangeIntent intent() -> d
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice$BondListener$Status,int,com.idevicesinc.sweetblue.utils.State$ChangeIntent) -> <init>
    com.idevicesinc.sweetblue.BleDevice$BondListener$BondEvent NULL(com.idevicesinc.sweetblue.BleDevice) -> b
    java.lang.String toString() -> toString
    boolean isNull() -> N
    com.idevicesinc.sweetblue.BleDevice$BondListener$BondEvent access$900(com.idevicesinc.sweetblue.BleDevice) -> a
com.idevicesinc.sweetblue.BleDevice$BondListener$Status -> com.idevicesinc.sweetblue.d$a$b:
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status NULL -> a
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status SUCCESS -> b
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status NULL_DEVICE -> c
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status ALREADY_BONDING_OR_BONDED -> d
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status FAILED_IMMEDIATELY -> e
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status FAILED_EVENTUALLY -> f
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status TIMED_OUT -> g
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status CANCELLED_FROM_UNBOND -> h
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status CANCELLED_FROM_BLE_TURNING_OFF -> i
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status[] $VALUES -> j
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status[] values() -> values
    com.idevicesinc.sweetblue.BleDevice$BondListener$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean canFailConnection() -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing timing() -> b
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener -> com.idevicesinc.sweetblue.d$b:
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$Please onEvent(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent) -> a
com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent -> com.idevicesinc.sweetblue.d$b$a:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status m_status -> b
    int m_bondFailReason -> c
    com.idevicesinc.sweetblue.BleDeviceState m_highestStateReached_latest -> d
    com.idevicesinc.sweetblue.BleDeviceState m_highestStateReached_total -> e
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing m_timing -> f
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent m_txnFailReason -> g
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent[] m_history -> h
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent[] s_emptyHistory -> i
    com.idevicesinc.sweetblue.BleDevice device() -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status status() -> b
    int bondFailReason() -> c
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing timing() -> d
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing,int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.utils.Interval,int,com.idevicesinc.sweetblue.BleDeviceState,com.idevicesinc.sweetblue.BleDeviceState,com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent,java.util.ArrayList) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent[] EMPTY_HISTORY() -> e
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent NULL(com.idevicesinc.sweetblue.BleDevice) -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent EARLY_OUT(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status) -> a
    boolean isNull() -> N
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status -> com.idevicesinc.sweetblue.d$b$b:
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status NULL -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status ALREADY_CONNECTING_OR_CONNECTED -> b
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status NULL_DEVICE -> c
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status NATIVE_CONNECTION_FAILED -> d
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status DISCOVERING_SERVICES_FAILED -> e
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status BONDING_FAILED -> f
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status AUTHENTICATION_FAILED -> g
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status INITIALIZATION_FAILED -> h
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status ROGUE_DISCONNECT -> i
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status EXPLICIT_DISCONNECT -> j
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status BLE_TURNING_OFF -> k
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status[] $VALUES -> l
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status[] values() -> values
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean wasCancelled() -> a
    boolean wasExplicit() -> b
    boolean allowsRetry() -> c
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing -> com.idevicesinc.sweetblue.d$b$c:
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing NOT_APPLICABLE -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing IMMEDIATELY -> b
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing EVENTUALLY -> c
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing TIMED_OUT -> d
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing[] $VALUES -> e
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing[] values() -> values
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$DefaultConnectionFailListener -> com.idevicesinc.sweetblue.d$c:
    com.idevicesinc.sweetblue.utils.Interval MAX_RETRY_TIME_FOR_BOND_FAILURE -> a
    int m_retryCount -> b
    int m_failCountBeforeUsingAutoConnect -> c
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$Please onEvent(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$ReadWriteListener -> com.idevicesinc.sweetblue.d$d:
com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent -> com.idevicesinc.sweetblue.d$d$a:
    java.util.UUID NON_APPLICABLE_UUID -> a
    com.idevicesinc.sweetblue.BleDevice m_device -> b
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type m_type -> c
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target m_target -> d
    java.util.UUID m_serviceUuid -> e
    java.util.UUID m_charUuid -> f
    java.util.UUID m_descUuid -> g
    byte[] m_data -> h
    int m_rssi -> i
    int m_mtu -> j
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status m_status -> k
    com.idevicesinc.sweetblue.utils.Interval m_transitTime -> l
    com.idevicesinc.sweetblue.utils.Interval m_totalTime -> m
    int m_gattStatus -> n
    boolean m_solicited -> o
    com.idevicesinc.sweetblue.BleConnectionPriority m_connectionPriority -> p
    com.idevicesinc.sweetblue.BleDevice device() -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type type() -> b
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target target() -> c
    java.util.UUID serviceUuid() -> d
    java.util.UUID charUuid() -> e
    byte[] data() -> f
    int rssi() -> g
    int mtu() -> h
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status status() -> i
    com.idevicesinc.sweetblue.utils.Interval time_ota() -> j
    com.idevicesinc.sweetblue.utils.Interval time_total() -> k
    int gattStatus() -> l
    boolean solicited() -> m
    com.idevicesinc.sweetblue.BleConnectionPriority connectionPriority() -> n
    void <init>(com.idevicesinc.sweetblue.BleDevice,java.util.UUID,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,byte[],com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,double,double,boolean) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,double,double,boolean) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,double,double,boolean) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleConnectionPriority,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,double,double,boolean) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent NULL(com.idevicesinc.sweetblue.BleDevice) -> a
    boolean wasSuccess() -> o
    boolean isRead() -> p
    boolean isNull() -> N
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status -> com.idevicesinc.sweetblue.d$d$b:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status NULL -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status SUCCESS -> b
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status NULL_DEVICE -> c
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status NOT_CONNECTED -> d
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status NO_MATCHING_TARGET -> e
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status RELIABLE_WRITE_FAILED_TO_BEGIN -> f
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status RELIABLE_WRITE_ALREADY_BEGAN -> g
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status RELIABLE_WRITE_NEVER_BEGAN -> h
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status RELIABLE_WRITE_ABORTED -> i
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status OPERATION_NOT_SUPPORTED -> j
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status ANDROID_VERSION_NOT_SUPPORTED -> k
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status FAILED_TO_TOGGLE_NOTIFICATION -> l
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status FAILED_TO_SET_VALUE_ON_TARGET -> m
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status FAILED_TO_SEND_OUT -> n
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status CANCELLED_FROM_DISCONNECT -> o
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status CANCELLED_FROM_BLE_TURNING_OFF -> p
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status NULL_DATA -> q
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status EMPTY_DATA -> r
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status INVALID_DATA -> s
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status REMOTE_GATT_FAILURE -> t
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status TIMED_OUT -> u
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status[] $VALUES -> v
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status[] values() -> values
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target -> com.idevicesinc.sweetblue.d$d$c:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target NULL -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target CHARACTERISTIC -> b
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target DESCRIPTOR -> c
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target RSSI -> d
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target MTU -> e
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target RELIABLE_WRITE -> f
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target CONNECTION_PRIORITY -> g
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target[] $VALUES -> h
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target[] values() -> values
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type -> com.idevicesinc.sweetblue.d$d$d:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type NULL -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type READ -> b
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type WRITE -> c
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type WRITE_NO_RESPONSE -> d
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type WRITE_SIGNED -> e
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type POLL -> f
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type NOTIFICATION -> g
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type INDICATION -> h
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type PSUEDO_NOTIFICATION -> i
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type ENABLING_NOTIFICATION -> j
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type DISABLING_NOTIFICATION -> k
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type[] $VALUES -> l
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type[] values() -> values
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isRead() -> a
    boolean isWrite() -> b
    boolean isNotification() -> c
    boolean isNativeNotification() -> d
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source toHistoricalDataSource() -> e
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDevice$StateListener -> com.idevicesinc.sweetblue.d$e:
    void onEvent(com.idevicesinc.sweetblue.BleDevice$StateListener$StateEvent) -> a
com.idevicesinc.sweetblue.BleDevice$StateListener$StateEvent -> com.idevicesinc.sweetblue.d$e$a:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    int m_gattStatus -> b
    com.idevicesinc.sweetblue.BleDevice device() -> a
    int gattStatus() -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice,int,int,int,int) -> <init>
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleDeviceConfig -> com.idevicesinc.sweetblue.e:
    boolean forceBondDialog -> a
    com.idevicesinc.sweetblue.utils.Interval gattRefreshDelay -> b
    java.lang.Boolean tryBondingWhileDisconnected -> c
    java.lang.Boolean tryBondingWhileDisconnected_manageOnDisk -> d
    java.lang.Boolean saveNameChangesToDisk -> e
    java.lang.Boolean autoGetServices -> f
    boolean autoEnableNotifiesOnReconnect -> g
    boolean autoNegotiateMtuOnReconnect -> h
    java.lang.Boolean allowDuplicatePollEntries -> i
    java.lang.Boolean includeOtaReadWriteTimesInAverage -> j
    java.lang.Boolean retainDeviceWhenBleTurnsOff -> k
    java.lang.Boolean undiscoverDeviceWhenBleTurnsOff -> l
    java.lang.Boolean autoReconnectDeviceWhenBleTurnsBackOn -> m
    java.lang.Boolean manageLastDisconnectOnDisk -> n
    java.lang.Boolean cacheDeviceOnUndiscovery -> o
    java.lang.Boolean bondingFailFailsConnection -> p
    java.lang.Boolean useGattRefresh -> q
    boolean connectFailRetryConnectingOverall -> r
    java.lang.Boolean useLeTransportForBonding -> s
    com.idevicesinc.sweetblue.utils.Interval minScanTimeNeededForUndiscovery -> t
    com.idevicesinc.sweetblue.utils.Interval undiscoveryKeepAlive -> u
    com.idevicesinc.sweetblue.utils.Interval rssiAutoPollRate -> v
    java.lang.Integer nForAverageRunningWriteTime -> w
    java.lang.Integer nForAverageRunningReadTime -> x
    java.lang.Integer defaultTxPower -> y
    java.lang.Integer rssi_min -> z
    java.lang.Integer rssi_max -> A
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter bondFilter -> B
    com.idevicesinc.sweetblue.BleTransaction$Auth defaultAuthTransaction -> C
    com.idevicesinc.sweetblue.BleDeviceConfig$AuthTransactionFactory defaultAuthFactory -> D
    com.idevicesinc.sweetblue.BleTransaction$Init defaultInitTransaction -> E
    com.idevicesinc.sweetblue.BleDeviceConfig$InitTransactionFactory defaultInitFactory -> F
    int maxConnectionFailHistorySize -> G
    void <init>() -> <init>
    com.idevicesinc.sweetblue.BleDeviceConfig clone() -> a
    com.idevicesinc.sweetblue.BleNodeConfig clone() -> b
    java.lang.Object clone() -> clone
com.idevicesinc.sweetblue.BleDeviceConfig$AuthTransactionFactory -> com.idevicesinc.sweetblue.e$a:
    com.idevicesinc.sweetblue.BleTransaction$Auth newAuthTxn() -> a
com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter -> com.idevicesinc.sweetblue.e$b:
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$Please onEvent(com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$StateChangeEvent) -> a
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$Please onEvent(com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEvent) -> a
com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEvent -> com.idevicesinc.sweetblue.e$b$a:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    java.util.UUID m_uuid -> b
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType m_type -> c
    com.idevicesinc.sweetblue.BleDevice device() -> a
    java.util.UUID charUuid() -> b
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType type() -> c
    void <init>(com.idevicesinc.sweetblue.BleDevice,java.util.UUID,com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType) -> <init>
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType -> com.idevicesinc.sweetblue.e$b$b:
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType READ -> a
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType WRITE -> b
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType ENABLE_NOTIFY -> c
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType[] $VALUES -> d
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType[] values() -> values
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$Please -> com.idevicesinc.sweetblue.e$b$c:
    java.lang.Boolean m_bond -> a
    com.idevicesinc.sweetblue.BleDevice$BondListener m_bondListener -> b
    void <init>(java.lang.Boolean,com.idevicesinc.sweetblue.BleDevice$BondListener) -> <init>
    java.lang.Boolean bond_private() -> a
    com.idevicesinc.sweetblue.BleDevice$BondListener listener() -> b
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$Please unbond() -> c
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$Please unbondIf(boolean) -> a
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$Please doNothing() -> d
com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$StateChangeEvent -> com.idevicesinc.sweetblue.e$b$d:
    void <init>(com.idevicesinc.sweetblue.BleDevice,int,int,int,int) -> <init>
com.idevicesinc.sweetblue.BleDeviceConfig$DefaultBondFilter -> com.idevicesinc.sweetblue.e$c:
    void <init>() -> <init>
    boolean phoneHasBondingIssues() -> a
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$Please onEvent(com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$StateChangeEvent) -> a
    com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$Please onEvent(com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEvent) -> a
com.idevicesinc.sweetblue.BleDeviceConfig$InitTransactionFactory -> com.idevicesinc.sweetblue.e$d:
    com.idevicesinc.sweetblue.BleTransaction$Init newInitTxn() -> a
com.idevicesinc.sweetblue.BleDeviceOrigin -> com.idevicesinc.sweetblue.f:
    com.idevicesinc.sweetblue.BleDeviceOrigin EXPLICIT -> a
    com.idevicesinc.sweetblue.BleDeviceOrigin FROM_DISCOVERY -> b
    com.idevicesinc.sweetblue.BleDeviceOrigin[] $VALUES -> c
    com.idevicesinc.sweetblue.BleDeviceOrigin[] values() -> values
    com.idevicesinc.sweetblue.BleDeviceOrigin valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDeviceState -> com.idevicesinc.sweetblue.g:
    com.idevicesinc.sweetblue.BleDeviceState NULL -> a
    com.idevicesinc.sweetblue.BleDeviceState UNDISCOVERED -> b
    com.idevicesinc.sweetblue.BleDeviceState RECONNECTING_LONG_TERM -> c
    com.idevicesinc.sweetblue.BleDeviceState RECONNECTING_SHORT_TERM -> d
    com.idevicesinc.sweetblue.BleDeviceState DISCOVERED -> e
    com.idevicesinc.sweetblue.BleDeviceState ADVERTISING -> f
    com.idevicesinc.sweetblue.BleDeviceState DISCONNECTED -> g
    com.idevicesinc.sweetblue.BleDeviceState UNBONDED -> h
    com.idevicesinc.sweetblue.BleDeviceState BONDING -> i
    com.idevicesinc.sweetblue.BleDeviceState BONDED -> j
    com.idevicesinc.sweetblue.BleDeviceState CONNECTING_OVERALL -> k
    com.idevicesinc.sweetblue.BleDeviceState CONNECTING -> l
    com.idevicesinc.sweetblue.BleDeviceState CONNECTED -> m
    com.idevicesinc.sweetblue.BleDeviceState DISCOVERING_SERVICES -> n
    com.idevicesinc.sweetblue.BleDeviceState SERVICES_DISCOVERED -> o
    com.idevicesinc.sweetblue.BleDeviceState AUTHENTICATING -> p
    com.idevicesinc.sweetblue.BleDeviceState AUTHENTICATED -> q
    com.idevicesinc.sweetblue.BleDeviceState INITIALIZING -> r
    com.idevicesinc.sweetblue.BleDeviceState INITIALIZED -> s
    com.idevicesinc.sweetblue.BleDeviceState PERFORMING_OTA -> t
    int PURGEABLE_MASK -> u
    com.idevicesinc.sweetblue.BleDeviceState[] s_values -> w
    int FULL_MASK -> v
    com.idevicesinc.sweetblue.BleDeviceState[] $VALUES -> x
    com.idevicesinc.sweetblue.BleDeviceState[] values() -> values
    com.idevicesinc.sweetblue.BleDeviceState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean overlaps(int) -> a
    int bit() -> a
    boolean didEnter(int,int) -> a
    com.idevicesinc.sweetblue.BleDeviceState[] VALUES() -> b
    com.idevicesinc.sweetblue.BleDeviceState getTransitoryConnectionState(int) -> b
    int getConnectionOrdinal() -> c
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleDeviceState$1 -> com.idevicesinc.sweetblue.g$1:
    int[] $SwitchMap$com$idevicesinc$sweetblue$BleDeviceState -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleManager -> com.idevicesinc.sweetblue.h:
    android.content.Context m_context -> x
    com.idevicesinc.sweetblue.BleManager$UpdateRunnable m_updateRunnable -> y
    com.idevicesinc.sweetblue.P_ScanFilterManager m_filterMngr -> z
    com.idevicesinc.sweetblue.P_BluetoothCrashResolver m_crashResolver -> a
    com.idevicesinc.sweetblue.P_Logger m_logger -> A
    com.idevicesinc.sweetblue.BleManagerConfig m_config -> b
    com.idevicesinc.sweetblue.P_DeviceManager m_deviceMngr -> c
    com.idevicesinc.sweetblue.P_DeviceManager m_deviceMngr_cache -> d
    com.idevicesinc.sweetblue.P_BleManager_Listeners m_listeners -> e
    com.idevicesinc.sweetblue.P_BleStateTracker m_stateTracker -> f
    com.idevicesinc.sweetblue.P_NativeBleStateTracker m_nativeStateTracker -> g
    com.idevicesinc.sweetblue.P_PostManager m_postManager -> B
    com.idevicesinc.sweetblue.P_ScanManager m_scanManager -> C
    com.idevicesinc.sweetblue.P_TaskQueue m_taskQueue -> D
    com.idevicesinc.sweetblue.P_UhOhThrottler m_uhOhThrottler -> E
    com.idevicesinc.sweetblue.P_WakeLockManager m_wakeLockMngr -> h
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener m_discoveryListener -> i
    com.idevicesinc.sweetblue.BleManager$AssertListener m_assertionListener -> F
    com.idevicesinc.sweetblue.DeviceStateListener m_defaultDeviceStateListener -> j
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener m_defaultConnectionFailListener -> k
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener m_defaultConnectionFailListener_server -> l
    com.idevicesinc.sweetblue.BleDevice$BondListener m_defaultBondListener -> m
    com.idevicesinc.sweetblue.ReadWriteListener m_defaultReadWriteListener -> n
    com.idevicesinc.sweetblue.NotificationListener m_defaultNotificationListener -> o
    com.idevicesinc.sweetblue.P_DiskOptionsManager m_diskOptionsMngr -> p
    double m_timeForegrounded -> G
    long m_timeTurnedOn -> H
    long m_lastTaskExecution -> I
    long m_currentTick -> J
    boolean m_doingInfiniteScan -> K
    boolean m_isForegrounded -> L
    boolean m_ready -> M
    boolean m_unitTestCheckDone -> N
    long m_lastUpdateLoopWarning -> O
    com.idevicesinc.sweetblue.BleServer$StateListener m_defaultServerStateListener -> q
    com.idevicesinc.sweetblue.BleServer$OutgoingListener m_defaultServerOutgoingListener -> r
    com.idevicesinc.sweetblue.BleServer$IncomingListener m_defaultServerIncomingListener -> s
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener m_serviceAddListener -> t
    com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDatabase m_historicalDatabase -> u
    com.idevicesinc.sweetblue.BleServer m_server -> v
    com.idevicesinc.sweetblue.BleManager s_instance -> w
    com.idevicesinc.sweetblue.BleManager get(android.content.Context) -> a
    com.idevicesinc.sweetblue.BleManager get(android.content.Context,com.idevicesinc.sweetblue.BleManagerConfig) -> a
    void verifySingleton(android.content.Context) -> b
    void <init>(android.content.Context,com.idevicesinc.sweetblue.BleManagerConfig) -> <init>
    void setConfig(com.idevicesinc.sweetblue.BleManagerConfig) -> a
    void initLogger(com.idevicesinc.sweetblue.BleManager) -> c
    void initConfigDependentMembers() -> G
    void initPostManager() -> H
    boolean isAny(com.idevicesinc.sweetblue.BleManagerState[]) -> a
    boolean is(com.idevicesinc.sweetblue.BleManagerState) -> a
    boolean isBleSupported() -> a
    android.bluetooth.BluetoothAdapter getNativeAdapter() -> b
    com.idevicesinc.sweetblue.P_NativeManagerLayer managerLayer() -> c
    void setListener_Discovery(com.idevicesinc.sweetblue.BleManager$DiscoveryListener) -> a
    void stopPeriodicScan(com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter) -> a
    void stopPeriodicScan() -> d
    boolean startScan() -> e
    boolean startScan(com.idevicesinc.sweetblue.BleManager$DiscoveryListener) -> b
    boolean startScan(com.idevicesinc.sweetblue.utils.Interval) -> a
    boolean startScan(com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter,com.idevicesinc.sweetblue.BleManager$DiscoveryListener) -> a
    void showScanWarningIfNeeded() -> I
    boolean startScan_private(com.idevicesinc.sweetblue.ScanOptions) -> a
    void pushWakeLock() -> f
    void popWakeLock() -> g
    boolean ASSERT(boolean) -> a
    boolean ASSERT(boolean,java.lang.String) -> a
    int getStateMask() -> h
    void turnOnLocationWithIntent_forOsServices(android.app.Activity,int) -> a
    boolean willLocationPermissionSystemDialogBeShown(android.app.Activity) -> a
    void turnOnLocationWithIntent_forPermissions(android.app.Activity,int) -> b
    boolean isLocationEnabledForScanning() -> i
    boolean isLocationEnabledForScanning_byManifestPermissions() -> j
    boolean isLocationEnabledForScanning_byRuntimePermissions() -> k
    boolean isLocationEnabledForScanning_byOsServices() -> l
    void turnOnWithIntent(android.app.Activity,int) -> c
    void onResume() -> m
    void onPause() -> n
    android.content.Context getApplicationContext() -> o
    void stopScan() -> p
    void stopScan(com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter) -> b
    void stopScan_private(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> a
    com.idevicesinc.sweetblue.BleDevice getDevice(java.lang.String) -> a
    boolean hasDevice(java.lang.String) -> b
    com.idevicesinc.sweetblue.P_NativeDeviceLayer newNativeDevice(java.lang.String) -> c
    com.idevicesinc.sweetblue.P_BleStateTracker getStateTracker() -> q
    com.idevicesinc.sweetblue.P_NativeBleStateTracker getNativeStateTracker() -> r
    com.idevicesinc.sweetblue.P_BluetoothCrashResolver getCrashResolver() -> s
    com.idevicesinc.sweetblue.P_TaskQueue getTaskQueue() -> t
    com.idevicesinc.sweetblue.P_Logger getLogger() -> u
    long timeTurnedOn() -> v
    double timeForegrounded() -> w
    boolean isBluetoothEnabled() -> x
    com.idevicesinc.sweetblue.P_ScanManager getScanManager() -> y
    com.idevicesinc.sweetblue.P_PostManager getPostManager() -> z
    java.lang.String getDeviceName(com.idevicesinc.sweetblue.P_NativeDeviceLayer,byte[]) -> a
    boolean isDeviceThatReturnsShortName() -> J
    void onDiscoveredFromNativeStack(com.idevicesinc.sweetblue.P_NativeDeviceLayer,int,byte[]) -> a
    com.idevicesinc.sweetblue.BleDevice newDevice_private(com.idevicesinc.sweetblue.P_NativeDeviceLayer,java.lang.String,java.lang.String,com.idevicesinc.sweetblue.BleDeviceOrigin,com.idevicesinc.sweetblue.BleDeviceConfig) -> a
    void onDiscovered_fromRogueAutoConnect(com.idevicesinc.sweetblue.BleDevice,boolean,java.util.List,byte[],int) -> a
    void postEvent(com.idevicesinc.sweetblue.utils.GenericListener_Void,com.idevicesinc.sweetblue.utils.Event) -> a
    void onDiscovered_wrapItUp(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.P_NativeDeviceLayer,boolean,byte[],int,com.idevicesinc.sweetblue.BleDeviceOrigin,com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$ScanEvent) -> a
    void clearScanningRelatedMembers(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> b
    void tryPurgingStaleDevices(double) -> a
    boolean ready() -> A
    void checkIdleStatus() -> B
    void update(double,long) -> a
    boolean isForegrounded() -> C
    long currentTime() -> D
    boolean doAutoScan() -> E
    void setBleScanReady() -> F
    void uhOh(com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh) -> a
    java.lang.String toString() -> toString
    java.lang.String normalizeMacAddress(java.lang.String) -> d
    android.app.Application$ActivityLifecycleCallbacks newLifecycleCallbacks() -> K
    void addLifecycleCallbacks() -> L
    com.idevicesinc.sweetblue.P_Logger access$000(com.idevicesinc.sweetblue.BleManager) -> a
    com.idevicesinc.sweetblue.P_PostManager access$300(com.idevicesinc.sweetblue.BleManager) -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleManager$1 -> com.idevicesinc.sweetblue.h$1:
    com.idevicesinc.sweetblue.BleManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleManager$10 -> com.idevicesinc.sweetblue.h$2:
    com.idevicesinc.sweetblue.BleManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    void onActivityCreated(android.app.Activity,android.os.Bundle) -> onActivityCreated
    void onActivityStarted(android.app.Activity) -> onActivityStarted
    void onActivityStopped(android.app.Activity) -> onActivityStopped
    void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle) -> onActivitySaveInstanceState
    void onActivityDestroyed(android.app.Activity) -> onActivityDestroyed
    void onActivityPaused(android.app.Activity) -> onActivityPaused
    void onActivityResumed(android.app.Activity) -> onActivityResumed
com.idevicesinc.sweetblue.BleManager$2 -> com.idevicesinc.sweetblue.h$3:
    com.idevicesinc.sweetblue.BleManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleManager$3 -> com.idevicesinc.sweetblue.h$4:
    com.idevicesinc.sweetblue.BleManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleManager$9 -> com.idevicesinc.sweetblue.h$5:
    com.idevicesinc.sweetblue.utils.GenericListener_Void val$listener -> a
    com.idevicesinc.sweetblue.utils.Event val$event -> b
    com.idevicesinc.sweetblue.BleManager this$0 -> c
    void <init>(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.utils.GenericListener_Void,com.idevicesinc.sweetblue.utils.Event) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleManager$AssertListener -> com.idevicesinc.sweetblue.h$a:
    void onEvent(com.idevicesinc.sweetblue.BleManager$AssertListener$AssertEvent) -> a
com.idevicesinc.sweetblue.BleManager$AssertListener$AssertEvent -> com.idevicesinc.sweetblue.h$a$a:
    com.idevicesinc.sweetblue.BleManager m_manager -> a
    java.lang.String m_message -> b
    java.lang.StackTraceElement[] m_stackTrace -> c
    java.lang.String message() -> a
    java.lang.StackTraceElement[] stackTrace() -> b
    void <init>(com.idevicesinc.sweetblue.BleManager,java.lang.String,java.lang.StackTraceElement[]) -> <init>
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleManager$DiscoveryListener -> com.idevicesinc.sweetblue.h$b:
    void onEvent(com.idevicesinc.sweetblue.BleManager$DiscoveryListener$DiscoveryEvent) -> a
com.idevicesinc.sweetblue.BleManager$DiscoveryListener$DiscoveryEvent -> com.idevicesinc.sweetblue.h$b$a:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle m_lifeCycle -> b
    com.idevicesinc.sweetblue.BleDevice device() -> a
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle lifeCycle() -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle) -> <init>
    int rssi() -> c
    com.idevicesinc.sweetblue.utils.Percent rssi_percent() -> d
    boolean was(com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle) -> a
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle -> com.idevicesinc.sweetblue.h$b$b:
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle DISCOVERED -> a
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle REDISCOVERED -> b
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle UNDISCOVERED -> c
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle[] $VALUES -> d
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle[] values() -> values
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener$LifeCycle valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleManager$NativeStateListener -> com.idevicesinc.sweetblue.h$c:
    void onEvent(com.idevicesinc.sweetblue.BleManager$NativeStateListener$NativeStateEvent) -> a
com.idevicesinc.sweetblue.BleManager$NativeStateListener$NativeStateEvent -> com.idevicesinc.sweetblue.h$c$a:
    void <init>(com.idevicesinc.sweetblue.BleManager,int,int,int) -> <init>
com.idevicesinc.sweetblue.BleManager$StateListener -> com.idevicesinc.sweetblue.h$d:
com.idevicesinc.sweetblue.BleManager$StateListener$StateEvent -> com.idevicesinc.sweetblue.h$d$a:
    com.idevicesinc.sweetblue.BleManager m_manager -> a
    void <init>(com.idevicesinc.sweetblue.BleManager,int,int,int) -> <init>
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleManager$UhOhListener -> com.idevicesinc.sweetblue.h$e:
com.idevicesinc.sweetblue.BleManager$UhOhListener$Remedy -> com.idevicesinc.sweetblue.h$e$a:
    com.idevicesinc.sweetblue.BleManager$UhOhListener$Remedy WAIT_AND_SEE -> a
    com.idevicesinc.sweetblue.BleManager$UhOhListener$Remedy RESET_BLE -> b
    com.idevicesinc.sweetblue.BleManager$UhOhListener$Remedy RESTART_PHONE -> c
    com.idevicesinc.sweetblue.BleManager$UhOhListener$Remedy[] $VALUES -> d
    com.idevicesinc.sweetblue.BleManager$UhOhListener$Remedy[] values() -> values
    com.idevicesinc.sweetblue.BleManager$UhOhListener$Remedy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh -> com.idevicesinc.sweetblue.h$e$b:
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh BOND_TIMED_OUT -> a
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh READ_TIMED_OUT -> b
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh READ_RETURNED_NULL -> c
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh WRITE_TIMED_OUT -> d
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh INCONSISTENT_NATIVE_BLE_STATE -> e
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh DUPLICATE_SERVICE_FOUND -> f
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh OLD_DUPLICATE_SERVICE_FOUND -> g
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh START_BLE_SCAN_FAILED__USING_CLASSIC -> h
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh CONNECTED_WITHOUT_EVER_CONNECTING -> i
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh DEAD_OBJECT_EXCEPTION -> j
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh RANDOM_EXCEPTION -> k
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh CONCURRENT_EXCEPTION -> l
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh START_BLE_SCAN_FAILED -> m
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh CLASSIC_DISCOVERY_FAILED -> n
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh SERVICE_DISCOVERY_IMMEDIATELY_FAILED -> o
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh CANNOT_DISABLE_BLUETOOTH -> p
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh CANNOT_ENABLE_BLUETOOTH -> q
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh UNKNOWN_BLE_ERROR -> r
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh[] $VALUES -> s
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh[] values() -> values
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.idevicesinc.sweetblue.BleManager$UhOhListener$Remedy getRemedy() -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOhEvent -> com.idevicesinc.sweetblue.h$e$c:
    com.idevicesinc.sweetblue.BleManager m_manager -> a
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh m_uhOh -> b
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh uhOh() -> a
    com.idevicesinc.sweetblue.BleManager$UhOhListener$Remedy remedy() -> b
    void <init>(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh) -> <init>
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleManager$UpdateRunnable -> com.idevicesinc.sweetblue.h$f:
    long m_lastAutoUpdateTime -> b
    long m_autoUpdateRate -> c
    boolean m_shutdown -> d
    com.idevicesinc.sweetblue.BleManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.BleManager,long) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    void setUpdateRate(long) -> a
    void run() -> run
com.idevicesinc.sweetblue.BleManagerConfig -> com.idevicesinc.sweetblue.i:
    com.idevicesinc.sweetblue.BleManagerConfig NULL -> H
    boolean loggingEnabled -> I
    com.idevicesinc.sweetblue.SweetLogger logger -> J
    boolean enableCrashResolver -> K
    boolean enableCrashResolverForReset -> L
    boolean stopScanOnPause -> M
    com.idevicesinc.sweetblue.utils.Interval scanClassicBoostLength -> N
    boolean autoScanDuringOta -> O
    boolean revertToClassicDiscoveryIfNeeded -> P
    boolean runOnMainThread -> Q
    boolean postCallbacksToMainThread -> R
    boolean manageCpuWakeLock -> S
    boolean forcePreLollipopScan -> T
    boolean autoPauseResumeDetection -> U
    com.idevicesinc.sweetblue.utils.Interval uhOhCallbackThrottle -> V
    com.idevicesinc.sweetblue.utils.Interval autoScanDelayAfterResume -> W
    com.idevicesinc.sweetblue.utils.Interval autoScanDelayAfterBleTurnsOn -> X
    com.idevicesinc.sweetblue.utils.Interval autoScanActiveTime -> Y
    com.idevicesinc.sweetblue.utils.Interval autoScanPauseInterval -> Z
    com.idevicesinc.sweetblue.utils.Interval autoScanPauseTimeWhileAppIsBackgrounded -> aa
    com.idevicesinc.sweetblue.utils.Interval idealMinScanTime -> ab
    com.idevicesinc.sweetblue.utils.Interval autoUpdateRate -> ac
    com.idevicesinc.sweetblue.utils.Interval defaultStatePollRate -> ad
    com.idevicesinc.sweetblue.utils.Interval idleUpdateRate -> ae
    com.idevicesinc.sweetblue.utils.Interval minTimeToIdle -> af
    java.lang.Boolean unitTest -> ag
    com.idevicesinc.sweetblue.utils.Interval scanReportDelay -> ah
    com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter defaultScanFilter -> ai
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener defaultDiscoveryListener -> aj
    boolean allowManagerStatePolling -> ak
    com.idevicesinc.sweetblue.BleScanMode scanMode -> al
    com.idevicesinc.sweetblue.BleScanApi scanApi -> am
    com.idevicesinc.sweetblue.BleScanPower scanPower -> an
    com.idevicesinc.sweetblue.PI_UpdateLoop$Callback updateLoopCallback -> ao
    com.idevicesinc.sweetblue.P_NativeDeviceLayerFactory nativeDeviceFactory -> ap
    com.idevicesinc.sweetblue.P_GattLayerFactory gattLayerFactory -> aq
    com.idevicesinc.sweetblue.P_NativeManagerLayer nativeManagerLayer -> ar
    java.lang.String[] debugThreadNames -> as
    java.util.List uuidNameMaps -> at
    java.util.Comparator defaultListComparator -> au
    int connectionFailUhOhCount -> av
    com.idevicesinc.sweetblue.P_GattLayer newGattLayer(com.idevicesinc.sweetblue.BleDevice) -> a
    com.idevicesinc.sweetblue.P_NativeDeviceLayer newDeviceLayer(com.idevicesinc.sweetblue.BleDevice) -> b
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    com.idevicesinc.sweetblue.BleManagerConfig clone() -> c
    com.idevicesinc.sweetblue.BleDeviceConfig clone() -> a
    com.idevicesinc.sweetblue.BleNodeConfig clone() -> b
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleManagerConfig$BleManagerConfigNull -> com.idevicesinc.sweetblue.i$a:
    void <init>() -> <init>
    com.idevicesinc.sweetblue.BleDeviceConfig clone() -> a
    com.idevicesinc.sweetblue.BleNodeConfig clone() -> b
    java.lang.Object clone() -> clone
com.idevicesinc.sweetblue.BleManagerConfig$DeviceNameComparator -> com.idevicesinc.sweetblue.i$b:
    void <init>() -> <init>
    int compare(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.idevicesinc.sweetblue.BleManagerConfig$P_AndroidDeviceLayerFactory -> com.idevicesinc.sweetblue.i$c:
    void <init>() -> <init>
    com.idevicesinc.sweetblue.P_AndroidBleDevice newInstance(com.idevicesinc.sweetblue.BleDevice) -> a
    com.idevicesinc.sweetblue.P_NativeDeviceLayer newInstance(com.idevicesinc.sweetblue.BleDevice) -> b
com.idevicesinc.sweetblue.BleManagerConfig$P_AndroidGattLayerFactory -> com.idevicesinc.sweetblue.i$d:
    void <init>() -> <init>
    com.idevicesinc.sweetblue.P_AndroidGatt newInstance(com.idevicesinc.sweetblue.BleDevice) -> a
    com.idevicesinc.sweetblue.P_GattLayer newInstance(com.idevicesinc.sweetblue.BleDevice) -> b
com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter -> com.idevicesinc.sweetblue.i$e:
    com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$Please onEvent(com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$ScanEvent) -> a
com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$Please -> com.idevicesinc.sweetblue.i$e$a:
    int STOP_SCAN -> a
    int STOP_PERIODIC_SCAN -> b
    boolean m_ack -> d
    com.idevicesinc.sweetblue.BleDeviceConfig m_config -> e
    int m_stopScanOptions -> c
    void <init>(boolean,com.idevicesinc.sweetblue.BleDeviceConfig) -> <init>
    boolean ack() -> a
    com.idevicesinc.sweetblue.BleDeviceConfig getConfig() -> b
    com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$Please acknowledge() -> c
    com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$Please ignore() -> d
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$ScanEvent -> com.idevicesinc.sweetblue.i$e$b:
    android.bluetooth.BluetoothDevice m_nativeInstance -> a
    java.util.List m_advertisedServices -> b
    java.lang.String m_rawDeviceName -> c
    java.lang.String m_normalizedDeviceName -> d
    byte[] m_scanRecord -> e
    int m_rssi -> f
    int m_txPower -> g
    com.idevicesinc.sweetblue.utils.State$ChangeIntent m_lastDisconnectIntent -> h
    int m_advertisingFlags -> i
    android.util.SparseArray m_manufacturerCombinedData -> j
    byte[] m_manufacturerData -> k
    int m_manufacturerId -> l
    java.util.Map m_serviceData -> m
    java.util.List advertisedServices() -> a
    java.lang.String name_normalized() -> b
    byte[] scanRecord() -> c
    int txPower() -> d
    java.lang.String macAddress() -> e
    int advertisingFlags() -> f
    byte[] manufacturerData() -> g
    int manufacturerId() -> h
    java.util.Map serviceData() -> i
    void <init>(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String,byte[],int,com.idevicesinc.sweetblue.utils.State$ChangeIntent,com.idevicesinc.sweetblue.utils.BleScanInfo) -> <init>
    com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$ScanEvent fromScanRecord(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String,int,com.idevicesinc.sweetblue.utils.State$ChangeIntent,byte[]) -> a
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleManagerState -> com.idevicesinc.sweetblue.j:
    com.idevicesinc.sweetblue.BleManagerState OFF -> a
    com.idevicesinc.sweetblue.BleManagerState TURNING_ON -> b
    com.idevicesinc.sweetblue.BleManagerState ON -> c
    com.idevicesinc.sweetblue.BleManagerState TURNING_OFF -> d
    com.idevicesinc.sweetblue.BleManagerState IDLE -> e
    com.idevicesinc.sweetblue.BleManagerState STARTING_SCAN -> f
    com.idevicesinc.sweetblue.BleManagerState BOOST_SCANNING -> g
    com.idevicesinc.sweetblue.BleManagerState SCANNING -> h
    com.idevicesinc.sweetblue.BleManagerState SCANNING_PAUSED -> i
    com.idevicesinc.sweetblue.BleManagerState BLE_SCAN_READY -> j
    com.idevicesinc.sweetblue.BleManagerState RESETTING -> k
    int m_nativeCode -> m
    com.idevicesinc.sweetblue.BleManagerState[] s_values -> n
    int FULL_MASK -> l
    com.idevicesinc.sweetblue.BleManagerState[] $VALUES -> o
    com.idevicesinc.sweetblue.BleManagerState[] values() -> values
    com.idevicesinc.sweetblue.BleManagerState valueOf(java.lang.String) -> valueOf
    com.idevicesinc.sweetblue.BleManagerState[] VALUES() -> b
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,int) -> <init>
    int getNativeCode() -> c
    com.idevicesinc.sweetblue.BleManagerState get(int) -> b
    int bit() -> a
    boolean overlaps(int) -> a
    boolean didEnter(int,int) -> a
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNode -> com.idevicesinc.sweetblue.k:
    java.util.UUID[] EMPTY_UUID_ARRAY -> h
    java.util.ArrayList EMPTY_LIST -> i
    byte[] EMPTY_BYTE_ARRAY -> j
    com.idevicesinc.sweetblue.utils.FutureData EMPTY_FUTURE_DATA -> k
    com.idevicesinc.sweetblue.BleManager m_manager -> a
    com.idevicesinc.sweetblue.PA_ServiceManager m_serviceMngr -> b
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    com.idevicesinc.sweetblue.PA_ServiceManager newServiceManager() -> a
    com.idevicesinc.sweetblue.PA_ServiceManager getServiceManager() -> Q
    android.bluetooth.BluetoothGattDescriptor getNativeDescriptor(java.util.UUID,java.util.UUID,java.util.UUID) -> a
    android.bluetooth.BluetoothGattCharacteristic getNativeCharacteristic(java.util.UUID,java.util.UUID) -> a
    java.util.List getNativeCharacteristics_List(java.util.UUID) -> a
    com.idevicesinc.sweetblue.utils.HistoricalData newHistoricalData(byte[],com.idevicesinc.sweetblue.utils.EpochTime) -> a
    com.idevicesinc.sweetblue.BleManager getManager() -> R
    com.idevicesinc.sweetblue.BleManagerConfig conf_mngr() -> S
    com.idevicesinc.sweetblue.BleNodeConfig conf_node() -> g
    com.idevicesinc.sweetblue.P_TaskQueue queue() -> T
    com.idevicesinc.sweetblue.P_Logger logger() -> U
    com.idevicesinc.sweetblue.BleNode cast() -> V
    com.idevicesinc.sweetblue.BleNode cast(java.lang.Class) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNode$ConnectionFailListener -> com.idevicesinc.sweetblue.k$a:
com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage -> com.idevicesinc.sweetblue.k$a$a:
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage UNKNOWN -> a
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage NOT_APPLICABLE -> b
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage USED -> c
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage NOT_USED -> d
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage[] $VALUES -> e
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage[] values() -> values
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$ConnectionFailEvent -> com.idevicesinc.sweetblue.k$a$b:
    int m_failureCountSoFar -> a
    com.idevicesinc.sweetblue.utils.Interval m_latestAttemptTime -> b
    com.idevicesinc.sweetblue.utils.Interval m_totalAttemptTime -> c
    int m_gattStatus -> d
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage m_autoConnectUsage -> e
    int failureCountSoFar() -> f
    int gattStatus() -> g
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage autoConnectUsage() -> h
    void <init>(int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.utils.Interval,int,com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage) -> <init>
com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$Please -> com.idevicesinc.sweetblue.k$a$c:
    int m_please__PE_Please -> a
    boolean isRetry(int) -> a
    void <init>(int) -> <init>
    int please() -> a
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$Please retry() -> b
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$Please doNotRetry() -> c
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$Please retryWithAutoConnectTrue() -> d
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$Please retryWithAutoConnectFalse() -> e
com.idevicesinc.sweetblue.BleNode$HistoricalDataLoadListener -> com.idevicesinc.sweetblue.k$b:
com.idevicesinc.sweetblue.BleNodeConfig -> com.idevicesinc.sweetblue.l:
    java.lang.Boolean alwaysUseAutoConnect -> aw
    java.lang.Boolean allowCallsFromAllThreads -> ax
    java.lang.Boolean disconnectIsCancellable -> ay
    boolean autoStripeWrites -> az
    com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter taskTimeoutRequestFilter -> aA
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter historicalDataLogFilter -> aB
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataFactory historicalDataFactory -> aC
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter reconnectFilter -> aD
    void <init>() -> <init>
    double getTimeout(com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$TaskTimeoutRequestEvent) -> a
    boolean boolOrDefault(java.lang.Boolean) -> a
    com.idevicesinc.sweetblue.utils.Interval intervalOrDefault(com.idevicesinc.sweetblue.utils.Interval) -> a
    boolean bool(java.lang.Boolean,java.lang.Boolean) -> a
    com.idevicesinc.sweetblue.utils.Interval interval(com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.utils.Interval) -> a
    java.lang.Integer integer(java.lang.Integer,java.lang.Integer) -> a
    java.lang.Integer integer(java.lang.Integer,java.lang.Integer,int) -> a
    int integerOrDefault(java.lang.Integer,int) -> a
    java.lang.Object filter(java.lang.Object,java.lang.Object) -> a
    com.idevicesinc.sweetblue.BleNodeConfig clone() -> b
    java.lang.Object clone() -> clone
com.idevicesinc.sweetblue.BleNodeConfig$1 -> com.idevicesinc.sweetblue.l$1:
    com.idevicesinc.sweetblue.BleNodeConfig this$0 -> a
    void <init>(com.idevicesinc.sweetblue.BleNodeConfig) -> <init>
    com.idevicesinc.sweetblue.utils.HistoricalData newHistoricalData(byte[],com.idevicesinc.sweetblue.utils.EpochTime) -> a
com.idevicesinc.sweetblue.BleNodeConfig$DefaultHistoricalDataLogFilter -> com.idevicesinc.sweetblue.l$a:
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please DEFAULT -> b
    void <init>() -> <init>
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please onEvent(com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$HistoricalDataLogEvent) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNodeConfig$DefaultNullReconnectFilter -> com.idevicesinc.sweetblue.l$b:
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please DEFAULT_INITIAL_RECONNECT_DELAY -> a
    com.idevicesinc.sweetblue.utils.Interval SHORT_TERM_ATTEMPT_RATE -> b
    com.idevicesinc.sweetblue.utils.Interval SHORT_TERM_TIMEOUT -> c
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please m_please__SHORT_TERM__SHOULD_TRY_AGAIN -> d
    com.idevicesinc.sweetblue.utils.Interval m_timeout__SHORT_TERM__SHOULD_CONTINUE -> e
    void <init>() -> <init>
    void <init>(com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.utils.Interval) -> <init>
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please onEvent(com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$ReconnectEvent) -> a
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please shouldContinue(com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$ReconnectEvent) -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNodeConfig$DefaultReconnectFilter -> com.idevicesinc.sweetblue.l$c:
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please DEFAULT_INITIAL_RECONNECT_DELAY -> a
    com.idevicesinc.sweetblue.utils.Interval LONG_TERM_ATTEMPT_RATE -> b
    com.idevicesinc.sweetblue.utils.Interval SHORT_TERM_ATTEMPT_RATE -> c
    com.idevicesinc.sweetblue.utils.Interval SHORT_TERM_TIMEOUT -> d
    com.idevicesinc.sweetblue.utils.Interval LONG_TERM_TIMEOUT -> e
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please m_please__SHORT_TERM__SHOULD_TRY_AGAIN -> f
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please m_please__LONG_TERM__SHOULD_TRY_AGAIN -> g
    com.idevicesinc.sweetblue.utils.Interval m_timeout__SHORT_TERM__SHOULD_CONTINUE -> h
    com.idevicesinc.sweetblue.utils.Interval m_timeout__LONG_TERM__SHOULD_CONTINUE -> i
    void <init>() -> <init>
    void <init>(com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.utils.Interval) -> <init>
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please onEvent(com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$ReconnectEvent) -> a
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please shouldContinue(com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$ReconnectEvent) -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNodeConfig$DefaultTaskTimeoutRequestFilter -> com.idevicesinc.sweetblue.l$d:
    com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$Please DEFAULT_RETURN_VALUE -> a
    void <init>() -> <init>
    com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$Please onEvent(com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$TaskTimeoutRequestEvent) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataFactory -> com.idevicesinc.sweetblue.l$e:
    com.idevicesinc.sweetblue.utils.HistoricalData newHistoricalData(byte[],com.idevicesinc.sweetblue.utils.EpochTime) -> a
com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter -> com.idevicesinc.sweetblue.l$f:
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter DISABLED -> a
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please onEvent(com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$HistoricalDataLogEvent) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$HistoricalDataLogEvent -> com.idevicesinc.sweetblue.l$f$a:
    com.idevicesinc.sweetblue.BleNode m_node -> a
    java.lang.String m_macAddress -> b
    byte[] m_data -> c
    com.idevicesinc.sweetblue.utils.EpochTime m_epochTime -> d
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source m_source -> e
    java.util.UUID m_charUuid -> f
    java.lang.String macAddress() -> a
    byte[] data() -> b
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source source() -> c
    java.util.UUID charUuid() -> d
    void <init>(com.idevicesinc.sweetblue.BleNode,java.lang.String,java.util.UUID,byte[],com.idevicesinc.sweetblue.utils.EpochTime,com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source) -> <init>
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please -> com.idevicesinc.sweetblue.l$f$b:
    int m_persistenceLevel -> a
    byte[] m_amendedData -> b
    com.idevicesinc.sweetblue.utils.EpochTime m_amendedEpochTime -> c
    java.lang.Long m_logLimit -> d
    void <init>(int) -> <init>
    long getLimit() -> a
    byte[] getAmendedData() -> b
    com.idevicesinc.sweetblue.utils.EpochTime getAmendedEpochTime() -> c
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please andLimitLogTo(long) -> a
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please logToMemory() -> d
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please doNotLog() -> e
com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source -> com.idevicesinc.sweetblue.l$f$c:
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source NULL -> a
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source READ -> b
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source POLL -> c
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source NOTIFICATION -> d
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source INDICATION -> e
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source PSUEDO_NOTIFICATION -> f
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source SINGLE_MANUAL_ADDITION -> g
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source MULTIPLE_MANUAL_ADDITIONS -> h
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source[] $VALUES -> i
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source[] values() -> values
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter -> com.idevicesinc.sweetblue.l$g:
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please onEvent(com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$ReconnectEvent) -> a
com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please -> com.idevicesinc.sweetblue.l$g$a:
    com.idevicesinc.sweetblue.utils.Interval SHOULD_TRY_AGAIN__INSTANTLY -> a
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please SHOULD_CONTINUE__PERSIST -> b
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please SHOULD_CONTINUE__STOP -> c
    com.idevicesinc.sweetblue.utils.Interval m_interval__SHOULD_TRY_AGAIN -> d
    boolean m_persist -> e
    void <init>(com.idevicesinc.sweetblue.utils.Interval) -> <init>
    void <init>(boolean) -> <init>
    com.idevicesinc.sweetblue.utils.Interval interval() -> a
    boolean shouldPersist() -> b
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please retryInstantly() -> c
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please stopRetrying() -> d
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please retryIn(com.idevicesinc.sweetblue.utils.Interval) -> a
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please persist() -> e
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Please persistIf(boolean) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$ReconnectEvent -> com.idevicesinc.sweetblue.l$g$b:
    com.idevicesinc.sweetblue.BleNode m_node -> a
    java.lang.String m_macAddress -> b
    int m_failureCount -> c
    com.idevicesinc.sweetblue.utils.Interval m_totalTimeReconnecting -> d
    com.idevicesinc.sweetblue.utils.Interval m_previousDelay -> e
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$ConnectionFailEvent m_connectionFailEvent -> f
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type m_type -> g
    com.idevicesinc.sweetblue.BleNode node() -> a
    com.idevicesinc.sweetblue.BleDevice device() -> b
    int failureCount() -> c
    com.idevicesinc.sweetblue.utils.Interval totalTimeReconnecting() -> d
    com.idevicesinc.sweetblue.utils.Interval previousDelay() -> e
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type type() -> f
    void <init>() -> <init>
    void init(com.idevicesinc.sweetblue.BleNode,java.lang.String,int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$ConnectionFailEvent,com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type) -> a
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type -> com.idevicesinc.sweetblue.l$g$c:
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type SHORT_TERM__SHOULD_CONTINUE -> a
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type SHORT_TERM__SHOULD_TRY_AGAIN -> b
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type LONG_TERM__SHOULD_CONTINUE -> c
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type LONG_TERM__SHOULD_TRY_AGAIN -> d
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type[] $VALUES -> e
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type[] values() -> values
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isShouldTryAgain() -> a
    boolean isShouldContinue() -> b
    boolean isShortTerm() -> c
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter -> com.idevicesinc.sweetblue.l$h:
    com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$Please onEvent(com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$TaskTimeoutRequestEvent) -> a
com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$Please -> com.idevicesinc.sweetblue.l$h$a:
    com.idevicesinc.sweetblue.utils.Interval m_interval -> a
    void <init>(com.idevicesinc.sweetblue.utils.Interval) -> <init>
    com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$Please setTimeoutFor(com.idevicesinc.sweetblue.utils.Interval) -> a
    com.idevicesinc.sweetblue.utils.Interval access$000(com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$Please) -> a
com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$TaskTimeoutRequestEvent -> com.idevicesinc.sweetblue.l$h$b:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    com.idevicesinc.sweetblue.BleServer m_server -> b
    com.idevicesinc.sweetblue.BleManager m_manager -> c
    com.idevicesinc.sweetblue.BleTask m_task -> d
    java.util.UUID m_charUuid -> e
    java.util.UUID m_descUuid -> f
    void <init>() -> <init>
    com.idevicesinc.sweetblue.BleDevice device() -> a
    com.idevicesinc.sweetblue.BleServer server() -> b
    com.idevicesinc.sweetblue.BleManager manager() -> c
    com.idevicesinc.sweetblue.BleTask task() -> d
    java.util.UUID charUuid() -> e
    void init(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleServer,com.idevicesinc.sweetblue.BleTask,java.util.UUID,java.util.UUID) -> a
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleScanApi -> com.idevicesinc.sweetblue.m:
    com.idevicesinc.sweetblue.BleScanApi AUTO -> a
    com.idevicesinc.sweetblue.BleScanApi CLASSIC -> b
    com.idevicesinc.sweetblue.BleScanApi PRE_LOLLIPOP -> c
    com.idevicesinc.sweetblue.BleScanApi POST_LOLLIPOP -> d
    com.idevicesinc.sweetblue.BleScanApi[] $VALUES -> e
    com.idevicesinc.sweetblue.BleScanApi[] values() -> values
    com.idevicesinc.sweetblue.BleScanApi valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.idevicesinc.sweetblue.BleScanApi fromBleScanMode(com.idevicesinc.sweetblue.BleScanMode) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleScanApi$1 -> com.idevicesinc.sweetblue.m$1:
    int[] $SwitchMap$com$idevicesinc$sweetblue$BleScanMode -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleScanMode -> com.idevicesinc.sweetblue.n:
    com.idevicesinc.sweetblue.BleScanMode AUTO -> a
    com.idevicesinc.sweetblue.BleScanMode CLASSIC -> b
    com.idevicesinc.sweetblue.BleScanMode PRE_LOLLIPOP -> c
    com.idevicesinc.sweetblue.BleScanMode POST_LOLLIPOP -> d
    com.idevicesinc.sweetblue.BleScanMode LOW_POWER -> e
    com.idevicesinc.sweetblue.BleScanMode MEDIUM_POWER -> f
    com.idevicesinc.sweetblue.BleScanMode HIGH_POWER -> g
    int m_nativeMode -> h
    com.idevicesinc.sweetblue.BleScanMode[] $VALUES -> i
    com.idevicesinc.sweetblue.BleScanMode[] values() -> values
    com.idevicesinc.sweetblue.BleScanMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    boolean isLollipopScanMode() -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleScanPower -> com.idevicesinc.sweetblue.o:
    com.idevicesinc.sweetblue.BleScanPower AUTO -> a
    com.idevicesinc.sweetblue.BleScanPower VERY_LOW_POWER -> b
    com.idevicesinc.sweetblue.BleScanPower LOW_POWER -> c
    com.idevicesinc.sweetblue.BleScanPower MEDIUM_POWER -> d
    com.idevicesinc.sweetblue.BleScanPower HIGH_POWER -> e
    int nativeMode -> f
    com.idevicesinc.sweetblue.BleScanPower[] $VALUES -> g
    com.idevicesinc.sweetblue.BleScanPower[] values() -> values
    com.idevicesinc.sweetblue.BleScanPower valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getNativeMode() -> a
    com.idevicesinc.sweetblue.BleScanPower fromBleScanMode(com.idevicesinc.sweetblue.BleScanMode) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleScanPower$1 -> com.idevicesinc.sweetblue.o$1:
    int[] $SwitchMap$com$idevicesinc$sweetblue$BleScanMode -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer -> com.idevicesinc.sweetblue.p:
    com.idevicesinc.sweetblue.BleServer NULL -> a
    com.idevicesinc.sweetblue.BleServer$OutgoingListener NULL_OUTGOING_LISTENER -> d
    com.idevicesinc.sweetblue.P_ServerStateTracker m_stateTracker -> e
    com.idevicesinc.sweetblue.P_BleServer_Listeners m_listeners -> b
    com.idevicesinc.sweetblue.P_NativeServerWrapper m_nativeWrapper -> c
    com.idevicesinc.sweetblue.BleServer$IncomingListener m_incomingListener -> f
    com.idevicesinc.sweetblue.BleServer$OutgoingListener m_outgoingListener_default -> g
    boolean m_isNull -> l
    com.idevicesinc.sweetblue.BleNodeConfig m_config -> m
    com.idevicesinc.sweetblue.P_ServerConnectionFailManager m_connectionFailMngr -> n
    com.idevicesinc.sweetblue.P_ClientManager m_clientMngr -> o
    void <init>(com.idevicesinc.sweetblue.BleManager,boolean) -> <init>
    com.idevicesinc.sweetblue.PA_ServiceManager newServiceManager() -> a
    com.idevicesinc.sweetblue.BleNodeConfig conf_node() -> g
    void setListener_State(com.idevicesinc.sweetblue.BleServer$StateListener) -> a
    com.idevicesinc.sweetblue.BleServer$IncomingListener getListener_Incoming() -> b
    void setListener_ConnectionFail(com.idevicesinc.sweetblue.BleServer$ConnectionFailListener) -> a
    void stopAdvertising() -> c
    android.bluetooth.BluetoothGattServer getNative() -> d
    int getStateMask(java.lang.String) -> a
    boolean isAny(java.lang.String,int) -> a
    boolean is(java.lang.String,com.idevicesinc.sweetblue.BleServerState) -> a
    boolean isAny(java.lang.String,com.idevicesinc.sweetblue.BleServerState[]) -> a
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent connect_internal(android.bluetooth.BluetoothDevice) -> a
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent connect_internal(android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.BleServer$StateListener,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener) -> a
    com.idevicesinc.sweetblue.P_NativeDeviceLayer newNativeDevice(java.lang.String) -> d
    boolean disconnect(java.lang.String) -> b
    boolean disconnect_private(java.lang.String,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status,com.idevicesinc.sweetblue.utils.State$ChangeIntent) -> a
    void disconnect_internal(com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status,com.idevicesinc.sweetblue.utils.State$ChangeIntent) -> a
    boolean isNull() -> N
    void onNativeConnecting_implicit(java.lang.String) -> c
    void onNativeConnect(java.lang.String,boolean) -> a
    void onNativeConnectFail(android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status,int) -> a
    void onNativeDisconnect(java.lang.String,boolean,int) -> a
    boolean equals(com.idevicesinc.sweetblue.BleServer) -> a
    boolean equals(java.lang.Object) -> equals
    void invokeOutgoingListeners(com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent,com.idevicesinc.sweetblue.BleServer$OutgoingListener) -> a
    void getClients(com.idevicesinc.sweetblue.utils.ForEach_Void,com.idevicesinc.sweetblue.BleServerState[]) -> a
    com.idevicesinc.sweetblue.P_ServerServiceManager serviceMngr_server() -> e
    java.lang.String toString() -> toString
    boolean access$100(com.idevicesinc.sweetblue.BleServer,java.lang.String,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status,com.idevicesinc.sweetblue.utils.State$ChangeIntent) -> a
    com.idevicesinc.sweetblue.BleServer$OutgoingListener access$200(com.idevicesinc.sweetblue.BleServer) -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer$1 -> com.idevicesinc.sweetblue.p$1:
    void <init>() -> <init>
    void onEvent(com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent) -> a
com.idevicesinc.sweetblue.BleServer$2 -> com.idevicesinc.sweetblue.p$2:
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status val$status_connectionFail -> a
    com.idevicesinc.sweetblue.utils.State$ChangeIntent val$intent -> b
    com.idevicesinc.sweetblue.BleServer this$0 -> c
    void <init>(com.idevicesinc.sweetblue.BleServer,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status,com.idevicesinc.sweetblue.utils.State$ChangeIntent) -> <init>
    void next(java.lang.String) -> a
    void next(java.lang.Object) -> a
com.idevicesinc.sweetblue.BleServer$3 -> com.idevicesinc.sweetblue.p$3:
    com.idevicesinc.sweetblue.BleServer$OutgoingListener val$listener_specific_nullable -> a
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent val$e -> b
    com.idevicesinc.sweetblue.BleServer this$0 -> c
    void <init>(com.idevicesinc.sweetblue.BleServer,com.idevicesinc.sweetblue.BleServer$OutgoingListener,com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleServer$4 -> com.idevicesinc.sweetblue.p$4:
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent val$e -> a
    com.idevicesinc.sweetblue.BleServer this$0 -> b
    void <init>(com.idevicesinc.sweetblue.BleServer,com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleServer$5 -> com.idevicesinc.sweetblue.p$5:
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent val$e -> a
    com.idevicesinc.sweetblue.BleServer this$0 -> b
    void <init>(com.idevicesinc.sweetblue.BleServer,com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleServer$ConnectionFailListener -> com.idevicesinc.sweetblue.p$a:
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$Please onEvent(com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent) -> a
com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent -> com.idevicesinc.sweetblue.p$a$a:
    com.idevicesinc.sweetblue.BleServer m_server -> a
    android.bluetooth.BluetoothDevice m_nativeDevice -> b
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status m_status -> c
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent[] m_history -> d
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent[] s_emptyHistory -> e
    com.idevicesinc.sweetblue.BleServer server() -> a
    java.lang.String macAddress() -> b
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status status() -> c
    void <init>(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status,int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.utils.Interval,int,com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage,java.util.ArrayList) -> <init>
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent[] EMPTY_HISTORY() -> d
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent NULL(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothDevice) -> a
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent EARLY_OUT(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status) -> a
    boolean isNull() -> N
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status -> com.idevicesinc.sweetblue.p$a$b:
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status NULL -> a
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status ALREADY_CONNECTING_OR_CONNECTED -> b
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status NULL_SERVER -> c
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status SERVER_OPENING_FAILED -> d
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status NATIVE_CONNECTION_FAILED_IMMEDIATELY -> e
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status NATIVE_CONNECTION_FAILED_EVENTUALLY -> f
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status TIMED_OUT -> g
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status CANCELLED_FROM_DISCONNECT -> h
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status CANCELLED_FROM_BLE_TURNING_OFF -> i
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status[] $VALUES -> j
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status[] values() -> values
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean wasCancelled() -> a
    boolean allowsRetry() -> b
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer$DefaultConnectionFailListener -> com.idevicesinc.sweetblue.p$b:
    com.idevicesinc.sweetblue.utils.Interval MAX_RETRY_TIME_FOR_BOND_FAILURE -> a
    int m_retryCount -> b
    int m_failCountBeforeUsingAutoConnect -> c
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$Please onEvent(com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer$ExchangeListener -> com.idevicesinc.sweetblue.p$c:
com.idevicesinc.sweetblue.BleServer$ExchangeListener$ExchangeEvent -> com.idevicesinc.sweetblue.p$c$a:
    java.util.UUID NON_APPLICABLE_UUID -> a
    com.idevicesinc.sweetblue.BleServer m_server -> b
    android.bluetooth.BluetoothDevice m_nativeDevice -> c
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type m_type -> d
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target m_target -> e
    java.util.UUID m_serviceUuid -> f
    java.util.UUID m_charUuid -> g
    java.util.UUID m_descUuid -> h
    byte[] m_data_received -> i
    int m_requestId -> j
    int m_offset -> k
    boolean m_responseNeeded -> l
    com.idevicesinc.sweetblue.BleServer server() -> a
    java.lang.String macAddress() -> b
    android.bluetooth.BluetoothDevice nativeDevice() -> c
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type type() -> d
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target target() -> e
    java.util.UUID serviceUuid() -> f
    java.util.UUID charUuid() -> g
    java.util.UUID descUuid() -> h
    byte[] data_received() -> i
    int requestId() -> j
    int offset() -> k
    boolean responseNeeded() -> l
    void <init>(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothDevice,java.util.UUID,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type,com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target,byte[],int,int,boolean) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target -> com.idevicesinc.sweetblue.p$c$b:
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target CHARACTERISTIC -> a
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target DESCRIPTOR -> b
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target[] $VALUES -> c
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target[] values() -> values
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type -> com.idevicesinc.sweetblue.p$c$c:
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type READ -> a
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type WRITE -> b
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type PREPARED_WRITE -> c
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type NOTIFICATION -> d
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type INDICATION -> e
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type[] $VALUES -> f
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type[] values() -> values
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isRead() -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer$IncomingListener -> com.idevicesinc.sweetblue.p$d:
    com.idevicesinc.sweetblue.BleServer$IncomingListener$Please onEvent(com.idevicesinc.sweetblue.BleServer$IncomingListener$IncomingEvent) -> a
com.idevicesinc.sweetblue.BleServer$IncomingListener$IncomingEvent -> com.idevicesinc.sweetblue.p$d$a:
    void <init>(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothDevice,java.util.UUID,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type,com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target,byte[],int,int,boolean) -> <init>
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleServer$IncomingListener$Please -> com.idevicesinc.sweetblue.p$d$b:
    int m_gattStatus -> a
    com.idevicesinc.sweetblue.utils.FutureData m_futureData -> b
    com.idevicesinc.sweetblue.BleServer$OutgoingListener m_outgoingListener -> c
    boolean m_respond -> d
com.idevicesinc.sweetblue.BleServer$OutgoingListener -> com.idevicesinc.sweetblue.p$e:
    void onEvent(com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent) -> a
com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent -> com.idevicesinc.sweetblue.p$e$a:
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status m_status -> b
    byte[] m_data_sent -> c
    int m_gattStatus_sent -> d
    int m_gattStatus_received -> e
    boolean m_solicited -> f
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status status() -> m
    void <init>(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothDevice,java.util.UUID,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type,com.idevicesinc.sweetblue.BleServer$ExchangeListener$Target,byte[],byte[],int,int,boolean,com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status,int,int,boolean) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleServer$IncomingListener$IncomingEvent,byte[],com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status,int,int) -> <init>
    boolean isNull() -> N
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status -> com.idevicesinc.sweetblue.p$e$b:
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status NULL -> a
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status SUCCESS -> b
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status NULL_SERVER -> c
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status NO_RESPONSE_ATTEMPTED -> d
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status NO_REQUEST_LISTENER_SET -> e
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status NO_MATCHING_TARGET -> f
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status FAILED_TO_SET_VALUE_ON_TARGET -> g
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status FAILED_TO_SEND_OUT -> h
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status REMOTE_GATT_FAILURE -> i
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status CANCELLED_FROM_DISCONNECT -> j
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status CANCELLED_FROM_BLE_TURNING_OFF -> k
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status TIMED_OUT -> l
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status NOT_CONNECTED -> m
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status[] $VALUES -> n
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status[] values() -> values
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer$ServiceAddListener -> com.idevicesinc.sweetblue.p$f:
    void onEvent(com.idevicesinc.sweetblue.BleServer$ServiceAddListener$ServiceAddEvent) -> a
com.idevicesinc.sweetblue.BleServer$ServiceAddListener$ServiceAddEvent -> com.idevicesinc.sweetblue.p$f$a:
    com.idevicesinc.sweetblue.BleServer m_server -> a
    android.bluetooth.BluetoothGattService m_service -> b
    int m_gattStatus -> c
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status m_status -> d
    boolean m_solicited -> e
    com.idevicesinc.sweetblue.BleServer server() -> a
    android.bluetooth.BluetoothGattService service() -> b
    int gattStatus() -> c
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status status() -> d
    void <init>(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothGattService,com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status,int,boolean) -> <init>
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status -> com.idevicesinc.sweetblue.p$f$b:
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status NULL -> a
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status SUCCESS -> b
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status NULL_SERVER -> c
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status DUPLICATE_SERVICE -> d
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status SERVER_OPENING_FAILED -> e
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status FAILED_IMMEDIATELY -> f
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status FAILED_EVENTUALLY -> g
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status TIMED_OUT -> h
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status CANCELLED_FROM_REMOVAL -> i
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status CANCELLED_FROM_DISCONNECT -> j
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status CANCELLED_FROM_BLE_TURNING_OFF -> k
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status BLE_NOT_ON -> l
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status[] $VALUES -> m
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status[] values() -> values
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleServer$StateListener -> com.idevicesinc.sweetblue.p$g:
    void onEvent(com.idevicesinc.sweetblue.BleServer$StateListener$StateEvent) -> a
com.idevicesinc.sweetblue.BleServer$StateListener$StateEvent -> com.idevicesinc.sweetblue.p$g$a:
    com.idevicesinc.sweetblue.BleServer m_server -> a
    java.lang.String m_macAddress -> b
    int m_gattStatus -> c
    com.idevicesinc.sweetblue.BleServer server() -> a
    int gattStatus() -> b
    void <init>(com.idevicesinc.sweetblue.BleServer,java.lang.String,int,int,int,int) -> <init>
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.BleServerState -> com.idevicesinc.sweetblue.q:
    com.idevicesinc.sweetblue.BleServerState NULL -> a
    com.idevicesinc.sweetblue.BleServerState DISCONNECTED -> b
    com.idevicesinc.sweetblue.BleServerState CONNECTING -> c
    com.idevicesinc.sweetblue.BleServerState CONNECTED -> d
    com.idevicesinc.sweetblue.BleServerState[] s_values -> f
    int FULL_MASK -> e
    com.idevicesinc.sweetblue.BleServerState[] $VALUES -> g
    com.idevicesinc.sweetblue.BleServerState[] values() -> values
    com.idevicesinc.sweetblue.BleServerState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int toBits(com.idevicesinc.sweetblue.BleServerState[]) -> a
    boolean overlaps(int) -> a
    int bit() -> a
    boolean didEnter(int,int) -> a
    com.idevicesinc.sweetblue.BleServerState[] VALUES() -> b
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleStatuses -> com.idevicesinc.sweetblue.r:
    void <init>() -> <init>
com.idevicesinc.sweetblue.BleTask -> com.idevicesinc.sweetblue.s:
    com.idevicesinc.sweetblue.BleTask TURN_BLE_OFF -> a
    com.idevicesinc.sweetblue.BleTask TURN_BLE_ON -> b
    com.idevicesinc.sweetblue.BleTask RESOLVE_CRASHES -> c
    com.idevicesinc.sweetblue.BleTask CONNECT -> d
    com.idevicesinc.sweetblue.BleTask DISCONNECT -> e
    com.idevicesinc.sweetblue.BleTask BOND -> f
    com.idevicesinc.sweetblue.BleTask UNBOND -> g
    com.idevicesinc.sweetblue.BleTask READ -> h
    com.idevicesinc.sweetblue.BleTask WRITE -> i
    com.idevicesinc.sweetblue.BleTask TOGGLE_NOTIFY -> j
    com.idevicesinc.sweetblue.BleTask READ_RSSI -> k
    com.idevicesinc.sweetblue.BleTask DISCOVER_SERVICES -> l
    com.idevicesinc.sweetblue.BleTask SEND_NOTIFICATION -> m
    com.idevicesinc.sweetblue.BleTask CONNECT_SERVER -> n
    com.idevicesinc.sweetblue.BleTask DISCONNECT_SERVER -> o
    com.idevicesinc.sweetblue.BleTask SEND_READ_WRITE_RESPONSE -> p
    com.idevicesinc.sweetblue.BleTask ADD_SERVICE -> q
    com.idevicesinc.sweetblue.BleTask SET_MTU -> r
    com.idevicesinc.sweetblue.BleTask SET_CONNECTION_PRIORITY -> s
    com.idevicesinc.sweetblue.BleTask READ_DESCRIPTOR -> t
    com.idevicesinc.sweetblue.BleTask WRITE_DESCRIPTOR -> u
    com.idevicesinc.sweetblue.BleTask RELIABLE_WRITE -> v
    com.idevicesinc.sweetblue.BleTask START_ADVERTISING -> w
    com.idevicesinc.sweetblue.BleTask[] $VALUES -> x
    com.idevicesinc.sweetblue.BleTask[] values() -> values
    com.idevicesinc.sweetblue.BleTask valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleTransaction -> com.idevicesinc.sweetblue.t:
    double m_timeout -> a
    double m_timeTracker -> b
    boolean m_isRunning -> c
    com.idevicesinc.sweetblue.BleDevice m_device -> d
    com.idevicesinc.sweetblue.PI_EndListener m_listener -> e
    void <init>() -> <init>
    void init(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PI_EndListener) -> a
    com.idevicesinc.sweetblue.BleDevice getDevice() -> a
    void start(com.idevicesinc.sweetblue.BleDevice) -> a
    void onEnd(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleTransaction$EndReason) -> a
    void update(double) -> a
    boolean isRunning() -> b
    void start_internal() -> c
    boolean end(com.idevicesinc.sweetblue.BleTransaction$EndReason,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void cancel() -> d
    boolean fail() -> e
    boolean succeed() -> f
    void update_internal(double) -> b
    boolean needsAtomicity() -> g
    com.idevicesinc.sweetblue.BleDevice access$000(com.idevicesinc.sweetblue.BleTransaction) -> a
com.idevicesinc.sweetblue.BleTransaction$1 -> com.idevicesinc.sweetblue.t$1:
    com.idevicesinc.sweetblue.BleTransaction$EndReason val$reason -> a
    com.idevicesinc.sweetblue.BleTransaction this$0 -> b
    void <init>(com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.BleTransaction$EndReason) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.BleTransaction$Auth -> com.idevicesinc.sweetblue.t$a:
com.idevicesinc.sweetblue.BleTransaction$EndReason -> com.idevicesinc.sweetblue.t$b:
    com.idevicesinc.sweetblue.BleTransaction$EndReason SUCCEEDED -> a
    com.idevicesinc.sweetblue.BleTransaction$EndReason CANCELLED -> b
    com.idevicesinc.sweetblue.BleTransaction$EndReason FAILED -> c
    com.idevicesinc.sweetblue.BleTransaction$EndReason[] $VALUES -> d
    com.idevicesinc.sweetblue.BleTransaction$EndReason[] values() -> values
    com.idevicesinc.sweetblue.BleTransaction$EndReason valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.BleTransaction$Init -> com.idevicesinc.sweetblue.t$c:
com.idevicesinc.sweetblue.BleTransaction$Ota -> com.idevicesinc.sweetblue.t$d:
com.idevicesinc.sweetblue.DefaultLogger -> com.idevicesinc.sweetblue.u:
    void <init>() -> <init>
    void onLogEntry(int,java.lang.String,java.lang.String) -> a
com.idevicesinc.sweetblue.DescriptorFilter -> com.idevicesinc.sweetblue.v:
    com.idevicesinc.sweetblue.DescriptorFilter$Please onEvent(com.idevicesinc.sweetblue.DescriptorFilter$DescriptorEvent) -> a
    java.util.UUID descriptorUuid() -> a
com.idevicesinc.sweetblue.DescriptorFilter$DescriptorEvent -> com.idevicesinc.sweetblue.v$a:
    android.bluetooth.BluetoothGattService m_service -> a
    android.bluetooth.BluetoothGattCharacteristic m_char -> b
    android.bluetooth.BluetoothGattDescriptor m_desc -> c
    com.idevicesinc.sweetblue.utils.FutureData m_value -> d
    void <init>(android.bluetooth.BluetoothGattService,android.bluetooth.BluetoothGattCharacteristic,android.bluetooth.BluetoothGattDescriptor,com.idevicesinc.sweetblue.utils.FutureData) -> <init>
com.idevicesinc.sweetblue.DescriptorFilter$Please -> com.idevicesinc.sweetblue.v$b:
    boolean m_accept -> a
    boolean isAccepted() -> a
com.idevicesinc.sweetblue.DeviceStateListener -> com.idevicesinc.sweetblue.w:
com.idevicesinc.sweetblue.ManagerStateListener -> com.idevicesinc.sweetblue.x:
com.idevicesinc.sweetblue.NotificationListener -> com.idevicesinc.sweetblue.y:
com.idevicesinc.sweetblue.NotificationListener$NotificationEvent -> com.idevicesinc.sweetblue.y$a:
    java.util.UUID NON_APPLICABLE_UUID -> a
    com.idevicesinc.sweetblue.BleDevice m_device -> b
    com.idevicesinc.sweetblue.NotificationListener$Type m_type -> c
    java.util.UUID m_serviceUuid -> d
    java.util.UUID m_charUuid -> e
    byte[] m_data -> f
    com.idevicesinc.sweetblue.NotificationListener$Status m_status -> g
    com.idevicesinc.sweetblue.utils.Interval m_transitTime -> h
    com.idevicesinc.sweetblue.utils.Interval m_totalTime -> i
    int m_gattStatus -> j
    boolean m_solicited -> k
    com.idevicesinc.sweetblue.BleDevice device() -> a
    com.idevicesinc.sweetblue.NotificationListener$Type type() -> b
    java.util.UUID charUuid() -> c
    byte[] data() -> d
    com.idevicesinc.sweetblue.NotificationListener$Status status() -> e
    int gattStatus() -> f
    void <init>(com.idevicesinc.sweetblue.BleDevice,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.NotificationListener$Type,byte[],com.idevicesinc.sweetblue.NotificationListener$Status,int,double,double,boolean) -> <init>
    boolean isNull() -> N
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.NotificationListener$Status -> com.idevicesinc.sweetblue.y$b:
    com.idevicesinc.sweetblue.NotificationListener$Status NULL -> a
    com.idevicesinc.sweetblue.NotificationListener$Status SUCCESS -> b
    com.idevicesinc.sweetblue.NotificationListener$Status NULL_DEVICE -> c
    com.idevicesinc.sweetblue.NotificationListener$Status NOT_CONNECTED -> d
    com.idevicesinc.sweetblue.NotificationListener$Status NO_MATCHING_TARGET -> e
    com.idevicesinc.sweetblue.NotificationListener$Status OPERATION_NOT_SUPPORTED -> f
    com.idevicesinc.sweetblue.NotificationListener$Status ANDROID_VERSION_NOT_SUPPORTED -> g
    com.idevicesinc.sweetblue.NotificationListener$Status CANCELLED_FROM_DISCONNECT -> h
    com.idevicesinc.sweetblue.NotificationListener$Status CANCELLED_FROM_BLE_TURNING_OFF -> i
    com.idevicesinc.sweetblue.NotificationListener$Status NULL_DATA -> j
    com.idevicesinc.sweetblue.NotificationListener$Status EMPTY_DATA -> k
    com.idevicesinc.sweetblue.NotificationListener$Status INVALID_DATA -> l
    com.idevicesinc.sweetblue.NotificationListener$Status FAILED_TO_TOGGLE_NOTIFICATION -> m
    com.idevicesinc.sweetblue.NotificationListener$Status REMOTE_GATT_FAILURE -> n
    com.idevicesinc.sweetblue.NotificationListener$Status UNKNOWN_ERROR -> o
    com.idevicesinc.sweetblue.NotificationListener$Status[] $VALUES -> p
    com.idevicesinc.sweetblue.NotificationListener$Status[] values() -> values
    com.idevicesinc.sweetblue.NotificationListener$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.NotificationListener$Type -> com.idevicesinc.sweetblue.y$c:
    com.idevicesinc.sweetblue.NotificationListener$Type NULL -> a
    com.idevicesinc.sweetblue.NotificationListener$Type NOTIFICATION -> b
    com.idevicesinc.sweetblue.NotificationListener$Type INDICATION -> c
    com.idevicesinc.sweetblue.NotificationListener$Type PSUEDO_NOTIFICATION -> d
    com.idevicesinc.sweetblue.NotificationListener$Type ENABLING_NOTIFICATION -> e
    com.idevicesinc.sweetblue.NotificationListener$Type DISABLING_NOTIFICATION -> f
    com.idevicesinc.sweetblue.NotificationListener$Type[] $VALUES -> g
    com.idevicesinc.sweetblue.NotificationListener$Type[] values() -> values
    com.idevicesinc.sweetblue.NotificationListener$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.PA_CallbackWrapper -> com.idevicesinc.sweetblue.z:
    com.idevicesinc.sweetblue.P_SweetHandler m_handler -> a
    boolean m_forcePostToMain -> b
    void <init>(com.idevicesinc.sweetblue.P_SweetHandler,boolean) -> <init>
    boolean postToMain() -> a
com.idevicesinc.sweetblue.PA_ServiceManager -> com.idevicesinc.sweetblue.aa:
    java.util.Iterator EMPTY_SERVICE_ITERATOR -> b
    java.util.List EMPTY_SERVICE_LIST -> a
    java.util.List EMPTY_CHARACTERISTIC_LIST -> c
    java.util.Iterator EMPTY_CHARACTERISTIC_ITERATOR -> d
    java.util.List EMPTY_DESCRIPTOR_LIST -> e
    void <init>() -> <init>
    android.bluetooth.BluetoothGattService getServiceDirectlyFromNativeNode(java.util.UUID) -> a
    java.util.List getNativeServiceList_original() -> a
    android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID,java.util.UUID) -> a
    android.bluetooth.BluetoothGattCharacteristic getCharacteristic(android.bluetooth.BluetoothGattService,java.util.UUID) -> a
    java.util.List getNativeCharacteristicList_original(android.bluetooth.BluetoothGattService) -> a
    java.util.List getNativeDescriptorList_original(android.bluetooth.BluetoothGattCharacteristic) -> a
    java.util.List collectAllNativeCharacteristics(java.util.UUID,java.lang.Object) -> a
    java.util.List getCharacteristics_List(java.util.UUID) -> b
    android.bluetooth.BluetoothGattDescriptor getDescriptor(android.bluetooth.BluetoothGattCharacteristic,java.util.UUID) -> a
    android.bluetooth.BluetoothGattDescriptor getDescriptor(android.bluetooth.BluetoothGattService,java.util.UUID,java.util.UUID) -> a
    android.bluetooth.BluetoothGattDescriptor getDescriptor(java.util.UUID,java.util.UUID,java.util.UUID) -> a
    java.util.Iterator access$000() -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.PA_ServiceManager$1 -> com.idevicesinc.sweetblue.aa$1:
    void <init>() -> <init>
    java.util.Iterator iterator() -> iterator
com.idevicesinc.sweetblue.PA_StateTracker -> com.idevicesinc.sweetblue.ab:
    int m_stateMask -> a
    long[] m_timesInState -> b
    int m_stateCount -> c
    void <init>(com.idevicesinc.sweetblue.utils.State[],boolean) -> <init>
    void <init>(com.idevicesinc.sweetblue.utils.State[]) -> <init>
    boolean is(com.idevicesinc.sweetblue.utils.State) -> a
    int getState() -> a
    boolean checkBitMatch(com.idevicesinc.sweetblue.utils.State,boolean) -> a
    int getMask(int,java.lang.Object[]) -> a
    void append(com.idevicesinc.sweetblue.utils.State,com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,int) -> a
    void remove(com.idevicesinc.sweetblue.utils.State,com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,int) -> b
    void append_assert(com.idevicesinc.sweetblue.utils.State) -> b
    void set(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,int,java.lang.Object[]) -> a
    void set(int,int,java.lang.Object[]) -> a
    void update(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,int,java.lang.Object[]) -> b
    void update(int,int,java.lang.Object[]) -> b
    void copy(com.idevicesinc.sweetblue.PA_StateTracker) -> a
    void setStateMask(int,int,int) -> a
    void onStateChange(int,int,int,int) -> a
    void fireStateChange(int,int,int,int) -> b
    java.lang.String toString(com.idevicesinc.sweetblue.utils.State[]) -> a
com.idevicesinc.sweetblue.PA_StateTracker$1 -> com.idevicesinc.sweetblue.ab$1:
    int[] $SwitchMap$com$idevicesinc$sweetblue$PA_StateTracker$E_Intent -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.PA_StateTracker$E_Intent -> com.idevicesinc.sweetblue.ab$a:
    com.idevicesinc.sweetblue.PA_StateTracker$E_Intent INTENTIONAL -> a
    com.idevicesinc.sweetblue.PA_StateTracker$E_Intent UNINTENTIONAL -> b
    com.idevicesinc.sweetblue.PA_StateTracker$E_Intent[] $VALUES -> c
    com.idevicesinc.sweetblue.PA_StateTracker$E_Intent[] values() -> values
    com.idevicesinc.sweetblue.PA_StateTracker$E_Intent valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int getMask() -> a
    com.idevicesinc.sweetblue.utils.State$ChangeIntent convert() -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.PA_Task -> com.idevicesinc.sweetblue.ac:
    com.idevicesinc.sweetblue.BleNodeConfig$TaskTimeoutRequestFilter$TaskTimeoutRequestEvent s_timeoutRequestEvent -> a
    com.idevicesinc.sweetblue.BleDevice m_device -> b
    com.idevicesinc.sweetblue.BleServer m_server -> c
    com.idevicesinc.sweetblue.BleManager m_manager -> d
    double m_timeout -> e
    double m_executionDelay -> f
    long m_resetableExecuteStartTime -> g
    double m_totalTimeArmedAndExecuting -> h
    com.idevicesinc.sweetblue.PA_Task$I_StateListener m_stateListener -> i
    com.idevicesinc.sweetblue.PE_TaskState m_state -> j
    com.idevicesinc.sweetblue.P_TaskQueue m_queue -> k
    long m_timeCreated -> l
    long m_timeExecuted -> m
    boolean m_softlyCancelled -> n
    int m_defaultOrdinal -> o
    void <init>(com.idevicesinc.sweetblue.BleServer,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    double getInitialTimeout() -> b
    java.util.UUID getCharUuid() -> c
    java.util.UUID getDescUuid() -> d
    void init() -> e
    com.idevicesinc.sweetblue.P_Logger getLogger() -> f
    boolean setState(com.idevicesinc.sweetblue.PE_TaskState) -> b
    com.idevicesinc.sweetblue.PE_TaskState getState() -> g
    int getOrdinal() -> h
    void assignDefaultOrdinal(com.idevicesinc.sweetblue.P_TaskQueue) -> a
    void onAddedToQueue(com.idevicesinc.sweetblue.P_TaskQueue) -> b
    void resetTimeout(double) -> a
    void timeout() -> i
    void redundant() -> j
    void succeed() -> k
    void fail() -> l
    void clearFromQueue() -> m
    void failImmediately() -> n
    void selfInterrupt() -> o
    void softlyCancel() -> p
    void failWithoutRetry() -> q
    void arm() -> r
    boolean isExecutable() -> s
    boolean isArmable() -> t
    void execute_wrapper() -> I
    void execute() -> u
    void setEndingState(com.idevicesinc.sweetblue.PE_TaskState) -> a
    boolean tryExecuting() -> v
    void update_internal(double) -> b
    void onNotExecutable() -> w
    void update(double) -> c
    double getTotalTimeExecuting() -> x
    double getTotalTimeExecuting(long) -> a
    double getTotalTime() -> y
    double getAggregatedTimeArmedAndExecuting() -> z
    boolean isFor(java.lang.Class,com.idevicesinc.sweetblue.BleServer,java.lang.String) -> a
    com.idevicesinc.sweetblue.BleDevice getDevice() -> A
    com.idevicesinc.sweetblue.BleServer getServer() -> B
    com.idevicesinc.sweetblue.BleManager getManager() -> C
    com.idevicesinc.sweetblue.P_TaskQueue getQueue() -> D
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    boolean isMoreImportantThan(com.idevicesinc.sweetblue.PA_Task) -> a
    boolean isMoreImportantThan_default(com.idevicesinc.sweetblue.PA_Task) -> b
    boolean isInterruptableBy(com.idevicesinc.sweetblue.PA_Task) -> c
    boolean isCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> d
    boolean isSoftlyCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> e
    void attemptToSoftlyCancel(com.idevicesinc.sweetblue.PA_Task) -> f
    boolean wasSoftlyCancelled() -> F
    java.lang.String getToStringAddition() -> G
    java.lang.String toString() -> toString
    boolean isExplicit() -> H
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.PA_Task$I_StateListener -> com.idevicesinc.sweetblue.ac$a:
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
com.idevicesinc.sweetblue.PA_Task_ConnectOrDisconnectServer -> com.idevicesinc.sweetblue.ad:
    com.idevicesinc.sweetblue.PE_TaskPriority m_priority -> c
    boolean m_explicit -> d
    android.bluetooth.BluetoothDevice m_nativeDevice -> a
    int m_gattStatus -> b
    void <init>(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener,boolean,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    boolean isFor(com.idevicesinc.sweetblue.BleServer,java.lang.String) -> a
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    boolean isExplicit() -> H
    int getGattStatus() -> I
com.idevicesinc.sweetblue.PA_Task_ReadOrWrite -> com.idevicesinc.sweetblue.ae:
    java.util.UUID m_charUuid -> d
    java.util.UUID m_servUuid -> e
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_readWriteListener -> a
    java.lang.Boolean m_authRetryValue_onExecute -> f
    boolean m_triedToKickOffBond -> g
    com.idevicesinc.sweetblue.DescriptorFilter m_descriptorFilter -> b
    android.bluetooth.BluetoothGattCharacteristic m_filteredCharacteristic -> h
    java.util.List m_characteristicList -> i
    void <init>(com.idevicesinc.sweetblue.BleDevice,android.bluetooth.BluetoothGattCharacteristic,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,boolean,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,java.util.UUID,java.util.UUID,boolean,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority,com.idevicesinc.sweetblue.DescriptorFilter,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newReadWriteEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    void executeReadOrWrite() -> I
    java.util.UUID getActualDescUuid(java.util.UUID) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target getDefaultTarget() -> J
    void fail(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,java.util.UUID,java.util.UUID) -> a
    void onNotExecutable() -> w
    boolean acknowledgeCallback(int) -> a
    android.bluetooth.BluetoothGattCharacteristic getFilteredCharacteristic() -> K
    void checkIfBondingKickedOff() -> P
    boolean triedToKickOffBond() -> Q
    void execute() -> u
    void update(double) -> c
    java.lang.Boolean getAuthRetryValue() -> R
    java.util.UUID getCharUuid() -> c
    java.util.UUID getServiceUuid() -> L
    boolean isFor(android.bluetooth.BluetoothGattCharacteristic) -> a
    boolean isFor(android.bluetooth.BluetoothGattDescriptor) -> a
    boolean isForCharacteristic(java.util.UUID) -> b
    java.lang.String getToStringAddition() -> G
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    boolean descriptorMatches(android.bluetooth.BluetoothGattDescriptor) -> b
    void onDescriptorReadCallback(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,byte[],int) -> a
    void onDescriptorRead(android.bluetooth.BluetoothGatt,java.util.UUID,byte[],int) -> a
    void onCharacteristicOrDescriptorRead(android.bluetooth.BluetoothGatt,java.util.UUID,byte[],int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newSuccessReadWriteEvent(byte[],com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,java.util.UUID,java.util.UUID) -> a
    void succeedRead(byte[],com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type) -> a
    void succeedWrite() -> M
    boolean write_earlyOut(byte[]) -> a
com.idevicesinc.sweetblue.PA_Task_RequiresBleOn -> com.idevicesinc.sweetblue.af:
    void <init>(com.idevicesinc.sweetblue.BleServer,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    boolean isExecutable() -> s
    boolean isCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> d
com.idevicesinc.sweetblue.PA_Task_RequiresConnection -> com.idevicesinc.sweetblue.ag:
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    boolean isExecutable() -> s
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status getCancelType() -> N
    boolean isSoftlyCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> e
    void attemptToSoftlyCancel(com.idevicesinc.sweetblue.PA_Task) -> f
com.idevicesinc.sweetblue.PA_Task_RequiresServerConnection -> com.idevicesinc.sweetblue.ah:
    java.lang.String m_macAddress -> a
    void <init>(com.idevicesinc.sweetblue.BleServer,java.lang.String) -> <init>
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status getCancelStatusType() -> I
    boolean isExecutable() -> s
    boolean isSoftlyCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> e
    void attemptToSoftlyCancel(com.idevicesinc.sweetblue.PA_Task) -> f
com.idevicesinc.sweetblue.PA_Task_Transactionable -> com.idevicesinc.sweetblue.ai:
    boolean m_requiresBonding -> c
    com.idevicesinc.sweetblue.BleTransaction m_txn -> a
    com.idevicesinc.sweetblue.PE_TaskPriority m_priority -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleTransaction,boolean,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    com.idevicesinc.sweetblue.BleTransaction getTxn() -> O
    boolean isSoftlyCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> e
    boolean isInterruptableBy(com.idevicesinc.sweetblue.PA_Task) -> c
    boolean isMoreImportantThan(com.idevicesinc.sweetblue.PA_Task) -> a
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    boolean isArmable() -> t
com.idevicesinc.sweetblue.PE_TaskPriority -> com.idevicesinc.sweetblue.aj:
    com.idevicesinc.sweetblue.PE_TaskPriority TRIVIAL -> a
    com.idevicesinc.sweetblue.PE_TaskPriority LOW -> b
    com.idevicesinc.sweetblue.PE_TaskPriority MEDIUM -> c
    com.idevicesinc.sweetblue.PE_TaskPriority HIGH -> d
    com.idevicesinc.sweetblue.PE_TaskPriority CRITICAL -> e
    com.idevicesinc.sweetblue.PE_TaskPriority FOR_NORMAL_READS_WRITES -> f
    com.idevicesinc.sweetblue.PE_TaskPriority FOR_EXPLICIT_BONDING_AND_CONNECTING -> g
    com.idevicesinc.sweetblue.PE_TaskPriority FOR_PRIORITY_READS_WRITES -> h
    com.idevicesinc.sweetblue.PE_TaskPriority FOR_IMPLICIT_BONDING_AND_CONNECTING -> i
    com.idevicesinc.sweetblue.PE_TaskPriority[] $VALUES -> j
    com.idevicesinc.sweetblue.PE_TaskPriority[] values() -> values
    com.idevicesinc.sweetblue.PE_TaskPriority valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.PE_TaskState -> com.idevicesinc.sweetblue.ak:
    com.idevicesinc.sweetblue.PE_TaskState CREATED -> a
    com.idevicesinc.sweetblue.PE_TaskState QUEUED -> b
    com.idevicesinc.sweetblue.PE_TaskState ARMED -> c
    com.idevicesinc.sweetblue.PE_TaskState EXECUTING -> d
    com.idevicesinc.sweetblue.PE_TaskState SUCCEEDED -> e
    com.idevicesinc.sweetblue.PE_TaskState TIMED_OUT -> f
    com.idevicesinc.sweetblue.PE_TaskState INTERRUPTED -> g
    com.idevicesinc.sweetblue.PE_TaskState CANCELLED -> h
    com.idevicesinc.sweetblue.PE_TaskState SOFTLY_CANCELLED -> i
    com.idevicesinc.sweetblue.PE_TaskState FAILED -> j
    com.idevicesinc.sweetblue.PE_TaskState CLEARED_FROM_QUEUE -> k
    com.idevicesinc.sweetblue.PE_TaskState REDUNDANT -> l
    com.idevicesinc.sweetblue.PE_TaskState FAILED_IMMEDIATELY -> m
    com.idevicesinc.sweetblue.PE_TaskState[] $VALUES -> n
    com.idevicesinc.sweetblue.PE_TaskState[] values() -> values
    com.idevicesinc.sweetblue.PE_TaskState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isEndingState() -> a
    boolean canGoToNextTaskImmediately() -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.PI_EndListener -> com.idevicesinc.sweetblue.al:
    void onTransactionEnd(com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.BleTransaction$EndReason,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
com.idevicesinc.sweetblue.PI_UpdateLoop -> com.idevicesinc.sweetblue.am:
com.idevicesinc.sweetblue.PI_UpdateLoop$Callback -> com.idevicesinc.sweetblue.am$a:
    void onUpdate(double) -> a
com.idevicesinc.sweetblue.PU_HistoricalData -> com.idevicesinc.sweetblue.an:
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please DO_NOT_LOG -> a
    com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDataList newList(com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDatabase,com.idevicesinc.sweetblue.utils.UpdateLoop,java.lang.String,java.util.UUID,java.lang.String,boolean) -> a
    com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDatabase newDatabase(android.content.Context,com.idevicesinc.sweetblue.BleManager) -> a
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter getFilter(com.idevicesinc.sweetblue.BleNode) -> a
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$HistoricalDataLogEvent newEvent(com.idevicesinc.sweetblue.BleNode,java.lang.String,java.util.UUID,byte[],com.idevicesinc.sweetblue.utils.EpochTime,com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source) -> a
    com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please getPlease(com.idevicesinc.sweetblue.BleNode,java.lang.String,java.util.UUID,byte[],com.idevicesinc.sweetblue.utils.EpochTime,com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source) -> b
    byte[] getAmendedData(byte[],com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please) -> a
    com.idevicesinc.sweetblue.utils.EpochTime getAmendedTimestamp(com.idevicesinc.sweetblue.utils.EpochTime,com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please) -> a
    boolean add_earlyOut(com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDataList,com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Please) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.PU_TaskQueue -> com.idevicesinc.sweetblue.ao:
    int findSoonestSpot(java.util.List,com.idevicesinc.sweetblue.PA_Task) -> a
    boolean isMatch(com.idevicesinc.sweetblue.PA_Task,java.lang.Class,com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleServer) -> a
com.idevicesinc.sweetblue.P_AndroidBleDevice -> com.idevicesinc.sweetblue.ap:
    android.bluetooth.BluetoothDevice m_native_device -> b
    com.idevicesinc.sweetblue.BleDevice m_device -> c
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    void updateBleDevice(com.idevicesinc.sweetblue.BleDevice) -> a
    int getBondState() -> a
    java.lang.String getAddress() -> b
    java.lang.String getName() -> c
    boolean createBond() -> d
    boolean removeBond() -> e
    boolean cancelBond() -> f
    com.idevicesinc.sweetblue.BleManager getManager() -> i
    boolean isDeviceNull() -> g
    boolean equals(com.idevicesinc.sweetblue.P_NativeDeviceLayer) -> a
    boolean createBondSneaky(java.lang.String,boolean) -> a
    void setNativeDevice(android.bluetooth.BluetoothDevice) -> a
    android.bluetooth.BluetoothDevice getNativeDevice() -> h
    android.bluetooth.BluetoothGatt connect(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback) -> a
com.idevicesinc.sweetblue.P_AndroidBluetoothManager -> com.idevicesinc.sweetblue.aq:
    android.bluetooth.BluetoothManager m_manager -> a
    android.bluetooth.BluetoothAdapter m_adaptor -> b
    com.idevicesinc.sweetblue.BleManager m_bleManager -> c
    java.lang.reflect.Method m_getLeState_marshmallow -> d
    java.lang.Integer m_refState -> e
    java.lang.Integer m_state -> f
    void <init>() -> <init>
    void setBleManager(com.idevicesinc.sweetblue.BleManager) -> a
    int getConnectionState(com.idevicesinc.sweetblue.P_NativeDeviceLayer,int) -> a
    boolean startDiscovery() -> a
    boolean isManagerNull() -> b
    void resetManager(android.content.Context) -> a
    boolean disable() -> c
    boolean enable() -> d
    int getState() -> e
    int getBleState() -> f
    android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,com.idevicesinc.sweetblue.P_BleServer_Listeners) -> a
    android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser() -> g
    java.util.Set getBondedDevices() -> h
    boolean cancelDiscovery() -> i
    android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String) -> a
    android.bluetooth.BluetoothAdapter getNativeAdaptor() -> j
    boolean isLocationEnabledForScanning_byOsServices() -> k
    boolean isLocationEnabledForScanning_byRuntimePermissions() -> l
    boolean isLocationEnabledForScanning() -> m
    boolean isBluetoothEnabled() -> n
    void startLScan(int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.compat.L_Util$ScanCallback) -> a
    void startMScan(int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.compat.L_Util$ScanCallback) -> b
    boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback) -> a
    void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback) -> b
com.idevicesinc.sweetblue.P_AndroidGatt -> com.idevicesinc.sweetblue.ar:
    android.bluetooth.BluetoothGatt m_gatt -> a
    com.idevicesinc.sweetblue.BleDevice m_device -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    void setGatt(android.bluetooth.BluetoothGatt) -> a
    android.bluetooth.BluetoothGatt getGatt() -> a
    java.lang.Boolean getAuthRetryValue() -> b
    boolean equals(android.bluetooth.BluetoothGatt) -> b
    com.idevicesinc.sweetblue.BleManager getManager() -> j
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh closeGatt() -> c
    java.util.List getNativeServiceList(com.idevicesinc.sweetblue.P_Logger) -> a
    android.bluetooth.BluetoothGattService getService(java.util.UUID,com.idevicesinc.sweetblue.P_Logger) -> a
    boolean isGattNull() -> d
    android.bluetooth.BluetoothGatt connect(com.idevicesinc.sweetblue.P_NativeDeviceLayer,android.content.Context,boolean,android.bluetooth.BluetoothGattCallback) -> a
    boolean requestMtu(int) -> a
    boolean refreshGatt() -> e
    boolean requestConnectionPriority(com.idevicesinc.sweetblue.BleConnectionPriority) -> a
    void disconnect() -> f
    boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic) -> a
    boolean setCharValue(android.bluetooth.BluetoothGattCharacteristic,byte[]) -> a
    boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic) -> b
    boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean) -> a
    boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor) -> a
    boolean setDescValue(android.bluetooth.BluetoothGattDescriptor,byte[]) -> a
    boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor) -> b
    boolean discoverServices() -> g
    boolean executeReliableWrite() -> h
    boolean readRemoteRssi() -> i
com.idevicesinc.sweetblue.P_BleDeviceLayerManager -> com.idevicesinc.sweetblue.as:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    com.idevicesinc.sweetblue.P_GattLayer m_gattLayer -> b
    com.idevicesinc.sweetblue.P_NativeDeviceLayer m_deviceLayer -> c
    com.idevicesinc.sweetblue.P_NativeManagerLayer m_managerLayer -> d
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.P_GattLayer,com.idevicesinc.sweetblue.P_NativeDeviceLayer,com.idevicesinc.sweetblue.P_NativeManagerLayer) -> <init>
    java.util.List getNativeServiceList() -> a
    android.bluetooth.BluetoothGattService getService(java.util.UUID) -> a
    boolean isGattNull() -> b
    android.bluetooth.BluetoothGatt connect(boolean) -> a
    void disconnect() -> c
    boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic) -> a
    boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic) -> b
    boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor) -> a
    boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor) -> b
    boolean createBond() -> d
    boolean createBondSneaky(java.lang.String) -> a
    boolean startDiscovery() -> e
    boolean cancelDiscovery() -> f
    boolean refreshGatt() -> g
    boolean discoverServices() -> h
    boolean executeReliableWrite() -> i
    boolean readRemoteRssi() -> j
    boolean requestConnectionPriority(com.idevicesinc.sweetblue.BleConnectionPriority) -> a
    boolean requestMtu(int) -> a
    boolean setCharValue(android.bluetooth.BluetoothGattCharacteristic,byte[]) -> a
    boolean setDescValue(android.bluetooth.BluetoothGattDescriptor,byte[]) -> a
    boolean gattEquals(android.bluetooth.BluetoothGatt) -> a
    com.idevicesinc.sweetblue.P_GattLayer getGattLayer() -> k
    com.idevicesinc.sweetblue.P_NativeDeviceLayer getDeviceLayer() -> l
    com.idevicesinc.sweetblue.P_NativeManagerLayer getManagerLayer() -> m
com.idevicesinc.sweetblue.P_BleDevice_Listeners -> com.idevicesinc.sweetblue.at:
    com.idevicesinc.sweetblue.BleDevice m_device -> b
    com.idevicesinc.sweetblue.P_Logger m_logger -> c
    com.idevicesinc.sweetblue.P_TaskQueue m_queue -> d
    com.idevicesinc.sweetblue.PA_Task$I_StateListener m_taskStateListener -> a
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    void onConnectionStateChange(android.bluetooth.BluetoothGatt,int,int) -> onConnectionStateChange
    void onConnectionStateChange_updateThread(android.bluetooth.BluetoothGatt,int,int) -> a
    void onNativeConnectFail(android.bluetooth.BluetoothGatt,int) -> a
    void onServicesDiscovered(android.bluetooth.BluetoothGatt,int) -> onServicesDiscovered
    void onServicesDiscovered_updateThread(android.bluetooth.BluetoothGatt,int) -> b
    void onCharacteristicRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int) -> onCharacteristicRead
    void onCharacteristicRead_updateThread(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int,byte[]) -> a
    void onCharacteristicWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int) -> onCharacteristicWrite
    void onCharacteristicWrite_updateThread(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,byte[],int) -> a
    void fireUnsolicitedEvent(android.bluetooth.BluetoothGattCharacteristic,android.bluetooth.BluetoothGattDescriptor,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,byte[],int) -> a
    void onReliableWriteCompleted(android.bluetooth.BluetoothGatt,int) -> onReliableWriteCompleted
    void onReliableWriteCompleted_updateThread(android.bluetooth.BluetoothGatt,int) -> c
    void onReadRemoteRssi(android.bluetooth.BluetoothGatt,int,int) -> onReadRemoteRssi
    void onReadRemoteRssi_updateThread(android.bluetooth.BluetoothGatt,int,int) -> b
    void onDescriptorWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int) -> onDescriptorWrite
    void onDescriptorWrite_updateThread(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,byte[],int) -> a
    void onDescriptorRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int) -> onDescriptorRead
    void onDescriptorRead_updateThread(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,byte[],int) -> b
    void onCharacteristicChanged(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic) -> onCharacteristicChanged
    void onCharacteristicChanged_updateThread(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,byte[]) -> a
    void onNativeBondStateChanged_updateThread(int,int,int) -> a
    void onMtuChanged(android.bluetooth.BluetoothGatt,int,int) -> onMtuChanged
    void onMtuChanged_updateThread(android.bluetooth.BluetoothGatt,int,int) -> c
    com.idevicesinc.sweetblue.BleDevice access$000(com.idevicesinc.sweetblue.P_BleDevice_Listeners) -> a
    void access$100(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int,int) -> a
    void access$200(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int) -> a
    void access$300(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int,byte[]) -> a
    void access$400(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,byte[],int) -> a
    void access$500(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int) -> b
    void access$600(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int,int) -> b
    void access$700(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,byte[],int) -> a
    void access$800(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,byte[],int) -> b
    void access$900(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,byte[]) -> a
    void access$1000(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int,int) -> c
com.idevicesinc.sweetblue.P_BleDevice_Listeners$1 -> com.idevicesinc.sweetblue.at$1:
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners) -> <init>
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
com.idevicesinc.sweetblue.P_BleDevice_Listeners$10 -> com.idevicesinc.sweetblue.at$2:
    android.bluetooth.BluetoothGatt val$gatt -> a
    android.bluetooth.BluetoothGattCharacteristic val$characteristic -> b
    byte[] val$value -> c
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> d
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,byte[]) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleDevice_Listeners$11 -> com.idevicesinc.sweetblue.at$3:
    android.bluetooth.BluetoothGatt val$gatt -> a
    int val$mtu -> b
    int val$gattStatus -> c
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> d
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int,int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleDevice_Listeners$2 -> com.idevicesinc.sweetblue.at$4:
    android.bluetooth.BluetoothGatt val$gatt -> a
    int val$gattStatus -> b
    int val$newState -> c
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> d
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int,int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleDevice_Listeners$3 -> com.idevicesinc.sweetblue.at$5:
    android.bluetooth.BluetoothGatt val$gatt -> a
    int val$gattStatus -> b
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> c
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleDevice_Listeners$4 -> com.idevicesinc.sweetblue.at$6:
    android.bluetooth.BluetoothGatt val$gatt -> a
    android.bluetooth.BluetoothGattCharacteristic val$characteristic -> b
    int val$gattStatus -> c
    byte[] val$value -> d
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> e
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int,byte[]) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleDevice_Listeners$5 -> com.idevicesinc.sweetblue.at$7:
    android.bluetooth.BluetoothGatt val$gatt -> a
    android.bluetooth.BluetoothGattCharacteristic val$characteristic -> b
    byte[] val$data -> c
    int val$gattStatus -> d
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> e
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,byte[],int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleDevice_Listeners$6 -> com.idevicesinc.sweetblue.at$8:
    android.bluetooth.BluetoothGatt val$gatt -> a
    int val$gattStatus -> b
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> c
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleDevice_Listeners$7 -> com.idevicesinc.sweetblue.at$9:
    android.bluetooth.BluetoothGatt val$gatt -> a
    int val$rssi -> b
    int val$gattStatus -> c
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> d
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,int,int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleDevice_Listeners$8 -> com.idevicesinc.sweetblue.at$10:
    android.bluetooth.BluetoothGatt val$gatt -> a
    android.bluetooth.BluetoothGattDescriptor val$descriptor -> b
    byte[] val$data -> c
    int val$gattStatus -> d
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> e
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,byte[],int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleDevice_Listeners$9 -> com.idevicesinc.sweetblue.at$11:
    android.bluetooth.BluetoothGatt val$gatt -> a
    android.bluetooth.BluetoothGattDescriptor val$descriptor -> b
    byte[] val$data -> c
    int val$gattStatus -> d
    com.idevicesinc.sweetblue.P_BleDevice_Listeners this$0 -> e
    void <init>(com.idevicesinc.sweetblue.P_BleDevice_Listeners,android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,byte[],int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleManager_Listeners -> com.idevicesinc.sweetblue.au:
    com.idevicesinc.sweetblue.utils.Interval m_pollRate -> a
    double m_timeSinceLastPoll -> b
    boolean m_checkingState -> c
    com.idevicesinc.sweetblue.PA_Task$I_StateListener m_scanTaskListener -> d
    android.content.BroadcastReceiver m_receiver -> e
    com.idevicesinc.sweetblue.BleManager m_mngr -> f
    int m_nativeState -> g
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    void updatePollRate(com.idevicesinc.sweetblue.utils.Interval) -> a
    android.content.IntentFilter newIntentFilter() -> b
    com.idevicesinc.sweetblue.PA_Task$I_StateListener getScanTaskListener() -> a
    void onDeviceFound_classic(android.content.Context,android.content.Intent) -> a
    void onClassicDiscoveryFinished() -> c
    void onNativeBleStateChangeFromBroadcastReceiver(android.content.Context,android.content.Intent) -> b
    void onNativeBleStateChange(int,int) -> a
    void onNativeBondStateChanged(android.content.Context,android.content.Intent) -> c
    com.idevicesinc.sweetblue.BleDevice getDeviceFromNativeDevice(android.bluetooth.BluetoothDevice) -> a
    void onNativeBondStateChanged(android.bluetooth.BluetoothDevice,int,int,int) -> a
    boolean isBleStateFromPreM(int) -> a
    void assertOnWeirdStateChange(int,int) -> b
    void onNativeBleStateChange_fromPolling(int,int) -> c
    void update(double) -> a
    int getBleState() -> d
    com.idevicesinc.sweetblue.BleManager access$000(com.idevicesinc.sweetblue.P_BleManager_Listeners) -> a
    void access$100(com.idevicesinc.sweetblue.P_BleManager_Listeners,android.content.Context,android.content.Intent) -> a
    void access$200(com.idevicesinc.sweetblue.P_BleManager_Listeners,android.content.Context,android.content.Intent) -> b
    void access$300(com.idevicesinc.sweetblue.P_BleManager_Listeners,android.content.Context,android.content.Intent) -> c
    void access$400(com.idevicesinc.sweetblue.P_BleManager_Listeners) -> b
    com.idevicesinc.sweetblue.BleDevice access$500(com.idevicesinc.sweetblue.P_BleManager_Listeners,android.bluetooth.BluetoothDevice) -> a
com.idevicesinc.sweetblue.P_BleManager_Listeners$1 -> com.idevicesinc.sweetblue.au$1:
    com.idevicesinc.sweetblue.P_BleManager_Listeners this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_BleManager_Listeners) -> <init>
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
com.idevicesinc.sweetblue.P_BleManager_Listeners$1$1 -> com.idevicesinc.sweetblue.au$1$1:
    double val$totalTimeExecuting -> a
    com.idevicesinc.sweetblue.P_BleManager_Listeners$1 this$1 -> b
    void <init>(com.idevicesinc.sweetblue.P_BleManager_Listeners$1,double) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleManager_Listeners$2 -> com.idevicesinc.sweetblue.au$2:
    com.idevicesinc.sweetblue.P_BleManager_Listeners this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_BleManager_Listeners) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.idevicesinc.sweetblue.P_BleManager_Listeners$3 -> com.idevicesinc.sweetblue.au$3:
    android.bluetooth.BluetoothDevice val$device_native -> a
    int val$previousState -> b
    int val$newState -> c
    int val$failReason -> d
    com.idevicesinc.sweetblue.P_BleManager_Listeners this$0 -> e
    void <init>(com.idevicesinc.sweetblue.P_BleManager_Listeners,android.bluetooth.BluetoothDevice,int,int,int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleServer_Listeners -> com.idevicesinc.sweetblue.av:
    com.idevicesinc.sweetblue.BleServer m_server -> b
    com.idevicesinc.sweetblue.P_Logger m_logger -> c
    com.idevicesinc.sweetblue.P_TaskQueue m_queue -> d
    com.idevicesinc.sweetblue.PA_Task$I_StateListener m_taskStateListener -> a
    void <init>(com.idevicesinc.sweetblue.BleServer) -> <init>
    boolean hasCurrentDisconnectTaskFor(android.bluetooth.BluetoothDevice) -> a
    boolean hasCurrentConnectTaskFor(android.bluetooth.BluetoothDevice) -> b
    void failDisconnectTaskIfPossibleFor(android.bluetooth.BluetoothDevice) -> c
    boolean failConnectTaskIfPossibleFor(android.bluetooth.BluetoothDevice,int) -> a
    void onNativeConnectFail(android.bluetooth.BluetoothDevice,int) -> b
    void onConnectionStateChange(android.bluetooth.BluetoothDevice,int,int) -> onConnectionStateChange
    void onConnectionStateChange_updateThread(android.bluetooth.BluetoothDevice,int,int) -> a
    void onServiceAdded(int,android.bluetooth.BluetoothGattService) -> onServiceAdded
    void onServiceAdded_updateThread(int,android.bluetooth.BluetoothGattService) -> a
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent newEarlyOutResponse_Read(android.bluetooth.BluetoothDevice,java.util.UUID,java.util.UUID,java.util.UUID,int,int,com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status) -> a
    void onReadRequest_updateThread(android.bluetooth.BluetoothDevice,int,int,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    void onCharacteristicReadRequest(android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattCharacteristic) -> onCharacteristicReadRequest
    void onDescriptorReadRequest(android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattDescriptor) -> onDescriptorReadRequest
    com.idevicesinc.sweetblue.BleServer$OutgoingListener$OutgoingEvent newEarlyOutResponse_Write(android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type,java.util.UUID,java.util.UUID,java.util.UUID,int,int,com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status) -> a
    void onWriteRequest_updateThread(android.bluetooth.BluetoothDevice,byte[],int,int,boolean,boolean,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    void onCharacteristicWriteRequest(android.bluetooth.BluetoothDevice,int,android.bluetooth.BluetoothGattCharacteristic,boolean,boolean,int,byte[]) -> onCharacteristicWriteRequest
    void onDescriptorWriteRequest(android.bluetooth.BluetoothDevice,int,android.bluetooth.BluetoothGattDescriptor,boolean,boolean,int,byte[]) -> onDescriptorWriteRequest
    void onExecuteWrite(android.bluetooth.BluetoothDevice,int,boolean) -> onExecuteWrite
    void onNotificationSent(android.bluetooth.BluetoothDevice,int) -> onNotificationSent
    void onNotificationSent_updateThread(android.bluetooth.BluetoothDevice,int) -> c
    com.idevicesinc.sweetblue.BleServer access$000(com.idevicesinc.sweetblue.P_BleServer_Listeners) -> a
    void access$100(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,int,int) -> a
    void access$200(com.idevicesinc.sweetblue.P_BleServer_Listeners,int,android.bluetooth.BluetoothGattService) -> a
    void access$300(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,int,int,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    void access$400(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,byte[],int,int,boolean,boolean,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    void access$500(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,int) -> a
com.idevicesinc.sweetblue.P_BleServer_Listeners$1 -> com.idevicesinc.sweetblue.av$1:
    com.idevicesinc.sweetblue.P_BleServer_Listeners this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_BleServer_Listeners) -> <init>
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
com.idevicesinc.sweetblue.P_BleServer_Listeners$2 -> com.idevicesinc.sweetblue.av$2:
    android.bluetooth.BluetoothDevice val$device -> a
    int val$gattStatus -> b
    int val$newState -> c
    com.idevicesinc.sweetblue.P_BleServer_Listeners this$0 -> d
    void <init>(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,int,int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleServer_Listeners$3 -> com.idevicesinc.sweetblue.av$3:
    int val$gattStatus -> a
    android.bluetooth.BluetoothGattService val$service -> b
    com.idevicesinc.sweetblue.P_BleServer_Listeners this$0 -> c
    void <init>(com.idevicesinc.sweetblue.P_BleServer_Listeners,int,android.bluetooth.BluetoothGattService) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleServer_Listeners$4 -> com.idevicesinc.sweetblue.av$4:
    android.bluetooth.BluetoothDevice val$device -> a
    int val$requestId -> b
    int val$offset -> c
    android.bluetooth.BluetoothGattCharacteristic val$characteristic -> d
    com.idevicesinc.sweetblue.P_BleServer_Listeners this$0 -> e
    void <init>(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattCharacteristic) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleServer_Listeners$5 -> com.idevicesinc.sweetblue.av$5:
    android.bluetooth.BluetoothDevice val$device -> a
    int val$requestId -> b
    int val$offset -> c
    android.bluetooth.BluetoothGattDescriptor val$descriptor -> d
    com.idevicesinc.sweetblue.P_BleServer_Listeners this$0 -> e
    void <init>(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattDescriptor) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleServer_Listeners$6 -> com.idevicesinc.sweetblue.av$6:
    android.bluetooth.BluetoothDevice val$device -> a
    byte[] val$value -> b
    int val$requestId -> c
    int val$offset -> d
    boolean val$preparedWrite -> e
    boolean val$responseNeeded -> f
    android.bluetooth.BluetoothGattCharacteristic val$characteristic -> g
    com.idevicesinc.sweetblue.P_BleServer_Listeners this$0 -> h
    void <init>(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,byte[],int,int,boolean,boolean,android.bluetooth.BluetoothGattCharacteristic) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleServer_Listeners$7 -> com.idevicesinc.sweetblue.av$7:
    android.bluetooth.BluetoothDevice val$device -> a
    byte[] val$value -> b
    int val$requestId -> c
    int val$offset -> d
    boolean val$preparedWrite -> e
    boolean val$responseNeeded -> f
    android.bluetooth.BluetoothGattDescriptor val$descriptor -> g
    com.idevicesinc.sweetblue.P_BleServer_Listeners this$0 -> h
    void <init>(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,byte[],int,int,boolean,boolean,android.bluetooth.BluetoothGattDescriptor) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleServer_Listeners$8 -> com.idevicesinc.sweetblue.av$8:
    android.bluetooth.BluetoothDevice val$device -> a
    int val$gattStatus -> b
    com.idevicesinc.sweetblue.P_BleServer_Listeners this$0 -> c
    void <init>(com.idevicesinc.sweetblue.P_BleServer_Listeners,android.bluetooth.BluetoothDevice,int) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_BleStateTracker -> com.idevicesinc.sweetblue.aw:
    com.idevicesinc.sweetblue.ManagerStateListener m_stateListener -> a
    com.idevicesinc.sweetblue.BleManager m_mngr -> b
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    void onStateChange(int,int,int,int) -> a
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.P_BluetoothCrashResolver -> com.idevicesinc.sweetblue.ax:
    boolean debugEnabled -> a
    boolean recoveryInProgress -> b
    boolean discoveryStartConfirmed -> c
    long lastBluetoothOffTime -> d
    long lastBluetoothTurningOnTime -> e
    long lastBluetoothCrashDetectionTime -> f
    int detectedCrashCount -> g
    int recoveryAttemptCount -> h
    boolean lastRecoverySucceeded -> i
    long lastStateSaveTime -> j
    android.content.Context context -> k
    com.idevicesinc.sweetblue.P_BluetoothCrashResolver$UpdateNotifier updateNotifier -> l
    java.util.Set distinctBluetoothAddresses -> m
    com.idevicesinc.sweetblue.P_BluetoothCrashResolver$DiscoveryCanceller discoveryCanceller -> n
    android.content.BroadcastReceiver receiver -> o
    void <init>(android.content.Context) -> <init>
    void start() -> a
    void stop() -> b
    void notifyScannedDevice(com.idevicesinc.sweetblue.P_NativeDeviceLayer,android.bluetooth.BluetoothAdapter$LeScanCallback) -> a
    void crashDetected() -> c
    boolean isRecoveryInProgress() -> d
    void forceFlush() -> e
    boolean isDebugEnabled() -> f
    int getCrashRiskDeviceCount() -> g
    void processStateChange() -> h
    void startRecovery() -> i
    void finishRecovery() -> j
    void saveState() -> k
    void loadState() -> l
    boolean access$100(com.idevicesinc.sweetblue.P_BluetoothCrashResolver) -> a
    boolean access$200(com.idevicesinc.sweetblue.P_BluetoothCrashResolver) -> b
    void access$300(com.idevicesinc.sweetblue.P_BluetoothCrashResolver) -> c
    boolean access$402(com.idevicesinc.sweetblue.P_BluetoothCrashResolver,boolean) -> a
    long access$502(com.idevicesinc.sweetblue.P_BluetoothCrashResolver,long) -> a
    long access$600(com.idevicesinc.sweetblue.P_BluetoothCrashResolver) -> d
    long access$500(com.idevicesinc.sweetblue.P_BluetoothCrashResolver) -> e
    long access$602(com.idevicesinc.sweetblue.P_BluetoothCrashResolver,long) -> b
    boolean access$400(com.idevicesinc.sweetblue.P_BluetoothCrashResolver) -> f
com.idevicesinc.sweetblue.P_BluetoothCrashResolver$1 -> com.idevicesinc.sweetblue.ax$1:
    com.idevicesinc.sweetblue.P_BluetoothCrashResolver this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_BluetoothCrashResolver) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.idevicesinc.sweetblue.P_BluetoothCrashResolver$DiscoveryCanceller -> com.idevicesinc.sweetblue.ax$a:
    com.idevicesinc.sweetblue.P_BluetoothCrashResolver this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_BluetoothCrashResolver) -> <init>
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPreExecute() -> onPreExecute
    void onProgressUpdate(java.lang.Void[]) -> b
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void <init>(com.idevicesinc.sweetblue.P_BluetoothCrashResolver,com.idevicesinc.sweetblue.P_BluetoothCrashResolver$1) -> <init>
com.idevicesinc.sweetblue.P_BluetoothCrashResolver$UpdateNotifier -> com.idevicesinc.sweetblue.ax$b:
    void dataUpdated() -> a
com.idevicesinc.sweetblue.P_BondManager -> com.idevicesinc.sweetblue.ay:
    java.lang.Object[] OVERRIDE_UNBONDED_STATES -> a
    java.lang.Object[] OVERRIDE_BONDING_STATES -> b
    java.lang.Object[] OVERRIDE_EMPTY_STATES -> c
    com.idevicesinc.sweetblue.BleDevice m_device -> d
    com.idevicesinc.sweetblue.BleDevice$BondListener m_listener -> e
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    void setListener(com.idevicesinc.sweetblue.BleDevice$BondListener) -> a
    void onBondTaskStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    void onNativeUnbond(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> a
    void onNativeBonding(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> b
    void onNativeBond(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> c
    boolean failConnection(com.idevicesinc.sweetblue.BleDevice$BondListener$Status) -> a
    java.lang.Object[] getOverrideBondStatesForDisconnect(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status) -> a
    void onNativeBondFailed(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,com.idevicesinc.sweetblue.BleDevice$BondListener$Status,int) -> a
    void saveNeedsBondingIfDesired() -> a
    void onNativeBondFailed_common(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> d
    boolean bondIfNeeded(java.util.UUID,com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$CharacteristicEventType) -> a
    boolean applyPlease_BondFilter(com.idevicesinc.sweetblue.BleDeviceConfig$BondFilter$Please) -> a
    com.idevicesinc.sweetblue.BleDevice$BondListener$BondEvent invokeCallback(com.idevicesinc.sweetblue.BleDevice$BondListener$Status,int,com.idevicesinc.sweetblue.utils.State$ChangeIntent) -> a
    void invokeCallback(com.idevicesinc.sweetblue.BleDevice$BondListener$BondEvent) -> a
    java.lang.Object[] getNativeBondingStateOverrides() -> b
    boolean isNativelyBondingOrBonded() -> c
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_ClientManager -> com.idevicesinc.sweetblue.az:
    int[] CONNECTING_OR_CONNECTED -> a
    com.idevicesinc.sweetblue.BleServer m_server -> b
    java.util.HashSet m_allConnectingOrConnectedClients -> c
    void <init>(com.idevicesinc.sweetblue.BleServer) -> <init>
    void onConnecting(java.lang.String) -> a
    void onConnected(java.lang.String) -> b
    void getClients(com.idevicesinc.sweetblue.utils.ForEach_Void,int) -> a
    void getClients_private(com.idevicesinc.sweetblue.utils.ForEach_Void,java.util.Iterator) -> a
    java.util.Iterator getClients(int) -> a
    int getClientCount(int) -> b
    java.util.HashSet access$000(com.idevicesinc.sweetblue.P_ClientManager) -> a
    com.idevicesinc.sweetblue.BleServer access$100(com.idevicesinc.sweetblue.P_ClientManager) -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_ClientManager$ClientIterator -> com.idevicesinc.sweetblue.az$a:
    int m_stateMask -> b
    java.lang.String m_next -> c
    java.lang.String m_returned -> d
    java.util.Iterator m_all -> e
    com.idevicesinc.sweetblue.P_ClientManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_ClientManager,int) -> <init>
    void findNext() -> b
    boolean hasNext() -> hasNext
    java.lang.String next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.idevicesinc.sweetblue.P_ConnectionFailManager -> com.idevicesinc.sweetblue.ba:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener m_connectionFailListener -> b
    int m_failCount -> c
    com.idevicesinc.sweetblue.BleDeviceState m_highestStateReached_total -> d
    java.lang.Long m_timeOfFirstConnect -> e
    java.lang.Long m_timeOfLastConnectFail -> f
    java.lang.Integer m_pendingConnectionRetry -> g
    java.util.ArrayList m_history -> h
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    void onExplicitDisconnect() -> a
    boolean hasPendingConnectionFailEvent() -> b
    int getPendingConnectionFailRetry() -> c
    void clearPendingRetry() -> d
    void onFullyInitialized() -> e
    void onExplicitConnectionStarted() -> f
    void resetFailCount() -> g
    int onConnectionFailed(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Status,com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$Timing,boolean,int,int,com.idevicesinc.sweetblue.BleDeviceState,com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void addToHistory(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent) -> b
    int invokeCallback(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent) -> a
    void setListener(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener) -> a
    int access$002(com.idevicesinc.sweetblue.P_ConnectionFailManager,int) -> a
    com.idevicesinc.sweetblue.BleDeviceState access$102(com.idevicesinc.sweetblue.P_ConnectionFailManager,com.idevicesinc.sweetblue.BleDeviceState) -> a
    java.lang.Long access$202(com.idevicesinc.sweetblue.P_ConnectionFailManager,java.lang.Long) -> a
    java.lang.Long access$302(com.idevicesinc.sweetblue.P_ConnectionFailManager,java.lang.Long) -> b
    java.util.ArrayList access$400(com.idevicesinc.sweetblue.P_ConnectionFailManager) -> a
com.idevicesinc.sweetblue.P_ConnectionFailManager$1 -> com.idevicesinc.sweetblue.ba$1:
    com.idevicesinc.sweetblue.P_ConnectionFailManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_ConnectionFailManager) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_DeviceManager -> com.idevicesinc.sweetblue.bb:
    java.util.HashMap m_map -> a
    java.util.ArrayList m_list -> b
    com.idevicesinc.sweetblue.P_Logger m_logger -> c
    com.idevicesinc.sweetblue.BleManager m_mngr -> d
    boolean m_updating -> e
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    boolean has(com.idevicesinc.sweetblue.BleDevice) -> a
    com.idevicesinc.sweetblue.BleDevice get(int) -> a
    com.idevicesinc.sweetblue.BleDevice get(java.lang.String) -> a
    void add(com.idevicesinc.sweetblue.BleDevice) -> b
    void remove(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.P_DeviceManager) -> a
    void update(double) -> a
    void disconnectAllForTurnOff(com.idevicesinc.sweetblue.PE_TaskPriority) -> a
    void rediscoverDevicesAfterBleTurningBackOn() -> a
    void reconnectDevicesAfterBleTurningBackOn() -> b
    void undiscoverAllForTurnOff(com.idevicesinc.sweetblue.P_DeviceManager,com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> a
    void undiscoverDevice(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleManager$DiscoveryListener,com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> a
    void undiscoverAndRemove(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleManager$DiscoveryListener,com.idevicesinc.sweetblue.P_DeviceManager,com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> a
    void purgeStaleDevices(double,com.idevicesinc.sweetblue.P_DeviceManager,com.idevicesinc.sweetblue.BleManager$DiscoveryListener) -> a
    boolean hasDevice(com.idevicesinc.sweetblue.BleDeviceState[]) -> a
com.idevicesinc.sweetblue.P_DeviceServiceManager -> com.idevicesinc.sweetblue.bc:
    com.idevicesinc.sweetblue.BleDevice m_device -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newNoMatchingTargetEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,byte[],java.util.UUID,java.util.UUID,java.util.UUID) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent getEarlyOutEvent(java.util.UUID,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.utils.FutureData,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type modifyResultType(android.bluetooth.BluetoothGattCharacteristic,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type) -> a
    int getProperty(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type) -> a
    android.bluetooth.BluetoothGattService getServiceDirectlyFromNativeNode(java.util.UUID) -> a
    java.util.List getNativeServiceList_original() -> a
com.idevicesinc.sweetblue.P_DeviceServiceManager$1 -> com.idevicesinc.sweetblue.bc$1:
    int[] $SwitchMap$com$idevicesinc$sweetblue$BleDevice$ReadWriteListener$Type -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_DeviceStateTracker -> com.idevicesinc.sweetblue.bd:
    com.idevicesinc.sweetblue.DeviceStateListener m_stateListener -> a
    com.idevicesinc.sweetblue.BleDevice m_device -> b
    boolean m_forShortTermReconnect -> c
    boolean m_syncing -> d
    void <init>(com.idevicesinc.sweetblue.BleDevice,boolean) -> <init>
    void setListener(com.idevicesinc.sweetblue.DeviceStateListener) -> a
    void sync(com.idevicesinc.sweetblue.P_DeviceStateTracker) -> a
    void onStateChange(int,int,int,int) -> a
    void append_assert(com.idevicesinc.sweetblue.utils.State) -> b
    java.lang.String toString() -> toString
com.idevicesinc.sweetblue.P_DiskOptionsManager -> com.idevicesinc.sweetblue.be:
    android.content.Context m_context -> a
    java.util.HashMap m_inMemoryDb_lastDisconnect -> b
    java.util.HashMap m_inMemoryDb_needsBonding -> c
    java.util.HashMap m_inMemoryDb_name -> d
    java.util.HashMap[] m_inMemoryDbs -> e
    void <init>(android.content.Context) -> <init>
    android.content.SharedPreferences prefs(com.idevicesinc.sweetblue.P_DiskOptionsManager$E_Namespace) -> a
    void saveLastDisconnect(java.lang.String,com.idevicesinc.sweetblue.utils.State$ChangeIntent,boolean) -> a
    com.idevicesinc.sweetblue.utils.State$ChangeIntent loadLastDisconnect(java.lang.String,boolean) -> a
    void saveNeedsBonding(java.lang.String,boolean) -> b
    boolean loadNeedsBonding(java.lang.String,boolean) -> c
    void saveName(java.lang.String,java.lang.String,boolean) -> a
    java.lang.String loadName(java.lang.String,boolean) -> d
com.idevicesinc.sweetblue.P_DiskOptionsManager$E_Namespace -> com.idevicesinc.sweetblue.be$a:
    com.idevicesinc.sweetblue.P_DiskOptionsManager$E_Namespace LAST_DISCONNECT -> a
    com.idevicesinc.sweetblue.P_DiskOptionsManager$E_Namespace NEEDS_BONDING -> b
    com.idevicesinc.sweetblue.P_DiskOptionsManager$E_Namespace DEVICE_NAME -> c
    java.lang.String m_key -> d
    com.idevicesinc.sweetblue.P_DiskOptionsManager$E_Namespace[] $VALUES -> e
    com.idevicesinc.sweetblue.P_DiskOptionsManager$E_Namespace[] values() -> values
    com.idevicesinc.sweetblue.P_DiskOptionsManager$E_Namespace valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String key() -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_GattLayer -> com.idevicesinc.sweetblue.bf:
    void setGatt(android.bluetooth.BluetoothGatt) -> a
    com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh closeGatt() -> c
    android.bluetooth.BluetoothGatt getGatt() -> a
    java.lang.Boolean getAuthRetryValue() -> b
    boolean equals(android.bluetooth.BluetoothGatt) -> b
    java.util.List getNativeServiceList(com.idevicesinc.sweetblue.P_Logger) -> a
    android.bluetooth.BluetoothGattService getService(java.util.UUID,com.idevicesinc.sweetblue.P_Logger) -> a
    boolean isGattNull() -> d
    android.bluetooth.BluetoothGatt connect(com.idevicesinc.sweetblue.P_NativeDeviceLayer,android.content.Context,boolean,android.bluetooth.BluetoothGattCallback) -> a
    void disconnect() -> f
    boolean requestMtu(int) -> a
    boolean refreshGatt() -> e
    boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic) -> a
    boolean setCharValue(android.bluetooth.BluetoothGattCharacteristic,byte[]) -> a
    boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic) -> b
    boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean) -> a
    boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor) -> a
    boolean setDescValue(android.bluetooth.BluetoothGattDescriptor,byte[]) -> a
    boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor) -> b
    boolean requestConnectionPriority(com.idevicesinc.sweetblue.BleConnectionPriority) -> a
    boolean discoverServices() -> g
    boolean executeReliableWrite() -> h
    boolean readRemoteRssi() -> i
com.idevicesinc.sweetblue.P_GattLayerFactory -> com.idevicesinc.sweetblue.bg:
    com.idevicesinc.sweetblue.P_GattLayer newInstance(com.idevicesinc.sweetblue.BleDevice) -> b
com.idevicesinc.sweetblue.P_HistoricalDataManager -> com.idevicesinc.sweetblue.bh:
    byte[] EMPTY_BYTE_ARRAY -> a
    com.idevicesinc.sweetblue.utils.EmptyIterator EMPTY_ITERATOR -> b
    java.lang.Object LIST_CREATE_MUTEX -> c
    java.util.HashMap m_lists -> d
    com.idevicesinc.sweetblue.BleNode m_endPoint -> e
    java.lang.String m_macAddress -> f
    com.idevicesinc.sweetblue.utils.UpdateLoop s_updateLoop -> g
    com.idevicesinc.sweetblue.BleNode$HistoricalDataLoadListener m_defaultListener -> h
    com.idevicesinc.sweetblue.P_HistoricalDataManager_PreviousUuids m_previousUuidsWithDataAdded -> i
    void <init>(com.idevicesinc.sweetblue.BleNode,java.lang.String) -> <init>
    com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDatabase getDatabase() -> a
    com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDataList getList_createIfNotExists(java.util.UUID) -> a
    void add_single(java.util.UUID,byte[],com.idevicesinc.sweetblue.utils.EpochTime,com.idevicesinc.sweetblue.BleNodeConfig$HistoricalDataLogFilter$Source) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_HistoricalDataManager_PreviousUuids -> com.idevicesinc.sweetblue.bi:
    java.lang.String m_macAddress -> a
    android.content.Context m_context -> b
    java.util.Set m_uuids -> c
    boolean m_loaded -> d
    void <init>(android.content.Context,java.lang.String) -> <init>
    void addUuid(java.util.UUID) -> a
    android.content.SharedPreferences prefs() -> a
    void load() -> b
    void save() -> c
com.idevicesinc.sweetblue.P_Logger -> com.idevicesinc.sweetblue.bj:
    java.lang.String[] m_debugThreadNamePool -> a
    int m_poolIndex -> b
    java.util.HashMap m_threadNames -> c
    java.util.HashMap m_gattStatusCodes -> d
    java.util.HashMap m_gattConnStates -> e
    java.util.HashMap m_gattBleStates -> f
    java.util.HashMap m_gattBondStates -> g
    java.util.HashMap m_unbondReasonCodes -> h
    boolean m_enabled -> i
    com.idevicesinc.sweetblue.utils.UuidNameMap_ListWrapper m_nameMap -> j
    com.idevicesinc.sweetblue.SweetLogger m_logger -> k
    com.idevicesinc.sweetblue.BleManager m_mgr -> l
    void <init>(com.idevicesinc.sweetblue.BleManager,java.lang.String[],java.util.List,boolean,com.idevicesinc.sweetblue.SweetLogger) -> <init>
    void printBuildInfo() -> a
    boolean isEnabled() -> b
    java.lang.String getThreadName(int) -> a
    void setMainThread(int) -> b
    void setUpdateThread(int) -> c
    java.lang.StackTraceElement getSoonestTrace() -> c
    java.lang.StackTraceElement getSoonestTrace(java.lang.StackTraceElement[]) -> a
    java.lang.String prefixMessage(java.lang.String,java.lang.String) -> c
    void log(int,java.lang.String) -> a
    void log_status(int) -> d
    void log_status(int,java.lang.String) -> b
    void log(int,java.lang.String,java.lang.String) -> a
    void log_private(int,java.lang.String,java.lang.String,java.lang.StackTraceElement) -> a
    void w(java.lang.String,java.lang.String) -> a
    void d(java.lang.String) -> a
    void i(java.lang.String) -> b
    void e(java.lang.String) -> c
    void w(java.lang.String) -> d
    java.lang.String gattConn(int) -> e
    void initConnStates() -> d
    java.lang.String gattStatus(int) -> f
    void initGattStatusCodes() -> e
    java.lang.String gattBleState(int) -> g
    void initGattBleStates() -> f
    java.lang.String gattUnbondReason(int) -> h
    void initUnbondReasonCodes() -> g
    java.lang.String gattBondState(int) -> i
    void initGattBondStates() -> h
    void initFromReflection(java.lang.Class,java.lang.String,java.util.HashMap) -> a
    java.lang.String uuidToString(java.util.UUID) -> e
    java.lang.String descriptorName(java.util.UUID) -> a
    java.lang.String charName(java.util.UUID) -> b
    java.lang.String serviceName(java.util.UUID) -> c
    java.lang.String uuidName(java.util.UUID) -> d
    java.lang.String uuidName(java.lang.String) -> e
    java.lang.String uuidName(java.lang.String,java.lang.String) -> b
    void checkPlease(java.lang.Object,java.lang.Class) -> a
com.idevicesinc.sweetblue.P_NativeBleStateTracker -> com.idevicesinc.sweetblue.bk:
    com.idevicesinc.sweetblue.BleManager$NativeStateListener m_stateListener -> a
    com.idevicesinc.sweetblue.BleManager m_mngr -> b
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    void onStateChange(int,int,int,int) -> a
com.idevicesinc.sweetblue.P_NativeDeviceLayer -> com.idevicesinc.sweetblue.bl:
    com.idevicesinc.sweetblue.P_NativeDeviceLayer NULL -> a
    void setNativeDevice(android.bluetooth.BluetoothDevice) -> a
    int getBondState() -> a
    java.lang.String getAddress() -> b
    java.lang.String getName() -> c
    boolean createBond() -> d
    boolean isDeviceNull() -> g
    boolean removeBond() -> e
    boolean cancelBond() -> f
    boolean equals(com.idevicesinc.sweetblue.P_NativeDeviceLayer) -> a
    boolean createBondSneaky(java.lang.String,boolean) -> a
    android.bluetooth.BluetoothDevice getNativeDevice() -> h
    android.bluetooth.BluetoothGatt connect(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback) -> a
    void updateBleDevice(com.idevicesinc.sweetblue.BleDevice) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_NativeDeviceLayer$1 -> com.idevicesinc.sweetblue.bl$1:
    void <init>() -> <init>
    void setNativeDevice(android.bluetooth.BluetoothDevice) -> a
    int getBondState() -> a
    java.lang.String getAddress() -> b
    java.lang.String getName() -> c
    boolean createBond() -> d
    boolean isDeviceNull() -> g
    boolean removeBond() -> e
    boolean cancelBond() -> f
    boolean equals(com.idevicesinc.sweetblue.P_NativeDeviceLayer) -> a
    boolean createBondSneaky(java.lang.String,boolean) -> a
    android.bluetooth.BluetoothDevice getNativeDevice() -> h
    android.bluetooth.BluetoothGatt connect(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback) -> a
    void updateBleDevice(com.idevicesinc.sweetblue.BleDevice) -> a
com.idevicesinc.sweetblue.P_NativeDeviceLayerFactory -> com.idevicesinc.sweetblue.bm:
    com.idevicesinc.sweetblue.P_NativeDeviceLayer newInstance(com.idevicesinc.sweetblue.BleDevice) -> b
com.idevicesinc.sweetblue.P_NativeDeviceWrapper -> com.idevicesinc.sweetblue.bn:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    com.idevicesinc.sweetblue.P_NativeDeviceLayer m_device_native -> b
    java.lang.String m_address -> c
    java.lang.String m_name_native -> d
    java.lang.String m_name_normalized -> e
    java.lang.String m_name_debug -> f
    java.lang.String m_name_override -> g
    int m_bondState_cached -> h
    java.util.concurrent.atomic.AtomicInteger m_nativeConnectionState -> i
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.P_NativeDeviceLayer,java.lang.String,java.lang.String) -> <init>
    com.idevicesinc.sweetblue.BleManager getManager() -> n
    com.idevicesinc.sweetblue.P_Logger getLogger() -> o
    void updateNativeDevice(com.idevicesinc.sweetblue.P_NativeDeviceLayer,byte[]) -> a
    void setName_override(java.lang.String) -> a
    void updateNativeName(java.lang.String) -> b
    void updateName(java.lang.String,java.lang.String) -> a
    java.lang.String getAddress() -> a
    java.lang.String getDebugName() -> b
    android.bluetooth.BluetoothDevice getDevice() -> c
    android.bluetooth.BluetoothGatt getGatt() -> d
    void updateGattFromCallback(android.bluetooth.BluetoothGatt) -> b
    void updateNativeConnectionState(android.bluetooth.BluetoothGatt) -> a
    void updateNativeConnectionState(android.bluetooth.BluetoothGatt,java.lang.Integer) -> a
    int getNativeBondState() -> e
    boolean isNativelyBonding() -> f
    boolean isNativelyBonded() -> g
    boolean isNativelyUnbonded() -> h
    boolean isNativelyConnected() -> i
    boolean isNativelyConnecting() -> j
    boolean isNativelyDisconnecting() -> k
    int getNativeConnectionState() -> l
    int getConnectionState() -> m
    int performGetNativeState(java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.CountDownLatch) -> a
    void closeGattIfNeeded(boolean) -> a
    void closeGatt(boolean) -> b
    com.idevicesinc.sweetblue.P_GattLayer gattLayer() -> p
    android.bluetooth.BluetoothGatt gatt() -> q
    void setGatt(android.bluetooth.BluetoothGatt) -> c
com.idevicesinc.sweetblue.P_NativeManagerLayer -> com.idevicesinc.sweetblue.bo:
    int getConnectionState(com.idevicesinc.sweetblue.P_NativeDeviceLayer,int) -> a
    boolean startDiscovery() -> a
    boolean cancelDiscovery() -> i
    boolean isManagerNull() -> b
    boolean disable() -> c
    boolean enable() -> d
    void resetManager(android.content.Context) -> a
    int getState() -> e
    int getBleState() -> f
    java.util.Set getBondedDevices() -> h
    android.bluetooth.BluetoothAdapter getNativeAdaptor() -> j
    android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,com.idevicesinc.sweetblue.P_BleServer_Listeners) -> a
    android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser() -> g
    boolean isLocationEnabledForScanning_byOsServices() -> k
    boolean isLocationEnabledForScanning_byRuntimePermissions() -> l
    boolean isLocationEnabledForScanning() -> m
    boolean isBluetoothEnabled() -> n
    void startLScan(int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.compat.L_Util$ScanCallback) -> a
    void startMScan(int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.compat.L_Util$ScanCallback) -> b
    boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback) -> a
    void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback) -> b
    android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String) -> a
com.idevicesinc.sweetblue.P_NativeServerWrapper -> com.idevicesinc.sweetblue.bp:
    com.idevicesinc.sweetblue.BleServer m_server -> a
    com.idevicesinc.sweetblue.BleManager m_mngr -> b
    android.bluetooth.BluetoothGattServer m_native -> c
    java.lang.String m_name -> d
    java.util.HashMap m_nativeConnectionStates -> e
    java.util.HashSet m_ignoredDisconnects -> f
    void <init>(com.idevicesinc.sweetblue.BleServer) -> <init>
    void ignoreNextImplicitDisconnect(java.lang.String) -> a
    boolean shouldIgnoreImplicitDisconnect(java.lang.String) -> b
    void clearImplicitDisconnectIgnoring(java.lang.String) -> c
    void closeServer() -> a
    boolean openServer() -> b
    void assertThatAllClientsAreDisconnected() -> d
    boolean isDisconnecting(java.lang.String) -> d
    boolean isDisconnected(java.lang.String) -> e
    boolean isConnected(java.lang.String) -> f
    boolean isConnecting(java.lang.String) -> g
    boolean isConnectingOrConnected(java.lang.String) -> h
    boolean isDisconnectingOrDisconnected(java.lang.String) -> i
    void clearAllConnectionStates() -> e
    int getNativeState(java.lang.String) -> j
    android.bluetooth.BluetoothGattServer getNative() -> c
    void updateNativeConnectionState(java.lang.String,int) -> a
    void updateNativeConnectionState(android.bluetooth.BluetoothDevice) -> a
com.idevicesinc.sweetblue.P_PollManager -> com.idevicesinc.sweetblue.bq:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    java.util.ArrayList m_entries -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    void clear() -> a
    void update(double) -> a
    void onCharacteristicChangedFromNativeNotify(java.util.UUID,java.util.UUID,byte[]) -> a
    int getNotifyState(java.util.UUID,java.util.UUID) -> a
    void onNotifyStateChange(java.util.UUID,java.util.UUID,int) -> a
    void resetNotifyStates() -> b
    void enableNotifications_assumesWeAreConnected() -> c
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newAlreadyEnabledEvent(android.bluetooth.BluetoothGattCharacteristic,java.util.UUID,java.util.UUID) -> a
com.idevicesinc.sweetblue.P_PollManager$CallbackEntry -> com.idevicesinc.sweetblue.bq$a:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    com.idevicesinc.sweetblue.P_PollManager$PollingReadListener m_pollingReadListener -> b
    double m_interval -> c
    java.util.UUID m_charUuid -> d
    java.util.UUID m_serviceUuid -> e
    boolean m_usingNotify -> f
    int m_notifyState -> g
    double m_timeTracker -> h
    boolean m_waitingForResponse -> i
    boolean trackingChanges() -> a
    boolean usingNotify() -> b
    boolean isFor(java.util.UUID,java.util.UUID) -> a
    void onCharacteristicChangedFromNativeNotify(byte[]) -> a
    void onSuccessOrFailure() -> c
    void update(double) -> a
    java.util.UUID access$200(com.idevicesinc.sweetblue.P_PollManager$CallbackEntry) -> a
    com.idevicesinc.sweetblue.P_PollManager$PollingReadListener access$400(com.idevicesinc.sweetblue.P_PollManager$CallbackEntry) -> b
    int access$602(com.idevicesinc.sweetblue.P_PollManager$CallbackEntry,int) -> a
    int access$600(com.idevicesinc.sweetblue.P_PollManager$CallbackEntry) -> c
    java.util.UUID access$700(com.idevicesinc.sweetblue.P_PollManager$CallbackEntry) -> d
com.idevicesinc.sweetblue.P_PollManager$PollingReadListener -> com.idevicesinc.sweetblue.bq$b:
    com.idevicesinc.sweetblue.P_PollManager$CallbackEntry m_entry -> c
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_overrideListener -> d
    void onEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
com.idevicesinc.sweetblue.P_PollManager$TrackingWrappingReadListener -> com.idevicesinc.sweetblue.bq$c:
    byte[] m_lastValue -> d
    void onEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
com.idevicesinc.sweetblue.P_PostManager -> com.idevicesinc.sweetblue.br:
    com.idevicesinc.sweetblue.P_SweetHandler m_uiHandler -> a
    com.idevicesinc.sweetblue.P_SweetHandler m_updateHandler -> b
    com.idevicesinc.sweetblue.BleManager m_manager -> c
    void <init>(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.P_SweetHandler,com.idevicesinc.sweetblue.P_SweetHandler) -> <init>
    void postToMain(java.lang.Runnable) -> a
    void postCallback(java.lang.Runnable) -> b
    void postToUpdateThread(java.lang.Runnable) -> c
    void runOrPostToUpdateThread(java.lang.Runnable) -> d
    void forcePostToUpdate(java.lang.Runnable) -> e
    void postToUpdateThreadDelayed(java.lang.Runnable,long) -> a
    void removeUpdateCallbacks(java.lang.Runnable) -> f
    com.idevicesinc.sweetblue.P_SweetHandler getUIHandler() -> a
    boolean isOnSweetBlueThread() -> b
com.idevicesinc.sweetblue.P_ReconnectManager -> com.idevicesinc.sweetblue.bs:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    double m_totalTime -> b
    int m_attemptCount -> c
    double m_delay -> d
    double m_timeTracker -> e
    int m_gattStatusOfOriginalDisconnect -> f
    com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent m_connectionFailEvent -> g
    boolean m_isShortTerm -> h
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter$ReconnectEvent EVENT -> i
    void <init>(com.idevicesinc.sweetblue.BleDevice,boolean) -> <init>
    void attemptStart(int) -> a
    int gattStatusOfOriginalDisconnect() -> a
    boolean isRunning() -> b
    com.idevicesinc.sweetblue.BleNodeConfig$ReconnectFilter getFilter() -> d
    double getNextTime(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent) -> b
    void onConnectionFailed(com.idevicesinc.sweetblue.BleDevice$ConnectionFailListener$ConnectionFailEvent) -> a
    void update(double) -> a
    void doPersistCheck() -> e
    void stop() -> c
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_ReliableWriteManager -> com.idevicesinc.sweetblue.bt:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_listener -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    void onDisconnect() -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,boolean) -> a
    void onReliableWriteCompleted_unsolicited(android.bluetooth.BluetoothGatt,int) -> a
com.idevicesinc.sweetblue.P_RssiPollManager -> com.idevicesinc.sweetblue.bu:
    com.idevicesinc.sweetblue.BleDevice m_device -> a
    double m_timeTracker -> b
    double m_interval -> c
    boolean m_waitingOnResponse -> d
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_listener -> e
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    void start(double,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> a
    boolean isRunning() -> a
    void stop() -> b
    void update(double) -> a
    boolean access$002(com.idevicesinc.sweetblue.P_RssiPollManager,boolean) -> a
    double access$100(com.idevicesinc.sweetblue.P_RssiPollManager) -> a
    double access$102(com.idevicesinc.sweetblue.P_RssiPollManager,double) -> a
com.idevicesinc.sweetblue.P_RssiPollManager$CustomListener -> com.idevicesinc.sweetblue.bu$a:
    com.idevicesinc.sweetblue.P_RssiPollManager m_pollMngr -> c
    void <init>(com.idevicesinc.sweetblue.P_RssiPollManager,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.P_SweetHandler,boolean) -> <init>
    void onEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
com.idevicesinc.sweetblue.P_ScanFilterManager -> com.idevicesinc.sweetblue.bv:
    java.util.ArrayList m_filters -> a
    com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter m_default -> b
    com.idevicesinc.sweetblue.BleManager m_mngr -> c
    void <init>(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter) -> <init>
    void updateFilter(com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter) -> a
    void remove(com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter) -> b
    void add(com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter) -> c
    boolean makeEvent() -> a
    com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$Please allow(com.idevicesinc.sweetblue.P_Logger,com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$ScanEvent) -> a
    void stopScanningIfNeeded(com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter,com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter$Please) -> a
com.idevicesinc.sweetblue.P_ScanManager -> com.idevicesinc.sweetblue.bw:
    com.idevicesinc.sweetblue.BleManager m_manager -> a
    com.idevicesinc.sweetblue.P_ScanManager$PreLollipopScanCallback m_preLollipopScanCallback -> b
    com.idevicesinc.sweetblue.P_ScanManager$PostLollipopScanCallback m_postLollipopScanCallback -> c
    java.util.concurrent.atomic.AtomicReference mCurrentApi -> d
    java.util.concurrent.atomic.AtomicReference mCurrentPower -> e
    int m_retryCountMax -> f
    boolean m_triedToStartScanAfterTurnedOn -> g
    boolean m_doingInfiniteScan -> h
    boolean m_triedToStartScanAfterResume -> i
    double m_timeNotScanning -> j
    double m_classicLength -> k
    double m_timeClassicBoosting -> l
    int m_mode -> m
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    boolean classicBoost(double) -> a
    boolean startScan(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,double,boolean) -> a
    boolean startClassicDiscovery() -> f
    boolean startClassicBoost() -> g
    boolean isBleScanReady() -> h
    void stopNativeScan(com.idevicesinc.sweetblue.P_Task_Scan) -> a
    void postScanResult(android.bluetooth.BluetoothDevice,int,byte[]) -> a
    void postBatchScanResult(java.util.List) -> a
    boolean startScanPreLollipop(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent) -> a
    void setStateToScanning() -> i
    boolean startScanPostLollipop(double,boolean) -> a
    boolean tryClassicDiscovery(com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,boolean) -> a
    void resetTimeNotScanning() -> a
    boolean update(double,long) -> a
    void onResume() -> b
    void onPause() -> c
    boolean startLeScan() -> j
    void startLScan(int) -> a
    void startMScan(int) -> b
    void fail() -> k
    void stopScanPreLollipop() -> l
    void stopLeScan() -> m
    void stopScanPostLollipop() -> n
    void stopClassicDiscovery() -> o
    boolean isPostLollipopScan() -> d
    boolean isClassicScan() -> e
    com.idevicesinc.sweetblue.BleManager access$200(com.idevicesinc.sweetblue.P_ScanManager) -> a
    com.idevicesinc.sweetblue.P_ScanManager$PreLollipopScanCallback access$300(com.idevicesinc.sweetblue.P_ScanManager) -> b
    void access$400(com.idevicesinc.sweetblue.P_ScanManager) -> c
    boolean access$500(com.idevicesinc.sweetblue.P_ScanManager,com.idevicesinc.sweetblue.PA_StateTracker$E_Intent,boolean) -> a
    int access$602(com.idevicesinc.sweetblue.P_ScanManager,int) -> a
com.idevicesinc.sweetblue.P_ScanManager$1 -> com.idevicesinc.sweetblue.bw$1:
    android.bluetooth.BluetoothDevice val$device -> a
    com.idevicesinc.sweetblue.utils.Pointer val$name -> b
    int val$rssi -> c
    byte[] val$scanRecord -> d
    com.idevicesinc.sweetblue.P_ScanManager this$0 -> e
    void <init>(com.idevicesinc.sweetblue.P_ScanManager,android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.utils.Pointer,int,byte[]) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_ScanManager$2 -> com.idevicesinc.sweetblue.bw$2:
    java.util.List val$devices -> a
    com.idevicesinc.sweetblue.P_ScanManager this$0 -> b
    void <init>(com.idevicesinc.sweetblue.P_ScanManager,java.util.List) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_ScanManager$3 -> com.idevicesinc.sweetblue.bw$3:
    int[] $SwitchMap$com$idevicesinc$sweetblue$BleScanApi -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_ScanManager$PostLollipopScanCallback -> com.idevicesinc.sweetblue.bw$a:
    com.idevicesinc.sweetblue.P_ScanManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_ScanManager) -> <init>
    void onScanResult(int,com.idevicesinc.sweetblue.compat.L_Util$ScanResult) -> a
    void onBatchScanResults(java.util.List) -> a
    void onScanFailed(int) -> a
    void <init>(com.idevicesinc.sweetblue.P_ScanManager,com.idevicesinc.sweetblue.P_ScanManager$1) -> <init>
com.idevicesinc.sweetblue.P_ScanManager$PreLollipopScanCallback -> com.idevicesinc.sweetblue.bw$b:
    com.idevicesinc.sweetblue.P_ScanManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_ScanManager) -> <init>
    void onLeScan(android.bluetooth.BluetoothDevice,int,byte[]) -> onLeScan
    void <init>(com.idevicesinc.sweetblue.P_ScanManager,com.idevicesinc.sweetblue.P_ScanManager$1) -> <init>
com.idevicesinc.sweetblue.P_ServerConnectionFailEntry -> com.idevicesinc.sweetblue.bx:
    int m_failCount -> a
    java.lang.Long m_timeOfFirstConnect -> b
    java.lang.Long m_timeOfLastConnectFail -> c
    java.util.ArrayList m_history -> d
    com.idevicesinc.sweetblue.P_ServerConnectionFailManager m_mngr -> e
    void <init>(com.idevicesinc.sweetblue.P_ServerConnectionFailManager) -> <init>
    void onExplicitDisconnect() -> a
    void onExplicitConnectionStarted() -> b
    void resetFailCount() -> c
    void onNativeConnectFail(android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status,int) -> a
com.idevicesinc.sweetblue.P_ServerConnectionFailManager -> com.idevicesinc.sweetblue.by:
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener DEFAULT_CONNECTION_FAIL_LISTENER -> b
    com.idevicesinc.sweetblue.BleServer m_server -> a
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener m_connectionFailListener -> c
    java.util.HashMap m_entries -> d
    void <init>(com.idevicesinc.sweetblue.BleServer) -> <init>
    com.idevicesinc.sweetblue.P_ServerConnectionFailEntry getOrCreateEntry(java.lang.String) -> c
    void onExplicitDisconnect(java.lang.String) -> a
    void onExplicitConnectionStarted(java.lang.String) -> b
    void setListener(com.idevicesinc.sweetblue.BleServer$ConnectionFailListener) -> a
    void onNativeConnectFail(android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status,int) -> a
    int invokeCallback(com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$ConnectionFailEvent) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_ServerServiceManager -> com.idevicesinc.sweetblue.bz:
    com.idevicesinc.sweetblue.BleServer m_server -> b
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener m_listener -> c
    void <init>(com.idevicesinc.sweetblue.BleServer) -> <init>
    android.bluetooth.BluetoothGattService getServiceDirectlyFromNativeNode(java.util.UUID) -> a
    java.util.List getNativeServiceList_original() -> a
    void getTasks(com.idevicesinc.sweetblue.utils.ForEach_Breakable) -> a
    void removeAll(com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status) -> a
    void invokeListeners(com.idevicesinc.sweetblue.BleServer$ServiceAddListener$ServiceAddEvent,com.idevicesinc.sweetblue.BleServer$ServiceAddListener) -> a
com.idevicesinc.sweetblue.P_ServerServiceManager$2 -> com.idevicesinc.sweetblue.bz$1:
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status val$status -> a
    com.idevicesinc.sweetblue.P_ServerServiceManager this$0 -> b
    void <init>(com.idevicesinc.sweetblue.P_ServerServiceManager,com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status) -> <init>
    com.idevicesinc.sweetblue.utils.ForEach_Breakable$Please next(com.idevicesinc.sweetblue.P_Task_AddService) -> a
    com.idevicesinc.sweetblue.utils.ForEach_Breakable$Please next(java.lang.Object) -> a
com.idevicesinc.sweetblue.P_ServerStateTracker -> com.idevicesinc.sweetblue.ca:
    com.idevicesinc.sweetblue.BleServer$StateListener m_stateListener -> a
    com.idevicesinc.sweetblue.BleServer m_server -> b
    void <init>(com.idevicesinc.sweetblue.BleServer) -> <init>
    void setListener(com.idevicesinc.sweetblue.BleServer$StateListener) -> a
    com.idevicesinc.sweetblue.BleServerState getOldConnectionState(java.lang.String) -> a
    void doStateTransition(java.lang.String,com.idevicesinc.sweetblue.BleServerState,com.idevicesinc.sweetblue.BleServerState,com.idevicesinc.sweetblue.utils.State$ChangeIntent,int) -> a
    void fireEvent(com.idevicesinc.sweetblue.BleServer$StateListener$StateEvent) -> a
    int getStateMask(java.lang.String) -> b
com.idevicesinc.sweetblue.P_StringHandler -> com.idevicesinc.sweetblue.cb:
    java.lang.String DENYING_LOCATION_ACCESS -> a
    java.lang.String APP_NEEDS_PERMISSION -> b
    java.lang.String LOCATION_PERMISSION_TOAST -> c
    java.lang.String REQUIRES_LOCATION_PERMISSION -> d
    java.lang.String REQUIRES_LOCATION_PERMISSION_AND_SERVICES -> e
    java.lang.String LOCATION_SERVICES_NEEDS_ENABLING -> f
    java.lang.String LOCATION_SERVICES_TOAST -> g
    java.lang.String OK -> h
    java.lang.String DENY -> i
    java.lang.String ACCEPT -> j
    java.util.Map fallBackStrings -> k
    void initMap() -> a
    void checkMap() -> b
    java.lang.String getString(android.app.Activity,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction -> com.idevicesinc.sweetblue.cc:
    com.idevicesinc.sweetblue.utils.FutureData m_data -> a
    android.bluetooth.BluetoothGattDescriptor m_descriptor -> b
    boolean m_requiresBonding -> c
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_listener -> d
    java.util.List m_writeList -> e
    com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction$WriteListener m_internalListener -> f
    void <init>(com.idevicesinc.sweetblue.utils.FutureData,android.bluetooth.BluetoothGattDescriptor,boolean,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> <init>
    void start(com.idevicesinc.sweetblue.BleDevice) -> a
    java.util.List access$100(com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener access$200(com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction) -> b
com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction$1 -> com.idevicesinc.sweetblue.cc$1:
com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction$WriteListener -> com.idevicesinc.sweetblue.cc$a:
    com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction) -> <init>
    void onEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
    void <init>(com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction,com.idevicesinc.sweetblue.P_StripedWriteDescriptorTransaction$1) -> <init>
com.idevicesinc.sweetblue.P_StripedWriteTransaction -> com.idevicesinc.sweetblue.cd:
    com.idevicesinc.sweetblue.utils.FutureData m_data -> a
    android.bluetooth.BluetoothGattCharacteristic m_characteristic -> b
    boolean m_requiresBonding -> c
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_listener -> d
    java.util.List m_writeList -> e
    com.idevicesinc.sweetblue.P_StripedWriteTransaction$WriteListener m_internalListener -> f
    com.idevicesinc.sweetblue.DescriptorFilter m_descriptorFilter -> g
    void <init>(com.idevicesinc.sweetblue.utils.FutureData,android.bluetooth.BluetoothGattCharacteristic,boolean,com.idevicesinc.sweetblue.DescriptorFilter,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener) -> <init>
    void start(com.idevicesinc.sweetblue.BleDevice) -> a
    java.util.List access$100(com.idevicesinc.sweetblue.P_StripedWriteTransaction) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener access$200(com.idevicesinc.sweetblue.P_StripedWriteTransaction) -> b
com.idevicesinc.sweetblue.P_StripedWriteTransaction$1 -> com.idevicesinc.sweetblue.cd$1:
com.idevicesinc.sweetblue.P_StripedWriteTransaction$WriteListener -> com.idevicesinc.sweetblue.cd$a:
    com.idevicesinc.sweetblue.P_StripedWriteTransaction this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_StripedWriteTransaction) -> <init>
    void onEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
    void <init>(com.idevicesinc.sweetblue.P_StripedWriteTransaction,com.idevicesinc.sweetblue.P_StripedWriteTransaction$1) -> <init>
com.idevicesinc.sweetblue.P_SweetBlueThread -> com.idevicesinc.sweetblue.ce:
    java.util.concurrent.LinkedBlockingQueue m_runnables -> a
    java.lang.Thread thread -> b
    boolean m_running -> c
    void <init>() -> <init>
    void post(java.lang.Runnable) -> a
    void postDelayed(java.lang.Runnable,long) -> a
    void removeCallbacks(java.lang.Runnable) -> b
    java.lang.Thread getThread() -> a
    boolean access$200(com.idevicesinc.sweetblue.P_SweetBlueThread) -> a
    java.util.concurrent.LinkedBlockingQueue access$300(com.idevicesinc.sweetblue.P_SweetBlueThread) -> b
com.idevicesinc.sweetblue.P_SweetBlueThread$1 -> com.idevicesinc.sweetblue.ce$1:
com.idevicesinc.sweetblue.P_SweetBlueThread$HandlerRunner -> com.idevicesinc.sweetblue.ce$a:
    com.idevicesinc.sweetblue.P_SweetBlueThread this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_SweetBlueThread) -> <init>
    void run() -> run
    void <init>(com.idevicesinc.sweetblue.P_SweetBlueThread,com.idevicesinc.sweetblue.P_SweetBlueThread$1) -> <init>
com.idevicesinc.sweetblue.P_SweetBlueThread$SweetRunnable -> com.idevicesinc.sweetblue.ce$b:
    java.lang.Runnable m_runnable -> a
    long m_postedTime -> b
    long m_delay -> c
    boolean m_canceled -> d
    void <init>(java.lang.Runnable,long,long) -> <init>
    void run() -> a
    void cancel() -> b
    boolean ready(long) -> a
    java.lang.Runnable access$100(com.idevicesinc.sweetblue.P_SweetBlueThread$SweetRunnable) -> a
com.idevicesinc.sweetblue.P_SweetHandler -> com.idevicesinc.sweetblue.cf:
    void post(java.lang.Runnable) -> a
    void postDelayed(java.lang.Runnable,long) -> a
    void removeCallbacks(java.lang.Runnable) -> b
    java.lang.Thread getThread() -> a
com.idevicesinc.sweetblue.P_SweetUIHandler -> com.idevicesinc.sweetblue.cg:
    android.os.Handler m_handler -> a
    com.idevicesinc.sweetblue.P_SweetBlueThread m_thread -> b
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    void post(java.lang.Runnable) -> a
    void postDelayed(java.lang.Runnable,long) -> a
    void removeCallbacks(java.lang.Runnable) -> b
    java.lang.Thread getThread() -> a
com.idevicesinc.sweetblue.P_TaskQueue -> com.idevicesinc.sweetblue.ch:
    java.util.ArrayList m_queue -> a
    java.util.concurrent.atomic.AtomicReference m_current -> b
    long m_updateCount -> c
    com.idevicesinc.sweetblue.P_Logger m_logger -> d
    com.idevicesinc.sweetblue.BleManager m_mngr -> e
    double m_time -> f
    android.os.Handler m_executeHandler -> g
    int m_currentOrdinal -> h
    void <init>(com.idevicesinc.sweetblue.BleManager) -> <init>
    int assignOrdinal() -> a
    android.os.Handler getExecuteHandler() -> b
    int getCurrentOrdinal() -> c
    com.idevicesinc.sweetblue.PA_Task peek() -> d
    void initHandler() -> j
    boolean tryCancellingCurrentTask(com.idevicesinc.sweetblue.PA_Task) -> c
    boolean tryInterruptingCurrentTask(com.idevicesinc.sweetblue.PA_Task) -> d
    boolean tryInsertingIntoQueue(com.idevicesinc.sweetblue.PA_Task) -> e
    void addToBack(com.idevicesinc.sweetblue.PA_Task) -> f
    void softlyCancelTasks(com.idevicesinc.sweetblue.PA_Task) -> a
    void addAtIndex(com.idevicesinc.sweetblue.PA_Task,int) -> a
    void add(com.idevicesinc.sweetblue.PA_Task) -> b
    void add_updateThread(com.idevicesinc.sweetblue.PA_Task) -> g
    boolean update(double) -> a
    boolean dequeue() -> k
    long getUpdateCount() -> e
    com.idevicesinc.sweetblue.PA_Task getCurrent() -> f
    boolean endCurrentTask(com.idevicesinc.sweetblue.PE_TaskState) -> a
    void interrupt(java.lang.Class,com.idevicesinc.sweetblue.BleManager) -> a
    boolean succeed(java.lang.Class,com.idevicesinc.sweetblue.BleManager) -> b
    boolean succeed(java.lang.Class,com.idevicesinc.sweetblue.BleDevice) -> a
    boolean succeed(java.lang.Class,com.idevicesinc.sweetblue.BleServer) -> a
    boolean fail(java.lang.Class,com.idevicesinc.sweetblue.BleManager) -> c
    boolean fail(java.lang.Class,com.idevicesinc.sweetblue.BleDevice) -> b
    boolean fail(java.lang.Class,com.idevicesinc.sweetblue.BleServer) -> b
    boolean tryEndingTask(java.lang.Class,com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleServer,com.idevicesinc.sweetblue.PE_TaskState) -> a
    void tryEndingTask(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    void tryEndingTask_updateThread(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> b
    boolean isCurrent(java.lang.Class,com.idevicesinc.sweetblue.BleManager) -> d
    boolean isCurrent(java.lang.Class,com.idevicesinc.sweetblue.BleDevice) -> c
    boolean isInQueue(java.lang.Class,com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleServer) -> a
    int getSize() -> g
    java.util.List getRaw() -> h
    boolean isInQueue(java.lang.Class,com.idevicesinc.sweetblue.BleManager) -> e
    boolean isInQueue(java.lang.Class,com.idevicesinc.sweetblue.BleDevice) -> d
    boolean isCurrentOrInQueue(java.lang.Class,com.idevicesinc.sweetblue.BleManager) -> f
    com.idevicesinc.sweetblue.PA_Task get(java.lang.Class,com.idevicesinc.sweetblue.BleManager) -> g
    com.idevicesinc.sweetblue.PA_Task getCurrent(java.lang.Class,com.idevicesinc.sweetblue.BleDevice) -> e
    com.idevicesinc.sweetblue.PA_Task getCurrent(java.lang.Class,com.idevicesinc.sweetblue.BleManager) -> h
    com.idevicesinc.sweetblue.PA_Task getCurrent(java.lang.Class,com.idevicesinc.sweetblue.BleServer) -> c
    void print() -> i
    void clearQueueOf$removeFromQueue(int) -> a
    void clearQueueOf(java.lang.Class,com.idevicesinc.sweetblue.BleManager) -> i
    void clearQueueOf(java.lang.Class,com.idevicesinc.sweetblue.BleDevice,int) -> a
    java.lang.String toString() -> toString
    android.os.Handler access$002(com.idevicesinc.sweetblue.P_TaskQueue,android.os.Handler) -> a
    void access$100(com.idevicesinc.sweetblue.P_TaskQueue,com.idevicesinc.sweetblue.PA_Task) -> a
    java.util.ArrayList access$200(com.idevicesinc.sweetblue.P_TaskQueue) -> a
    boolean access$300(com.idevicesinc.sweetblue.P_TaskQueue) -> b
    void access$400(com.idevicesinc.sweetblue.P_TaskQueue,com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
com.idevicesinc.sweetblue.P_TaskQueue$1 -> com.idevicesinc.sweetblue.ch$1:
    com.idevicesinc.sweetblue.P_TaskQueue this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_TaskQueue) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_TaskQueue$2 -> com.idevicesinc.sweetblue.ch$2:
    com.idevicesinc.sweetblue.PA_Task val$newTask -> a
    com.idevicesinc.sweetblue.P_TaskQueue this$0 -> b
    void <init>(com.idevicesinc.sweetblue.P_TaskQueue,com.idevicesinc.sweetblue.PA_Task) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_TaskQueue$3 -> com.idevicesinc.sweetblue.ch$3:
    com.idevicesinc.sweetblue.P_TaskQueue this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_TaskQueue) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_TaskQueue$4 -> com.idevicesinc.sweetblue.ch$4:
    com.idevicesinc.sweetblue.PA_Task val$task -> a
    com.idevicesinc.sweetblue.PE_TaskState val$endingState -> b
    com.idevicesinc.sweetblue.P_TaskQueue this$0 -> c
    void <init>(com.idevicesinc.sweetblue.P_TaskQueue,com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_Task_AddService -> com.idevicesinc.sweetblue.ci:
    android.bluetooth.BluetoothGattService m_service -> a
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener m_addListener -> b
    boolean m_cancelledInTheMiddleOfExecuting -> c
    void execute() -> u
    void onNotExecutable() -> w
    android.bluetooth.BluetoothGattService getService() -> I
    void fail(com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status,int) -> a
    void failImmediately(com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status) -> b
    void invokeFailCallback(com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status,int) -> b
    void succeed(int) -> a
    boolean cancelledInTheMiddleOfExecuting() -> J
    void onServiceAdded(int,android.bluetooth.BluetoothGattService) -> a
    void cancel(com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status) -> a
    com.idevicesinc.sweetblue.BleServer$ServiceAddListener$Status getCancelStatusType() -> K
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
com.idevicesinc.sweetblue.P_Task_Advertise -> com.idevicesinc.sweetblue.cj:
    com.idevicesinc.sweetblue.BleAdvertisingPacket m_packet -> a
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode m_mode -> b
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleTransmissionPower m_power -> c
    com.idevicesinc.sweetblue.utils.Interval m_timeOut -> d
    android.bluetooth.le.AdvertiseCallback adCallback -> e
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    void execute() -> u
    void stopAdvertising() -> I
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    void invokeStartAdvertising() -> J
    com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode determineMode(com.idevicesinc.sweetblue.BleAdvertisingSettings$BleAdvertisingMode,com.idevicesinc.sweetblue.utils.Interval,boolean) -> a
com.idevicesinc.sweetblue.P_Task_BatteryLevel -> com.idevicesinc.sweetblue.ck:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newReadWriteEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    void update(double) -> c
    void executeReadOrWrite() -> I
    void onCharacteristicRead(android.bluetooth.BluetoothGatt,java.util.UUID,byte[],int) -> b
com.idevicesinc.sweetblue.P_Task_Bond -> com.idevicesinc.sweetblue.cl:
    com.idevicesinc.sweetblue.PE_TaskPriority m_priority -> a
    boolean m_explicit -> b
    boolean m_partOfConnection -> c
    com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior m_lockBehavior -> d
    int m_failReason -> e
    void <init>(com.idevicesinc.sweetblue.BleDevice,boolean,boolean,com.idevicesinc.sweetblue.PA_Task$I_StateListener,com.idevicesinc.sweetblue.PE_TaskPriority,com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,boolean,boolean,com.idevicesinc.sweetblue.PA_Task$I_StateListener,com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior) -> <init>
    boolean isExplicit() -> H
    void execute() -> u
    boolean createBond() -> J
    boolean createBond_theNormalWay() -> K
    boolean createBond_theSneakyWay() -> L
    boolean isMoreImportantThan(com.idevicesinc.sweetblue.PA_Task) -> a
    void onNativeFail(int) -> a
    int getFailReason() -> I
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    boolean isSoftlyCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> e
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior -> com.idevicesinc.sweetblue.cl$a:
    com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior PASSES -> a
    com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior DOES_NOT_PASS -> b
    com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior[] $VALUES -> c
    com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior[] values() -> values
    com.idevicesinc.sweetblue.P_Task_Bond$E_TransactionLockBehavior valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_Task_BondPopupHack -> com.idevicesinc.sweetblue.cm:
    double scanTime -> a
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    void execute() -> u
    void update(double) -> c
    void failWithoutRetry() -> q
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
com.idevicesinc.sweetblue.P_Task_Connect -> com.idevicesinc.sweetblue.cn:
    com.idevicesinc.sweetblue.PE_TaskPriority m_priority -> a
    boolean m_explicit -> b
    int m_gattStatus -> c
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage m_autoConnectUsage -> d
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener,boolean,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    void execute() -> u
    com.idevicesinc.sweetblue.BleNode$ConnectionFailListener$AutoConnectUsage getAutoConnectUsage() -> I
    boolean isExplicit() -> H
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    void onNativeFail(int) -> a
    int getGattStatus() -> J
    boolean isCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> d
    boolean isSoftlyCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> e
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_ConnectServer -> com.idevicesinc.sweetblue.co:
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status m_status -> c
    void <init>(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener,boolean,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    com.idevicesinc.sweetblue.BleServer$ConnectionFailListener$Status getStatus() -> J
    void execute() -> u
    boolean isCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> d
    boolean isSoftlyCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> e
    void onNativeFail(int) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_CrashResolver -> com.idevicesinc.sweetblue.cp:
    com.idevicesinc.sweetblue.P_BluetoothCrashResolver m_resolver -> a
    boolean m_startedRecovery -> b
    boolean m_partOfReset -> c
    boolean isForReset() -> I
    void execute() -> u
    boolean isCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> d
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    void update(double) -> c
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    com.idevicesinc.sweetblue.P_BluetoothCrashResolver access$000(com.idevicesinc.sweetblue.P_Task_CrashResolver) -> a
    boolean access$102(com.idevicesinc.sweetblue.P_Task_CrashResolver,boolean) -> a
com.idevicesinc.sweetblue.P_Task_CrashResolver$1 -> com.idevicesinc.sweetblue.cp$1:
    com.idevicesinc.sweetblue.P_Task_CrashResolver this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_Task_CrashResolver) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_Task_Disconnect -> com.idevicesinc.sweetblue.cq:
    com.idevicesinc.sweetblue.PE_TaskPriority m_priority -> a
    boolean m_explicit -> b
    int m_gattStatus -> c
    boolean m_cancellableByConnect -> d
    java.lang.Integer m_overrideOrdinal -> e
    boolean m_saveLastDisconnect -> f
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener,boolean,com.idevicesinc.sweetblue.PE_TaskPriority,boolean) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener,boolean,com.idevicesinc.sweetblue.PE_TaskPriority,boolean,boolean) -> <init>
    int getOrdinal() -> h
    void setOverrideOrdinal(int) -> a
    boolean isExplicit() -> H
    boolean shouldSaveLastDisconnect() -> I
    void execute() -> u
    int getGattStatus() -> J
    void onNativeSuccess(int) -> b
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    boolean isCancellable() -> K
    boolean isSoftlyCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> e
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_DisconnectServer -> com.idevicesinc.sweetblue.cr:
    void <init>(com.idevicesinc.sweetblue.BleServer,android.bluetooth.BluetoothDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener,boolean,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    void execute() -> u
    void onNativeSuccess(int) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    boolean isSoftlyCancellableBy(com.idevicesinc.sweetblue.PA_Task) -> e
com.idevicesinc.sweetblue.P_Task_DiscoverServices -> com.idevicesinc.sweetblue.cs:
    int m_gattStatus -> a
    boolean m_gattRefresh -> b
    double m_curGattDelay -> c
    double m_gattDelayTarget -> d
    boolean m_discoverAttempted -> e
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener,boolean,com.idevicesinc.sweetblue.utils.Interval) -> <init>
    void execute() -> u
    void update(double) -> c
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    void onNativeFail(int) -> a
    int getGattStatus() -> I
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_ExecuteReliableWrite -> com.idevicesinc.sweetblue.ct:
    com.idevicesinc.sweetblue.PE_TaskPriority m_priority -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_listener -> b
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,boolean) -> a
    void invokeListeners(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int) -> a
    void onNotExecutable() -> w
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    void execute() -> u
    void onReliableWriteCompleted(android.bluetooth.BluetoothGatt,int) -> a
    void fail(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int) -> b
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
com.idevicesinc.sweetblue.P_Task_Read -> com.idevicesinc.sweetblue.cu:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type m_type -> d
    void <init>(com.idevicesinc.sweetblue.BleDevice,android.bluetooth.BluetoothGattCharacteristic,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,boolean,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,boolean,com.idevicesinc.sweetblue.DescriptorFilter,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newReadWriteEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    void executeReadOrWrite() -> I
    void onCharacteristicRead(android.bluetooth.BluetoothGatt,java.util.UUID,byte[],int) -> b
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_ReadDescriptor -> com.idevicesinc.sweetblue.cv:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type m_type -> d
    java.util.UUID m_descriptorUuid -> e
    void <init>(com.idevicesinc.sweetblue.BleDevice,android.bluetooth.BluetoothGattDescriptor,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type,boolean,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newReadWriteEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    java.util.UUID getDescUuid() -> d
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target getDefaultTarget() -> J
    void executeReadOrWrite() -> I
    void onDescriptorRead(android.bluetooth.BluetoothGatt,java.util.UUID,byte[],int) -> a
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_ReadRssi -> com.idevicesinc.sweetblue.cw:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_readWriteListener -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type m_type -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,int) -> a
    void onNotExecutable() -> w
    void fail(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int) -> a
    void execute() -> u
    void succeed(int,int) -> a
    void onReadRemoteRssi(android.bluetooth.BluetoothGatt,int,int) -> a
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_RequestConnectionPriority -> com.idevicesinc.sweetblue.cx:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_readWriteListener -> a
    com.idevicesinc.sweetblue.BleConnectionPriority m_connectionPriority -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority,com.idevicesinc.sweetblue.BleConnectionPriority) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleConnectionPriority) -> a
    void onNotExecutable() -> w
    void fail(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int) -> a
    void execute() -> u
    void update(double) -> c
    void succeed(com.idevicesinc.sweetblue.BleConnectionPriority) -> a
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_RequestMtu -> com.idevicesinc.sweetblue.cy:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_readWriteListener -> a
    int m_mtu -> b
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority,int) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,int) -> a
    void onNotExecutable() -> w
    void fail(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int) -> a
    void execute() -> u
    void succeed(int,int) -> a
    void onMtuChanged(android.bluetooth.BluetoothGatt,int,int) -> a
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_Scan -> com.idevicesinc.sweetblue.cz:
    boolean m_explicit -> a
    boolean m_isPoll -> b
    double m_scanTime -> c
    com.idevicesinc.sweetblue.PE_TaskPriority m_priority -> d
    void <init>(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.PA_Task$I_StateListener,double,boolean,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    com.idevicesinc.sweetblue.PA_StateTracker$E_Intent getIntent() -> I
    double getInitialTimeout() -> b
    void execute() -> u
    boolean isClassicBoosted() -> J
    void onClassicBoostFinished() -> K
    boolean isBluetoothEnabled() -> L
    double getMinimumScanTime() -> M
    void update(double) -> c
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    boolean isSelfInterruptableBy(com.idevicesinc.sweetblue.PA_Task) -> g
    boolean isInterruptableBy(com.idevicesinc.sweetblue.PA_Task) -> c
    boolean isExplicit() -> H
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_SendNotification -> com.idevicesinc.sweetblue.da:
    android.bluetooth.BluetoothDevice m_nativeDevice -> b
    com.idevicesinc.sweetblue.BleServer$OutgoingListener m_responseListener -> c
    com.idevicesinc.sweetblue.utils.FutureData m_futureData -> d
    java.util.UUID m_charUuid -> e
    java.util.UUID m_serviceUuid -> f
    boolean m_confirm -> g
    byte[] m_data_sent -> h
    byte[] data_sent() -> J
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    void execute() -> u
    void onNotExecutable() -> w
    com.idevicesinc.sweetblue.BleServer$ExchangeListener$Type getType() -> K
    void fail(com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status,int) -> a
    void invokeFailCallback(com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status,int) -> b
    void succeed(int) -> a
    void onNotificationSent(android.bluetooth.BluetoothDevice,int) -> a
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
com.idevicesinc.sweetblue.P_Task_SendReadWriteResponse -> com.idevicesinc.sweetblue.db:
    com.idevicesinc.sweetblue.BleServer$IncomingListener$IncomingEvent m_requestEvent -> b
    com.idevicesinc.sweetblue.BleServer$IncomingListener$Please m_please -> c
    byte[] m_data_sent -> d
    void <init>(com.idevicesinc.sweetblue.BleServer,com.idevicesinc.sweetblue.BleServer$IncomingListener$IncomingEvent,com.idevicesinc.sweetblue.BleServer$IncomingListener$Please) -> <init>
    byte[] data_sent() -> J
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    void fail(com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status) -> a
    void invokeFailCallback(com.idevicesinc.sweetblue.BleServer$OutgoingListener$Status) -> b
    void succeed() -> k
    void execute() -> u
    void onNotExecutable() -> w
    void update(double) -> c
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_ToggleNotify -> com.idevicesinc.sweetblue.dc:
    int Type_NOTIFY -> d
    int Type_INDICATE -> e
    boolean m_enable -> f
    java.util.UUID m_descUuid -> g
    byte[] m_writeValue -> h
    void <init>(com.idevicesinc.sweetblue.BleDevice,android.bluetooth.BluetoothGattCharacteristic,boolean,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    byte[] getWriteValue() -> P
    byte[] getWriteValue(android.bluetooth.BluetoothGattCharacteristic,boolean) -> a
    void executeReadOrWrite() -> I
    void fail(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,java.util.UUID,java.util.UUID) -> a
    void succeed() -> k
    void onDescriptorWrite(android.bluetooth.BluetoothGatt,java.util.UUID,int) -> a
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    java.util.UUID getDescUuid() -> d
    boolean isMoreImportantThan(com.idevicesinc.sweetblue.PA_Task) -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Type getReadWriteType() -> Q
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newReadWriteEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.P_Task_TurnBleOff -> com.idevicesinc.sweetblue.dd:
    boolean m_implicit -> a
    void <init>(com.idevicesinc.sweetblue.BleManager,boolean) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleManager,boolean,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    boolean isImplicit() -> I
    void execute() -> u
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
    boolean isMoreImportantThan(com.idevicesinc.sweetblue.PA_Task) -> a
com.idevicesinc.sweetblue.P_Task_TurnBleOn -> com.idevicesinc.sweetblue.de:
    boolean m_implicit -> a
    void <init>(com.idevicesinc.sweetblue.BleManager,boolean) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleManager,boolean,com.idevicesinc.sweetblue.PA_Task$I_StateListener) -> <init>
    boolean isImplicit() -> I
    boolean isExplicit() -> H
    void execute() -> u
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_TxnLock -> com.idevicesinc.sweetblue.df:
    com.idevicesinc.sweetblue.BleTransaction m_txn -> a
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleTransaction) -> <init>
    double getInitialTimeout() -> b
    com.idevicesinc.sweetblue.BleTransaction getTxn() -> I
    void execute() -> u
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    boolean isInterruptableBy(com.idevicesinc.sweetblue.PA_Task) -> c
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_Unbond -> com.idevicesinc.sweetblue.dg:
    com.idevicesinc.sweetblue.PE_TaskPriority m_priority -> a
    void <init>(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.PA_Task$I_StateListener,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    void execute() -> u
    boolean removeBond() -> I
    boolean cancelBondProcess() -> J
    boolean isExplicit() -> H
    com.idevicesinc.sweetblue.PE_TaskPriority getPriority() -> E
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_Write -> com.idevicesinc.sweetblue.dh:
    byte[] m_data -> d
    com.idevicesinc.sweetblue.utils.FutureData m_futureData -> e
    void <init>(com.idevicesinc.sweetblue.BleDevice,android.bluetooth.BluetoothGattCharacteristic,com.idevicesinc.sweetblue.utils.FutureData,boolean,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    void <init>(com.idevicesinc.sweetblue.BleDevice,java.util.UUID,java.util.UUID,com.idevicesinc.sweetblue.DescriptorFilter,com.idevicesinc.sweetblue.utils.FutureData,boolean,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newReadWriteEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    void executeReadOrWrite() -> I
    void onCharacteristicWrite(android.bluetooth.BluetoothGatt,java.util.UUID,int) -> a
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_Task_WriteDescriptor -> com.idevicesinc.sweetblue.di:
    java.util.UUID m_descriptorUuid -> d
    com.idevicesinc.sweetblue.utils.FutureData m_futureData -> e
    byte[] m_data -> f
    void <init>(com.idevicesinc.sweetblue.BleDevice,android.bluetooth.BluetoothGattDescriptor,com.idevicesinc.sweetblue.utils.FutureData,boolean,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.PE_TaskPriority) -> <init>
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent newReadWriteEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Status,int,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target,java.util.UUID,java.util.UUID,java.util.UUID) -> a
    java.util.UUID getDescUuid() -> d
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$Target getDefaultTarget() -> J
    void executeReadOrWrite() -> I
    void onDescriptorWrite(android.bluetooth.BluetoothGatt,java.util.UUID,int) -> a
    void onStateChange(com.idevicesinc.sweetblue.PA_Task,com.idevicesinc.sweetblue.PE_TaskState) -> a
    com.idevicesinc.sweetblue.BleTask getTaskType() -> a
com.idevicesinc.sweetblue.P_TransactionManager -> com.idevicesinc.sweetblue.dj:
    com.idevicesinc.sweetblue.PI_EndListener m_txnEndListener -> a
    com.idevicesinc.sweetblue.BleDevice m_device -> h
    com.idevicesinc.sweetblue.BleTransaction$Auth m_authTxn -> b
    com.idevicesinc.sweetblue.BleTransaction$Init m_initTxn -> c
    com.idevicesinc.sweetblue.BleTransaction$Ota m_otaTxn -> d
    com.idevicesinc.sweetblue.BleTransaction m_anonTxn -> e
    com.idevicesinc.sweetblue.BleTransaction m_current -> f
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent m_failReason -> g
    void <init>(com.idevicesinc.sweetblue.BleDevice) -> <init>
    void start(com.idevicesinc.sweetblue.BleTransaction) -> a
    void start_common(com.idevicesinc.sweetblue.BleDevice,com.idevicesinc.sweetblue.BleTransaction) -> a
    com.idevicesinc.sweetblue.BleTransaction getCurrent() -> a
    void clearQueueLock() -> b
    void clearQueueLock_updateThread() -> f
    void cancelOtaTransaction() -> c
    void cancelAllTransactions() -> d
    void update(double) -> a
    void onConnect(com.idevicesinc.sweetblue.BleTransaction$Auth,com.idevicesinc.sweetblue.BleTransaction$Init) -> a
    void resetReadWriteResult() -> g
    void onReadWriteResult(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void onReadWriteResultCallbacksCalled() -> e
    void performAnonTransaction(com.idevicesinc.sweetblue.BleTransaction) -> b
    void runAuthOrInitTxnIfNeeded(int,java.lang.Object[]) -> a
    com.idevicesinc.sweetblue.BleDevice access$000(com.idevicesinc.sweetblue.P_TransactionManager) -> a
    void access$100(com.idevicesinc.sweetblue.P_TransactionManager) -> b
com.idevicesinc.sweetblue.P_TransactionManager$1 -> com.idevicesinc.sweetblue.dj$1:
    com.idevicesinc.sweetblue.P_TransactionManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_TransactionManager) -> <init>
    void onTransactionEnd(com.idevicesinc.sweetblue.BleTransaction,com.idevicesinc.sweetblue.BleTransaction$EndReason,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
com.idevicesinc.sweetblue.P_TransactionManager$2 -> com.idevicesinc.sweetblue.dj$2:
    com.idevicesinc.sweetblue.P_TransactionManager this$0 -> a
    void <init>(com.idevicesinc.sweetblue.P_TransactionManager) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.P_UhOhThrottler -> com.idevicesinc.sweetblue.dk:
    java.util.HashMap m_lastTimesCalled -> a
    com.idevicesinc.sweetblue.BleManager$UhOhListener m_uhOhListener -> b
    double m_throttle -> c
    com.idevicesinc.sweetblue.BleManager m_mngr -> d
    double m_timeTracker -> e
    void <init>(com.idevicesinc.sweetblue.BleManager,double) -> <init>
    void uhOh(com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh) -> a
    void uhOh(com.idevicesinc.sweetblue.BleManager$UhOhListener$UhOh,double) -> a
    void update(double) -> a
com.idevicesinc.sweetblue.P_WakeLockManager -> com.idevicesinc.sweetblue.dl:
    int m_count -> a
    android.os.PowerManager$WakeLock m_wakeLock -> b
    com.idevicesinc.sweetblue.BleManager m_mngr -> c
    void <init>(com.idevicesinc.sweetblue.BleManager,boolean) -> <init>
    void clear() -> a
    void push() -> b
    void releaseLock() -> d
    void pop() -> c
com.idevicesinc.sweetblue.P_WrappingReadWriteListener -> com.idevicesinc.sweetblue.dm:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener m_listener -> c
    void <init>(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.P_SweetHandler,boolean) -> <init>
    void onEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
com.idevicesinc.sweetblue.P_WrappingReadWriteListener$1 -> com.idevicesinc.sweetblue.dm$1:
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener val$listener -> a
    com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent val$result -> b
    com.idevicesinc.sweetblue.P_WrappingReadWriteListener this$0 -> c
    void <init>(com.idevicesinc.sweetblue.P_WrappingReadWriteListener,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener,com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.ReadWriteListener -> com.idevicesinc.sweetblue.dn:
com.idevicesinc.sweetblue.ScanOptions -> com.idevicesinc.sweetblue.do:
    com.idevicesinc.sweetblue.utils.Interval m_scanTime -> a
    com.idevicesinc.sweetblue.utils.Interval m_pauseTime -> b
    com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter m_scanFilter -> c
    com.idevicesinc.sweetblue.BleManager$DiscoveryListener m_discoveryListener -> d
    boolean m_isPoll -> e
    boolean m_isPeriodic -> f
    boolean m_isPriorityScan -> g
    void <init>() -> <init>
    com.idevicesinc.sweetblue.ScanOptions scanFor(com.idevicesinc.sweetblue.utils.Interval) -> a
    com.idevicesinc.sweetblue.ScanOptions withScanFilter(com.idevicesinc.sweetblue.BleManagerConfig$ScanFilter) -> a
    com.idevicesinc.sweetblue.ScanOptions withDiscoveryListener(com.idevicesinc.sweetblue.BleManager$DiscoveryListener) -> a
    com.idevicesinc.sweetblue.ScanOptions asPoll(boolean) -> a
com.idevicesinc.sweetblue.SweetLogger -> com.idevicesinc.sweetblue.dp:
    void onLogEntry(int,java.lang.String,java.lang.String) -> a
com.idevicesinc.sweetblue.backend.Backend_Modules -> com.idevicesinc.sweetblue.a.a:
    java.lang.Class HISTORICAL_DATA_LIST -> a
    java.lang.Class HISTORICAL_DATABASE -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDataList -> com.idevicesinc.sweetblue.a.a.a:
    void init(com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDatabase,com.idevicesinc.sweetblue.utils.UpdateLoop,java.lang.String,java.util.UUID,java.lang.String,boolean) -> a
    void add_single(com.idevicesinc.sweetblue.utils.HistoricalData,int,long) -> a
    int getCount(com.idevicesinc.sweetblue.utils.EpochTimeRange) -> a
    void delete_fromMemoryAndDatabase(com.idevicesinc.sweetblue.utils.EpochTimeRange,long) -> a
com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDataList_Default -> com.idevicesinc.sweetblue.a.a.b:
    java.util.Iterator EMPTY_ITERATOR -> a
    com.idevicesinc.sweetblue.utils.HistoricalDataCursor EMPTY_CURSOR -> b
    com.idevicesinc.sweetblue.utils.HistoricalData m_data -> c
    java.lang.String m_macAddress -> d
    com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDatabase m_database -> e
    boolean m_hasShownWarning_read -> f
    boolean m_hasShownWarning_write -> g
    void <init>() -> <init>
    void init(com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDatabase,com.idevicesinc.sweetblue.utils.UpdateLoop,java.lang.String,java.util.UUID,java.lang.String,boolean) -> a
    boolean isDataInRange(com.idevicesinc.sweetblue.utils.EpochTimeRange) -> b
    void printWarning_write() -> b
    void printWarning() -> a
    void add_single(com.idevicesinc.sweetblue.utils.HistoricalData,int,long) -> a
    int getCount(com.idevicesinc.sweetblue.utils.EpochTimeRange) -> a
    void delete_fromMemoryOnly(com.idevicesinc.sweetblue.utils.EpochTimeRange,long) -> b
    void delete_fromMemoryAndDatabase(com.idevicesinc.sweetblue.utils.EpochTimeRange,long) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDatabase -> com.idevicesinc.sweetblue.a.a.c:
    void init(com.idevicesinc.sweetblue.BleManager) -> a
    boolean doesDataExist(java.lang.String,java.util.UUID) -> a
com.idevicesinc.sweetblue.backend.historical.Backend_HistoricalDatabase_Default -> com.idevicesinc.sweetblue.a.a.d:
    com.idevicesinc.sweetblue.utils.HistoricalDataCursor EMPTY_CURSOR -> a
    boolean m_hasShownWarning -> b
    void <init>(android.content.Context) -> <init>
    void <init>() -> <init>
    void printWarning() -> a
    void init(com.idevicesinc.sweetblue.BleManager) -> a
    boolean doesDataExist(java.lang.String,java.util.UUID) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.backend.historical.P_HistoricalDataCursor_Empty -> com.idevicesinc.sweetblue.a.a.e:
    byte[] EMPTY_BLOB -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.compat.K_Util -> com.idevicesinc.sweetblue.b.a:
    boolean createBond(android.bluetooth.BluetoothDevice) -> a
com.idevicesinc.sweetblue.compat.L_Util -> com.idevicesinc.sweetblue.b.b:
    com.idevicesinc.sweetblue.compat.L_Util$ScanCallback m_UserCallback -> a
    android.bluetooth.le.ScanCallback m_callback -> b
    com.idevicesinc.sweetblue.compat.L_Util$ScanResult toLScanResult(android.bluetooth.le.ScanResult) -> b
    java.util.List toLScanResults(java.util.List) -> b
    boolean requestMtu(android.bluetooth.BluetoothGatt,int) -> a
    android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser(android.bluetooth.BluetoothAdapter) -> a
    void stopNativeScan(android.bluetooth.BluetoothAdapter) -> b
    boolean requestConnectionPriority(android.bluetooth.BluetoothGatt,int) -> b
    void startNativeScan(android.bluetooth.BluetoothAdapter,int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.compat.L_Util$ScanCallback) -> a
    android.bluetooth.le.ScanSettings$Builder buildSettings(android.bluetooth.BluetoothAdapter,int,com.idevicesinc.sweetblue.utils.Interval) -> a
    void startScan(android.bluetooth.BluetoothAdapter,android.bluetooth.le.ScanSettings,com.idevicesinc.sweetblue.compat.L_Util$ScanCallback) -> a
    com.idevicesinc.sweetblue.compat.L_Util$ScanCallback access$300() -> a
    com.idevicesinc.sweetblue.compat.L_Util$ScanResult access$400(android.bluetooth.le.ScanResult) -> a
    java.util.List access$500(java.util.List) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.compat.L_Util$1 -> com.idevicesinc.sweetblue.b.b$1:
    void <init>() -> <init>
    void onScanResult(int,android.bluetooth.le.ScanResult) -> onScanResult
    void onBatchScanResults(java.util.List) -> onBatchScanResults
    void onScanFailed(int) -> onScanFailed
com.idevicesinc.sweetblue.compat.L_Util$ScanCallback -> com.idevicesinc.sweetblue.b.b$a:
    void onScanResult(int,com.idevicesinc.sweetblue.compat.L_Util$ScanResult) -> a
    void onBatchScanResults(java.util.List) -> a
    void onScanFailed(int) -> a
com.idevicesinc.sweetblue.compat.L_Util$ScanResult -> com.idevicesinc.sweetblue.b.b$b:
    android.bluetooth.BluetoothDevice device -> a
    int rssi -> b
    byte[] record -> c
    void <init>() -> <init>
    android.bluetooth.BluetoothDevice getDevice() -> a
    int getRssi() -> b
    byte[] getRecord() -> c
    android.bluetooth.BluetoothDevice access$002(com.idevicesinc.sweetblue.compat.L_Util$ScanResult,android.bluetooth.BluetoothDevice) -> a
    int access$102(com.idevicesinc.sweetblue.compat.L_Util$ScanResult,int) -> a
    byte[] access$202(com.idevicesinc.sweetblue.compat.L_Util$ScanResult,byte[]) -> a
com.idevicesinc.sweetblue.compat.M_Util -> com.idevicesinc.sweetblue.b.c:
    boolean shouldShowRequestPermissionRationale(android.app.Activity) -> a
    void requestPermissions(android.app.Activity,int) -> a
    void startNativeScan(android.bluetooth.BluetoothAdapter,int,com.idevicesinc.sweetblue.utils.Interval,com.idevicesinc.sweetblue.compat.L_Util$ScanCallback) -> a
    android.bluetooth.BluetoothGatt connect(android.bluetooth.BluetoothDevice,boolean,android.content.Context,android.bluetooth.BluetoothGattCallback) -> a
com.idevicesinc.sweetblue.simple_write.MyActivity -> com.idevicesinc.sweetblue.simple_write.MyActivity:
    java.util.UUID MY_UUID -> a
    byte[] MY_DATA -> b
    com.idevicesinc.sweetblue.BleManager m_bleManager -> c
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    com.idevicesinc.sweetblue.BleManager access$000(com.idevicesinc.sweetblue.simple_write.MyActivity) -> a
    java.util.UUID access$100() -> a
    byte[] access$200() -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.simple_write.MyActivity$1 -> com.idevicesinc.sweetblue.simple_write.MyActivity$1:
    com.idevicesinc.sweetblue.simple_write.MyActivity this$0 -> a
    void <init>(com.idevicesinc.sweetblue.simple_write.MyActivity) -> <init>
    void onEvent(com.idevicesinc.sweetblue.BleManager$DiscoveryListener$DiscoveryEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
com.idevicesinc.sweetblue.simple_write.MyActivity$1$1 -> com.idevicesinc.sweetblue.simple_write.MyActivity$1$1:
    com.idevicesinc.sweetblue.simple_write.MyActivity$1 this$1 -> a
    void <init>(com.idevicesinc.sweetblue.simple_write.MyActivity$1) -> <init>
    void onEvent(com.idevicesinc.sweetblue.BleDevice$StateListener$StateEvent) -> a
com.idevicesinc.sweetblue.simple_write.MyActivity$1$1$1 -> com.idevicesinc.sweetblue.simple_write.MyActivity$1$1$1:
    com.idevicesinc.sweetblue.simple_write.MyActivity$1$1 this$2 -> a
    void <init>(com.idevicesinc.sweetblue.simple_write.MyActivity$1$1) -> <init>
    void onEvent(com.idevicesinc.sweetblue.BleDevice$ReadWriteListener$ReadWriteEvent) -> a
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
com.idevicesinc.sweetblue.utils.BitwiseEnum -> com.idevicesinc.sweetblue.c.a:
    int bit() -> a
    boolean overlaps(int) -> a
    int ordinal() -> ordinal
com.idevicesinc.sweetblue.utils.BleScanInfo -> com.idevicesinc.sweetblue.c.b:
    int m_manufactuerId -> a
    byte[] m_manufacturerData -> b
    com.idevicesinc.sweetblue.utils.Pointer m_advFlags -> c
    com.idevicesinc.sweetblue.utils.Pointer m_txPower -> d
    java.util.List m_serviceUuids -> e
    java.util.Map m_serviceData -> f
    java.lang.String m_localName -> g
    void <init>() -> <init>
    void <init>(com.idevicesinc.sweetblue.utils.Pointer,com.idevicesinc.sweetblue.utils.Pointer,java.util.List,int,byte[],java.util.Map,java.lang.String) -> <init>
    void clearServiceData() -> a
    void populateServiceData(java.util.Map) -> a
    void clearServiceUUIDs() -> b
    void populateServiceUUIDs(java.util.List) -> a
    void setManufacturerId(int) -> a
    void setManufacturerData(byte[]) -> a
    int getManufacturerId() -> c
    byte[] getManufacturerData() -> d
    com.idevicesinc.sweetblue.utils.Pointer getAdvFlags() -> e
    com.idevicesinc.sweetblue.utils.Pointer getTxPower() -> f
    java.util.List getServiceUUIDS() -> g
    java.util.Map getServiceData() -> h
com.idevicesinc.sweetblue.utils.BluetoothEnabler -> com.idevicesinc.sweetblue.c.c:
    com.idevicesinc.sweetblue.utils.BluetoothEnabler s_instance -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter m_enablerFilter -> b
    java.lang.ref.WeakReference m_defaultActivity -> c
    android.app.Application$ActivityLifecycleCallbacks m_lifecycleCallback -> d
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please m_lastPlease -> e
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage m_currentStage -> f
    boolean m_performingSystemCall -> g
    boolean m_isForegrounded -> h
    com.idevicesinc.sweetblue.utils.BluetoothEnabler start(android.app.Activity) -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler start(android.app.Activity,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter) -> a
    boolean hasActivity() -> e
    boolean isEnabled(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage) -> b
    void <init>(android.app.Activity,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter) -> <init>
    void dispatchEvent(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status) -> a
    void handlePleaseResponse_STEP1_maybeEarlyOutCauseNotNeeded(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> a
    void updateBleManagerScanState() -> f
    void updateBleScanState() -> g
    void handlePleaseResponse_STEP2_maybeEarlyOutCauseAlreadyEnabled(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> b
    void handlePleaseResponse_STEP3_maybeEarlyOutFromPleaseResponse(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> c
    void handlePleaseResponse_STEP3a_maybeShowClosingDialog(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> d
    void handlePleaseResponse_STEP4_maybeEarlyOutCausePermissionsNeeded(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> e
    void handlePleaseResponse_STEP5_maybeShowAppDialog(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> f
    void handlePleaseResponse_STEP6_maybeEarlyOutFromDialogResponse(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please,boolean) -> a
    void handlePleaseResponse_STEP7_launchIntent(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> g
    void handlePleaseResponse_STEP8_maybeShowToast(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> h
    void handlePleaseResponse_STEP9_receiveActivityResult(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please,int) -> a
    boolean isEnabled(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage) -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage getStage() -> a
    boolean isDone() -> b
    com.idevicesinc.sweetblue.BleManager bleMngr() -> h
    void onSystemCallStart() -> i
    void onSystemCallEnd() -> j
    android.app.Application$ActivityLifecycleCallbacks newLifecycleCallbacks() -> k
    void setNewFilter(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter) -> a
    boolean access$200(com.idevicesinc.sweetblue.BleManager,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage) -> a
    boolean access$300() -> c
    com.idevicesinc.sweetblue.utils.BluetoothEnabler access$400() -> d
    java.lang.ref.WeakReference access$500(com.idevicesinc.sweetblue.utils.BluetoothEnabler) -> a
    void access$1200(com.idevicesinc.sweetblue.utils.BluetoothEnabler,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please,boolean) -> a
    boolean access$1702(com.idevicesinc.sweetblue.utils.BluetoothEnabler,boolean) -> a
    boolean access$1700(com.idevicesinc.sweetblue.utils.BluetoothEnabler) -> b
    boolean access$1800(com.idevicesinc.sweetblue.utils.BluetoothEnabler) -> c
    void access$1900(com.idevicesinc.sweetblue.utils.BluetoothEnabler) -> d
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please access$2000(com.idevicesinc.sweetblue.utils.BluetoothEnabler) -> e
    void access$2100(com.idevicesinc.sweetblue.utils.BluetoothEnabler,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please,int) -> a
com.idevicesinc.sweetblue.utils.BluetoothEnabler$1 -> com.idevicesinc.sweetblue.c.c$1:
    com.idevicesinc.sweetblue.utils.BluetoothEnabler this$0 -> a
    void <init>(com.idevicesinc.sweetblue.utils.BluetoothEnabler) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.idevicesinc.sweetblue.utils.BluetoothEnabler$2 -> com.idevicesinc.sweetblue.c.c$2:
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please val$please -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler this$0 -> b
    void <init>(com.idevicesinc.sweetblue.utils.BluetoothEnabler,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.idevicesinc.sweetblue.utils.BluetoothEnabler$3 -> com.idevicesinc.sweetblue.c.c$3:
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please val$please -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler this$0 -> b
    void <init>(com.idevicesinc.sweetblue.utils.BluetoothEnabler,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.idevicesinc.sweetblue.utils.BluetoothEnabler$4 -> com.idevicesinc.sweetblue.c.c$4:
    com.idevicesinc.sweetblue.utils.BluetoothEnabler this$0 -> a
    void <init>(com.idevicesinc.sweetblue.utils.BluetoothEnabler) -> <init>
    void onActivityCreated(android.app.Activity,android.os.Bundle) -> onActivityCreated
    void onActivityStarted(android.app.Activity) -> onActivityStarted
    void onActivityStopped(android.app.Activity) -> onActivityStopped
    void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle) -> onActivitySaveInstanceState
    void onActivityDestroyed(android.app.Activity) -> onActivityDestroyed
    void onActivityPaused(android.app.Activity) -> onActivityPaused
    void onActivityResumed(android.app.Activity) -> onActivityResumed
com.idevicesinc.sweetblue.utils.BluetoothEnabler$5 -> com.idevicesinc.sweetblue.c.c$5:
    int[] $SwitchMap$com$idevicesinc$sweetblue$utils$BluetoothEnabler$BluetoothEnablerFilter$Stage -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter -> com.idevicesinc.sweetblue.c.c$a:
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please onEvent(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$BluetoothEnablerEvent) -> a
com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$BluetoothEnablerEvent -> com.idevicesinc.sweetblue.c.c$a$a:
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage m_stage -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage m_nextStage -> b
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status m_status -> c
    android.app.Activity m_activity -> d
    com.idevicesinc.sweetblue.utils.BluetoothEnabler m_enabler -> e
    java.lang.Object m_appData -> f
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage stage() -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage nextStage() -> b
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status status() -> c
    android.app.Activity activity() -> d
    com.idevicesinc.sweetblue.BleManager bleManager() -> e
    void <init>(android.app.Activity,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status,com.idevicesinc.sweetblue.utils.BluetoothEnabler,java.lang.Object) -> <init>
    boolean isEnabled(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage) -> a
    java.lang.String toString() -> toString
    void <init>(android.app.Activity,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status,com.idevicesinc.sweetblue.utils.BluetoothEnabler,java.lang.Object,com.idevicesinc.sweetblue.utils.BluetoothEnabler$1) -> <init>
com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please -> com.idevicesinc.sweetblue.c.c$a$b:
    int m_pleaseOption -> a
    android.app.Activity m_activity -> b
    java.lang.String m_dialogText -> c
    java.lang.String m_toastText -> d
    int m_requestCode -> e
    boolean m_implicitActivityResultHandling -> f
    java.lang.Object m_appData -> g
    void <init>(int) -> <init>
    boolean shouldPopDialog(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage) -> a
    boolean shouldShowToast(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage) -> b
    android.app.Activity activityOrDefault(android.app.Activity) -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please doNext() -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please stop() -> b
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please withDialog(java.lang.String) -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please withToast(java.lang.String) -> b
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please withImplicitActivityResultHandling() -> c
    java.lang.Object access$600(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> a
    int access$800(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> b
    boolean access$900(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage) -> a
    android.app.Activity access$1000(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please,android.app.Activity) -> a
    java.lang.String access$1100(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> c
    int access$1300(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> d
    boolean access$1400(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please,com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage) -> b
    java.lang.String access$1500(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> e
    boolean access$1600(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please) -> f
com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage -> com.idevicesinc.sweetblue.c.c$a$c:
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage NULL -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage START -> b
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage BLUETOOTH -> c
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage LOCATION_PERMISSION -> d
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage LOCATION_SERVICES -> e
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage[] $VALUES -> f
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage[] values() -> values
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage next() -> b
    boolean isNull() -> N
    boolean isLocationRelated() -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage access$000(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Stage) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status -> com.idevicesinc.sweetblue.c.c$a$d:
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status NULL -> a
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status ALREADY_ENABLED -> b
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status ENABLED -> c
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status NOT_NEEDED -> d
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status CANCELLED_BY_DIALOG -> e
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status CANCELLED_BY_INTENT -> f
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status SKIPPED -> g
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status MANIFEST_PERMISSION_NEEDED -> h
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status STOPPED -> i
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status[] $VALUES -> j
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status[] values() -> values
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isNull() -> N
    boolean isCancelled() -> a
    boolean wasPreviouslyNotEnabled() -> b
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.BluetoothEnabler$DefaultBluetoothEnablerFilter -> com.idevicesinc.sweetblue.c.c$b:
    void <init>() -> <init>
    com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$Please onEvent(com.idevicesinc.sweetblue.utils.BluetoothEnabler$BluetoothEnablerFilter$BluetoothEnablerEvent) -> a
com.idevicesinc.sweetblue.utils.EmptyIterator -> com.idevicesinc.sweetblue.c.d:
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.idevicesinc.sweetblue.utils.EpochTime -> com.idevicesinc.sweetblue.c.e:
    com.idevicesinc.sweetblue.utils.EpochTime NULL -> a
    com.idevicesinc.sweetblue.utils.EpochTime MIN -> b
    com.idevicesinc.sweetblue.utils.EpochTime MAX -> c
    com.idevicesinc.sweetblue.utils.EpochTime ZERO -> d
    long m_millisecondsSince1970 -> e
    com.idevicesinc.sweetblue.utils.EpochTime now() -> a
    void <init>(long) -> <init>
    void <init>() -> <init>
    long toMilliseconds() -> b
    boolean isBetween_inclusive(com.idevicesinc.sweetblue.utils.EpochTime,com.idevicesinc.sweetblue.utils.EpochTime) -> a
    boolean isBetween_inclusive(com.idevicesinc.sweetblue.utils.EpochTimeRange) -> a
    int compareTo(com.idevicesinc.sweetblue.utils.EpochTime) -> a
    boolean isNull() -> N
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.EpochTimeRange -> com.idevicesinc.sweetblue.c.f:
    com.idevicesinc.sweetblue.utils.EpochTimeRange NULL -> a
    com.idevicesinc.sweetblue.utils.EpochTimeRange FROM_MIN_TO_1970 -> b
    com.idevicesinc.sweetblue.utils.EpochTimeRange FROM_MIN_TO_MAX -> c
    com.idevicesinc.sweetblue.utils.EpochTimeRange FROM_1970_TO_MAX -> d
    com.idevicesinc.sweetblue.utils.EpochTimeRange ZERO -> e
    com.idevicesinc.sweetblue.utils.EpochTimeRange FIVE_SECONDS -> f
    com.idevicesinc.sweetblue.utils.EpochTime m_from -> g
    com.idevicesinc.sweetblue.utils.EpochTime m_to -> h
    void <init>(com.idevicesinc.sweetblue.utils.EpochTime,com.idevicesinc.sweetblue.utils.EpochTime) -> <init>
    com.idevicesinc.sweetblue.utils.EpochTime from() -> a
    com.idevicesinc.sweetblue.utils.EpochTime to() -> b
    boolean isNull() -> N
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.Event -> com.idevicesinc.sweetblue.c.g:
    java.util.HashMap s_methods -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.ForEach_Breakable -> com.idevicesinc.sweetblue.c.h:
    com.idevicesinc.sweetblue.utils.ForEach_Breakable$Please next(java.lang.Object) -> a
com.idevicesinc.sweetblue.utils.ForEach_Breakable$Please -> com.idevicesinc.sweetblue.c.h$a:
    com.idevicesinc.sweetblue.utils.ForEach_Breakable$Please CONTINUE -> a
    com.idevicesinc.sweetblue.utils.ForEach_Breakable$Please BREAK -> b
    boolean m_continue -> c
    void <init>(boolean) -> <init>
    boolean shouldContinue() -> a
    boolean shouldBreak() -> b
    com.idevicesinc.sweetblue.utils.ForEach_Breakable$Please doContinue() -> c
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.ForEach_Void -> com.idevicesinc.sweetblue.c.i:
    void next(java.lang.Object) -> a
com.idevicesinc.sweetblue.utils.FutureData -> com.idevicesinc.sweetblue.c.j:
    com.idevicesinc.sweetblue.utils.FutureData EMPTY -> a
    byte[] getData() -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.FutureData$1 -> com.idevicesinc.sweetblue.c.j$1:
    byte[] EMPTY_BYTE_ARRAY -> b
    void <init>() -> <init>
    byte[] getData() -> a
com.idevicesinc.sweetblue.utils.GenericListener_Void -> com.idevicesinc.sweetblue.c.k:
    void onEvent(com.idevicesinc.sweetblue.utils.Event) -> a
com.idevicesinc.sweetblue.utils.HistoricalData -> com.idevicesinc.sweetblue.c.l:
    com.idevicesinc.sweetblue.utils.HistoricalData NULL -> a
    byte[] m_blob -> b
    com.idevicesinc.sweetblue.utils.EpochTime m_epochTime -> c
    void <init>(byte[],long) -> <init>
    void <init>(byte[],com.idevicesinc.sweetblue.utils.EpochTime) -> <init>
    com.idevicesinc.sweetblue.utils.EpochTime getEpochTime() -> a
    boolean isNull() -> N
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.HistoricalDataCursor -> com.idevicesinc.sweetblue.c.m:
com.idevicesinc.sweetblue.utils.Interval -> com.idevicesinc.sweetblue.c.n:
    com.idevicesinc.sweetblue.utils.Interval DISABLED -> a
    com.idevicesinc.sweetblue.utils.Interval INFINITE -> b
    com.idevicesinc.sweetblue.utils.Interval ZERO -> c
    com.idevicesinc.sweetblue.utils.Interval ONE_SEC -> d
    com.idevicesinc.sweetblue.utils.Interval FIVE_SECS -> e
    com.idevicesinc.sweetblue.utils.Interval TEN_SECS -> f
    double m_secs -> g
    long m_millis -> h
    void <init>(double,long) -> <init>
    double secs() -> a
    long millis() -> b
    com.idevicesinc.sweetblue.utils.Interval secs(double) -> a
    com.idevicesinc.sweetblue.utils.Interval mins(int) -> a
    com.idevicesinc.sweetblue.utils.Interval millis(long) -> a
    com.idevicesinc.sweetblue.utils.Interval delta(long,long) -> a
    double secs(com.idevicesinc.sweetblue.utils.Interval) -> a
    boolean isEnabled(com.idevicesinc.sweetblue.utils.Interval) -> b
    boolean isEnabled(double) -> b
    boolean isDisabled(com.idevicesinc.sweetblue.utils.Interval) -> c
    boolean isDisabled(java.lang.Double) -> a
    java.lang.String toString() -> toString
    double getRawValue() -> c
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.Percent -> com.idevicesinc.sweetblue.c.o:
    com.idevicesinc.sweetblue.utils.Percent ZERO -> a
    com.idevicesinc.sweetblue.utils.Percent HUNDRED -> b
    double m_doubleValue -> c
    void <init>(double) -> <init>
    int toInt_round() -> a
    com.idevicesinc.sweetblue.utils.Percent fromDouble_clamped(double) -> a
    double clamp(double) -> b
    com.idevicesinc.sweetblue.utils.Percent fromInt(int) -> a
    java.lang.String toString() -> toString
    double getRawValue() -> c
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.Pointer -> com.idevicesinc.sweetblue.c.p:
    java.lang.Object value -> a
    void <init>(java.lang.Object) -> <init>
    void <init>() -> <init>
com.idevicesinc.sweetblue.utils.PresentData -> com.idevicesinc.sweetblue.c.q:
    byte[] m_data -> b
    void <init>(byte[]) -> <init>
    byte[] getData() -> a
com.idevicesinc.sweetblue.utils.ReflectionUuidNameMap -> com.idevicesinc.sweetblue.c.r:
    java.util.HashMap m_dict -> a
    void <init>(java.lang.Class) -> <init>
    java.lang.String getUuidName(java.lang.String) -> a
com.idevicesinc.sweetblue.utils.State -> com.idevicesinc.sweetblue.c.s:
    boolean didEnter(int,int) -> a
com.idevicesinc.sweetblue.utils.State$1 -> com.idevicesinc.sweetblue.c.s$1:
    int[] $SwitchMap$com$idevicesinc$sweetblue$utils$State$ChangeIntent -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.State$ChangeEvent -> com.idevicesinc.sweetblue.c.s$a:
    int m_oldStateBits -> a
    int m_newStateBits -> b
    int m_intentMask -> c
    int oldStateBits() -> c
    int newStateBits() -> d
    void <init>(int,int,int) -> <init>
    int enterMask() -> e
    int exitMask() -> f
    boolean didEnter(com.idevicesinc.sweetblue.utils.State) -> a
    boolean didEnterAny(com.idevicesinc.sweetblue.utils.State[]) -> a
com.idevicesinc.sweetblue.utils.State$ChangeIntent -> com.idevicesinc.sweetblue.c.s$b:
    com.idevicesinc.sweetblue.utils.State$ChangeIntent NULL -> a
    com.idevicesinc.sweetblue.utils.State$ChangeIntent UNINTENTIONAL -> b
    com.idevicesinc.sweetblue.utils.State$ChangeIntent INTENTIONAL -> c
    com.idevicesinc.sweetblue.utils.State$ChangeIntent[] $VALUES -> d
    com.idevicesinc.sweetblue.utils.State$ChangeIntent[] values() -> values
    com.idevicesinc.sweetblue.utils.State$ChangeIntent valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int toDiskValue() -> a
    int toDiskValue(com.idevicesinc.sweetblue.utils.State$ChangeIntent) -> a
    com.idevicesinc.sweetblue.utils.State$ChangeIntent fromDiskValue(int) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.TimeEstimator -> com.idevicesinc.sweetblue.c.t:
    int m_totalSteps -> a
    double m_estimatedTimePerStep -> b
    int m_progress -> c
    double m_timeElapsed -> d
    double m_timeRemaining -> e
    double m_runningAverage -> f
    double[] m_times -> g
    void <init>(int,double,int) -> <init>
    void <init>(int) -> <init>
    void pushTimeStep(double) -> b
    void updateTimeRemaining() -> b
    void addTime(double) -> a
    int getStepsRemaining() -> a
com.idevicesinc.sweetblue.utils.Unit -> com.idevicesinc.sweetblue.c.u:
    void <init>() -> <init>
    boolean lt(com.idevicesinc.sweetblue.utils.Unit) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    double getRawValue() -> c
com.idevicesinc.sweetblue.utils.UpdateLoop -> com.idevicesinc.sweetblue.c.v:
    java.lang.Runnable m_autoUpdateRunnable -> a
    boolean m_isRunning -> b
    long m_lastAutoUpdateTime -> c
    long m_autoUpdateRate -> d
    android.os.Handler m_handler -> e
    com.idevicesinc.sweetblue.PI_UpdateLoop$Callback m_callback -> f
    com.idevicesinc.sweetblue.utils.UpdateLoop newAnonThreadLoop() -> a
    void <init>(com.idevicesinc.sweetblue.PI_UpdateLoop$Callback,boolean) -> <init>
    void initHandler(boolean) -> a
    void postUpdate() -> b
    long access$000(com.idevicesinc.sweetblue.utils.UpdateLoop) -> a
    com.idevicesinc.sweetblue.PI_UpdateLoop$Callback access$100(com.idevicesinc.sweetblue.utils.UpdateLoop) -> b
    long access$002(com.idevicesinc.sweetblue.utils.UpdateLoop,long) -> a
    void access$200(com.idevicesinc.sweetblue.utils.UpdateLoop) -> c
    android.os.Handler access$302(com.idevicesinc.sweetblue.utils.UpdateLoop,android.os.Handler) -> a
    boolean access$400(com.idevicesinc.sweetblue.utils.UpdateLoop) -> d
com.idevicesinc.sweetblue.utils.UpdateLoop$1 -> com.idevicesinc.sweetblue.c.v$1:
    com.idevicesinc.sweetblue.utils.UpdateLoop this$0 -> a
    void <init>(com.idevicesinc.sweetblue.utils.UpdateLoop) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.utils.UpdateLoop$2 -> com.idevicesinc.sweetblue.c.v$2:
    void <init>() -> <init>
    void onUpdate(double) -> a
com.idevicesinc.sweetblue.utils.UpdateLoop$3 -> com.idevicesinc.sweetblue.c.v$3:
    com.idevicesinc.sweetblue.utils.UpdateLoop this$0 -> a
    void <init>(com.idevicesinc.sweetblue.utils.UpdateLoop) -> <init>
    void run() -> run
com.idevicesinc.sweetblue.utils.UsesCustomNull -> com.idevicesinc.sweetblue.c.w:
    boolean isNull() -> N
com.idevicesinc.sweetblue.utils.Utils -> com.idevicesinc.sweetblue.c.x:
    void <init>() -> <init>
    boolean isLollipop() -> a
    boolean isMarshmallow() -> b
    boolean isKitKat() -> c
    boolean isLocationEnabledForScanning_byManifestPermissions(android.content.Context) -> a
    boolean isLocationEnabledForScanning_byRuntimePermissions(android.content.Context) -> b
    boolean hasManifestPermission(android.content.Context,java.lang.String) -> a
    boolean refreshGatt(android.bluetooth.BluetoothGatt) -> a
    boolean isLocationEnabledForScanning_byOsServices(android.content.Context) -> c
    boolean isLocationEnabledForScanning(android.content.Context) -> d
    boolean phoneHasBondingIssues() -> d
    boolean isManufacturer(java.lang.String) -> a
    boolean isProduct(java.lang.String) -> b
    boolean isOnMainThread() -> e
    boolean isSuccess(int) -> a
    boolean hasPermission(android.content.Context,java.lang.String) -> b
    boolean doForEach_break(java.lang.Object,java.util.List) -> a
    boolean doForEach_break(java.lang.Object,java.lang.Object) -> a
com.idevicesinc.sweetblue.utils.Utils_Byte -> com.idevicesinc.sweetblue.c.y:
    char[] hexArray -> a
    int toBits(com.idevicesinc.sweetblue.utils.BitwiseEnum[]) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.Utils_Reflection -> com.idevicesinc.sweetblue.c.z:
    java.lang.String TAG -> a
    void <init>() -> <init>
    java.lang.String fieldStringValue(java.lang.reflect.Field) -> a
    java.lang.Object staticFieldValue(java.lang.reflect.Field) -> b
    boolean callBooleanReturnMethod(java.lang.Object,java.lang.String,boolean) -> a
    boolean callBooleanReturnMethod(java.lang.Object,java.lang.String,java.lang.Class[],boolean,java.lang.Object[]) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.Utils_Rssi -> com.idevicesinc.sweetblue.c.aa:
    double percent(int,int,int) -> a
com.idevicesinc.sweetblue.utils.Utils_ScanRecord -> com.idevicesinc.sweetblue.c.ab:
    java.lang.String TAG -> a
    android.os.ParcelUuid BASE_UUID -> b
    void <init>() -> <init>
    com.idevicesinc.sweetblue.utils.BleScanInfo parseScanRecord(byte[]) -> a
    java.lang.String parseName(byte[]) -> b
    int parseServiceUuid(byte[],int,int,int,java.util.List) -> a
    byte[] extractBytes(byte[],int,int) -> a
    java.util.UUID parseUuidFrom(byte[]) -> c
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.Utils_String -> com.idevicesinc.sweetblue.c.ac:
    java.text.DecimalFormat s_toFixedFormat -> a
    java.lang.String toFixed(double) -> a
    java.lang.String normalizeMacAddress(java.lang.String) -> c
    java.lang.String normalizeMacAddress_replaceDelimiters(java.lang.String) -> d
    java.lang.String normalizeDeviceName(java.lang.String) -> e
    java.lang.String concatStrings(java.lang.String[]) -> a
    java.lang.String toString(int,com.idevicesinc.sweetblue.utils.State[]) -> a
    java.lang.String toString(java.lang.Class,java.lang.Object[]) -> a
    void <clinit>() -> <clinit>
com.idevicesinc.sweetblue.utils.UuidNameMap -> com.idevicesinc.sweetblue.c.ad:
    java.lang.String getUuidName(java.lang.String) -> a
com.idevicesinc.sweetblue.utils.UuidNameMap_ListWrapper -> com.idevicesinc.sweetblue.c.ae:
    java.util.List m_maps -> a
    void <init>(java.util.List) -> <init>
    void <init>() -> <init>
    java.lang.String getUuidName(java.lang.String) -> a
com.idevicesinc.sweetblue.utils.Uuids -> com.idevicesinc.sweetblue.c.af:
    java.util.UUID INVALID -> a
    java.util.UUID GENERIC_ATTRIBUTES_SERVICE_UUID -> b
    java.util.UUID GENERIC_ACCESS_SERVICE_UUID -> c
    java.util.UUID DEVICE_INFORMATION_SERVICE_UUID -> d
    java.util.UUID BATTERY_SERVICE_UUID -> e
    java.util.UUID DEVICE_NAME -> f
    java.util.UUID BATTERY_LEVEL -> g
    java.util.UUID MANUFACTURER_NAME -> h
    java.util.UUID MODEL_NUMBER -> i
    java.util.UUID SERIAL_NUMBER -> j
    java.util.UUID HARDWARE_REVISION -> k
    java.util.UUID FIRMWARE_REVISION -> l
    java.util.UUID SOFTWARE_REVISION -> m
    java.util.UUID SYSTEM_ID -> n
    java.util.UUID[] DEVICE_INFORMATION_UUIDS -> o
    java.util.UUID CURRENT_TIME_SERVICE -> p
    java.util.UUID CURRENT_TIME_SERVICE__CURRENT_TIME -> q
    java.util.UUID CURRENT_TIME_SERVICE__LOCAL_TIME_INFO -> r
    java.util.UUID CHARACTERISTIC_USER_DESCRIPTION_DESCRIPTOR_UUID -> s
    java.util.UUID CLIENT_CHARACTERISTIC_CONFIGURATION_DESCRIPTOR_UUID -> t
    java.util.UUID CHARACTERISTIC_PRESENTATION_FORMAT_DESCRIPTOR_UUID -> u
    void <init>() -> <init>
    java.util.UUID fromShort(java.lang.String) -> a
    java.util.UUID fromShort(short) -> a
    java.util.UUID fromShort(int) -> a
    java.util.UUID fromShort(short,java.lang.String) -> a
    java.util.UUID fromShort(java.lang.String,java.lang.String) -> a
    java.util.UUID fromInt(java.lang.String) -> b
    java.util.UUID fromInt(java.lang.String,java.lang.String) -> b
    java.util.UUID fromString(java.lang.String) -> c
    boolean hasHexPrefix(java.lang.String) -> d
    java.lang.String chopOffHexPrefix(java.lang.String) -> e
    boolean assignedNumber_earlyOut(java.lang.String,int) -> a
    java.lang.String padAssignedNumber(java.lang.String,int) -> b
    void <clinit>() -> <clinit>
